[{"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\EditPresentation.js":"1","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SlideDetail.js":"2","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SingleSlide.js":"3","C:\\ReactJS\\uet-project\\src\\util\\APIUtils.js":"4","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\slideSlice.js":"5","C:\\ReactJS\\uet-project\\src\\index.js":"6","C:\\ReactJS\\uet-project\\src\\app\\App.js":"7","C:\\ReactJS\\uet-project\\src\\common\\LoadingIndicator.js":"8","C:\\ReactJS\\uet-project\\src\\common\\NotFound.js":"9","C:\\ReactJS\\uet-project\\src\\common\\PublicRoute.js":"10","C:\\ReactJS\\uet-project\\src\\common\\PrivateRoute.js":"11","C:\\ReactJS\\uet-project\\src\\common\\AppHeader.js":"12","C:\\ReactJS\\uet-project\\src\\pages\\landing\\Home.js":"13","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\Presentations.js":"14","C:\\ReactJS\\uet-project\\src\\store\\store.js":"15","C:\\ReactJS\\uet-project\\src\\constants\\index.js":"16","C:\\ReactJS\\uet-project\\src\\common\\AppSider.js":"17","C:\\ReactJS\\uet-project\\src\\pages\\question\\QuestionList.js":"18","C:\\ReactJS\\uet-project\\src\\util\\Helpers.js":"19","C:\\ReactJS\\uet-project\\src\\pages\\question\\Questions.js":"20","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\PresentationList.js":"21","C:\\ReactJS\\uet-project\\src\\util\\score.js":"22","C:\\ReactJS\\uet-project\\src\\pages\\question\\EditQuestion.js":"23","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Lobby\\index.jsx":"24","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Main\\index.jsx":"25","C:\\ReactJS\\uet-project\\src\\pages\\Host\\index.jsx":"26","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\InGame\\index.jsx":"27","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\index.jsx":"28","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Pin\\index.jsx":"29","C:\\ReactJS\\uet-project\\src\\reportWebVitals.js":"30","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Name\\index.jsx":"31","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\components\\InputPIN.jsx":"32","C:\\ReactJS\\uet-project\\src\\pages\\Host\\hostSlice.js":"33","C:\\ReactJS\\uet-project\\src\\pages\\Host\\ProgressBar.js":"34","C:\\ReactJS\\uet-project\\src\\pages\\Host\\Delayed.js":"35","C:\\ReactJS\\uet-project\\src\\pages\\Host\\CountdownTimer.js":"36","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\QuestionBankDrawer.js":"37","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Instruction\\index.jsx":"38","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\ScoreBoard\\index.js":"39","C:\\ReactJS\\uet-project\\src\\pages\\question\\PicturesWall.js":"40","C:\\ReactJS\\uet-project\\src\\pages\\user\\profile\\Profile.js":"41","C:\\ReactJS\\uet-project\\src\\util\\QuestionType.js":"42","C:\\ReactJS\\uet-project\\src\\pages\\user\\login\\Login.js":"43","C:\\ReactJS\\uet-project\\src\\util\\Colors.js":"44","C:\\ReactJS\\uet-project\\src\\pages\\user\\signup\\Signup.js":"45","C:\\ReactJS\\uet-project\\src\\util\\Role.js":"46","C:\\ReactJS\\uet-project\\src\\util\\ImageURI.js":"47","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\AnswerdCount.js":"48","C:\\ReactJS\\uet-project\\src\\common\\ServerError.js":"49","C:\\ReactJS\\uet-project\\src\\pages\\report\\index.jsx":"50"},{"size":13446,"mtime":1618626704914,"results":"51","hashOfConfig":"52"},{"size":12731,"mtime":1618843497311,"results":"53","hashOfConfig":"52"},{"size":1186,"mtime":1614737133513,"results":"54","hashOfConfig":"52"},{"size":6245,"mtime":1618322993968,"results":"55","hashOfConfig":"52"},{"size":1673,"mtime":1616487245976,"results":"56","hashOfConfig":"52"},{"size":805,"mtime":1616083517546,"results":"57","hashOfConfig":"52"},{"size":5396,"mtime":1619082210870,"results":"58","hashOfConfig":"52"},{"size":265,"mtime":1618585522147,"results":"59","hashOfConfig":"52"},{"size":427,"mtime":1614135413647,"results":"60","hashOfConfig":"52"},{"size":416,"mtime":1613854056924,"results":"61","hashOfConfig":"52"},{"size":481,"mtime":1618587949298,"results":"62","hashOfConfig":"52"},{"size":3064,"mtime":1618905565745,"results":"63","hashOfConfig":"52"},{"size":814,"mtime":1619018014514,"results":"64","hashOfConfig":"52"},{"size":3638,"mtime":1618589495122,"results":"65","hashOfConfig":"52"},{"size":282,"mtime":1616070090624,"results":"66","hashOfConfig":"52"},{"size":691,"mtime":1617296708178,"results":"67","hashOfConfig":"52"},{"size":1612,"mtime":1618904634582,"results":"68","hashOfConfig":"52"},{"size":3408,"mtime":1616251316521,"results":"69","hashOfConfig":"52"},{"size":972,"mtime":1613638260326,"results":"70","hashOfConfig":"52"},{"size":5241,"mtime":1616488568592,"results":"71","hashOfConfig":"52"},{"size":3601,"mtime":1616432778385,"results":"72","hashOfConfig":"52"},{"size":91,"mtime":1613900959638,"results":"73","hashOfConfig":"52"},{"size":15466,"mtime":1618839750884,"results":"74","hashOfConfig":"52"},{"size":7620,"mtime":1619020432731,"results":"75","hashOfConfig":"52"},{"size":4097,"mtime":1619084551439,"results":"76","hashOfConfig":"52"},{"size":636,"mtime":1615828422397,"results":"77","hashOfConfig":"52"},{"size":15151,"mtime":1619025826159,"results":"78","hashOfConfig":"52"},{"size":653,"mtime":1616928105874,"results":"79","hashOfConfig":"52"},{"size":2207,"mtime":1619084849952,"results":"80","hashOfConfig":"52"},{"size":362,"mtime":1606210735677,"results":"81","hashOfConfig":"52"},{"size":2453,"mtime":1619084931922,"results":"82","hashOfConfig":"52"},{"size":572,"mtime":1614909221751,"results":"83","hashOfConfig":"52"},{"size":1081,"mtime":1617246113456,"results":"84","hashOfConfig":"52"},{"size":888,"mtime":1616856572516,"results":"85","hashOfConfig":"52"},{"size":592,"mtime":1617242627760,"results":"86","hashOfConfig":"52"},{"size":913,"mtime":1615982344537,"results":"87","hashOfConfig":"52"},{"size":4079,"mtime":1616846183984,"results":"88","hashOfConfig":"52"},{"size":9721,"mtime":1618905562681,"results":"89","hashOfConfig":"52"},{"size":925,"mtime":1617212230385,"results":"90","hashOfConfig":"52"},{"size":3982,"mtime":1619164607731,"results":"91","hashOfConfig":"52"},{"size":11320,"mtime":1618328007275,"results":"92","hashOfConfig":"52"},{"size":187,"mtime":1616922083205,"results":"93","hashOfConfig":"52"},{"size":2802,"mtime":1617900354178,"results":"94","hashOfConfig":"52"},{"size":613,"mtime":1617896231666,"results":"95","hashOfConfig":"52"},{"size":11577,"mtime":1617900310769,"results":"96","hashOfConfig":"52"},{"size":131,"mtime":1617898061377,"results":"97","hashOfConfig":"52"},{"size":148,"mtime":1618849857152,"results":"98","hashOfConfig":"52"},{"size":1873,"mtime":1618850809795,"results":"99","hashOfConfig":"52"},{"size":418,"mtime":1614135403113,"results":"100","hashOfConfig":"52"},{"size":177,"mtime":1619082141369,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"nz9s2i",{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"104"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"104"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"104"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"104"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"104"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"104"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"179"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"152"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"137"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"104"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"155"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"104"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\EditPresentation.js",[],["222","223"],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SlideDetail.js",["224"],"import {\r\n  CheckOutlined,\r\n  ClockCircleOutlined,\r\n  CommentOutlined,\r\n  SketchOutlined,\r\n  PlusOutlined,\r\n  SettingOutlined,\r\n  PictureOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Col,\r\n  Form,\r\n  Input,\r\n  Row,\r\n  Select,\r\n  Slider,\r\n  Typography,\r\n} from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport score from \"../../util/score\";\r\nimport { currentSlide } from \"./slideSlice\";\r\nimport * as QuestionType from \"util/QuestionType\";\r\nimport PicturesWall from \"pages/question/PicturesWall\";\r\n\r\nSlideDetail.propTypes = {};\r\n\r\nconst { Option } = Select;\r\nconst { Title } = Typography;\r\n\r\nconst StyledSlide = styled.div`\r\n  background: white;\r\n  color: dodgerblue;\r\n  font-size: 1em;\r\n  border: 1px solid gainsboro;\r\n  padding: 50px;\r\n  margin: 5px;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst StyledSetting = styled.div`\r\n  background: white;\r\n  width: 20vw;\r\n  color: dodgerblue;\r\n  font-size: 1em;\r\n  border: 1px solid gainsboro;\r\n  padding: 50px;\r\n  margin: 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst TitleInput = styled(Input)`\r\n  font-size: 3em;\r\n  font-weight: bold;\r\n  border: 2px solid dodgerblue;\r\n  border-radius: 3px;\r\n\r\n  margin: ${(props) => props.size};\r\n  padding: ${(props) => props.size};\r\n`;\r\n\r\n// const OptionInput = styled(Input)`\r\n//   color: dodgerblue;\r\n//   font-size: 2em;\r\n//   border: 2px solid dodgerblue;\r\n//   border-radius: 3px;\r\n\r\n//   margin: 5px;\r\n//   padding: ${(props) => props.size};\r\n// `;\r\n\r\nfunction SlideDetail(props) {\r\n  const { content } = props;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const slide = useSelector((state) => state.slides);\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  let formValues;\r\n\r\n  function onChange(changedValues, allValues) {\r\n    formValues = { ...slide.current, ...allValues };\r\n    dispatch(currentSlide(formValues));\r\n  }\r\n\r\n  useEffect(() => {\r\n    const onFill = (content) => {\r\n      form.setFieldsValue({\r\n        title: content.title,\r\n        answers: content.answers\r\n          ? content.answers\r\n          : [{ text: \"\" }, { text: \"\" }],\r\n        score: content.score,\r\n        seconds: content.seconds,\r\n        questionType: content.questionType,\r\n        image: content.image ? content.image : \"\",\r\n      });\r\n    };\r\n\r\n    onFill(content);\r\n    dispatch(currentSlide(content));\r\n  }, [content, form, dispatch]);\r\n\r\n  return (\r\n    <Form form={form} onValuesChange={onChange}>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          flexWrap: \"wrap\",\r\n          alignContent: \"space-between\",\r\n        }}\r\n      >\r\n        <StyledSlide>\r\n          <Form.Item name=\"title\">\r\n            <TitleInput placeholder=\"Title question\" autoComplete=\"off\" />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"image\"\r\n            label={\r\n              <Title level={4}>\r\n                <PictureOutlined /> Image\r\n              </Title>\r\n            }\r\n          >\r\n            <PicturesWall />\r\n          </Form.Item>\r\n\r\n          <Form.List name=\"answers\" initialValue={[\"\", \"\"]}>\r\n            {(answers, { add, remove }) => {\r\n              return (\r\n                <div>\r\n                  {slide.current.questionType ===\r\n                  QuestionType.QUESTION_CHOICE_ANSWER\r\n                    ? answers.map((answer, index) => (\r\n                        <div key={answer.key}>\r\n                          <Form.Item label={`Option ${index + 1}`}>\r\n                            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                              <Col span={18}>\r\n                                <Form.Item\r\n                                  name={[index, \"text\"]}\r\n                                  rules={[{ require: true }]}\r\n                                >\r\n                                  <Input\r\n                                    placeholder={`Option ${index + 1}`}\r\n                                    autoComplete=\"off\"\r\n                                  />\r\n                                </Form.Item>\r\n                              </Col>\r\n                              <Col span={2}>\r\n                                <Form.Item\r\n                                  name={[index, \"correct\"]}\r\n                                  valuePropName=\"checked\"\r\n                                  rules={[{ require: true, type: \"boolean\" }]}\r\n                                >\r\n                                  <Checkbox checked={false} />\r\n                                </Form.Item>\r\n                              </Col>\r\n                              <Col span={4}>\r\n                                {index > 1 ? (\r\n                                  <Button\r\n                                    type=\"danger\"\r\n                                    onClick={() => remove(answer.name)}\r\n                                  >\r\n                                    Remove\r\n                                  </Button>\r\n                                ) : null}\r\n                              </Col>\r\n                            </Row>\r\n                          </Form.Item>\r\n                        </div>\r\n                      ))\r\n                    : slide.current.questionType ===\r\n                      QuestionType.QUESTION_TRUE_FALSE\r\n                    ? answers.map((answer, index) => (\r\n                        <div key={answer.key}>\r\n                          <Form.Item label={`Option ${index + 1}`}>\r\n                            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                              <Col span={6}>\r\n                                <Form.Item\r\n                                  name={[index, \"text\"]}\r\n                                  rules={[{ require: true }]}\r\n                                >\r\n                                  <Input readOnly />\r\n                                </Form.Item>\r\n                              </Col>\r\n                              <Col span={2}>\r\n                                <Form.Item\r\n                                  name={[index, \"correct\"]}\r\n                                  valuePropName=\"checked\"\r\n                                  rules={[{ require: true, type: \"boolean\" }]}\r\n                                >\r\n                                  <input\r\n                                    style={{ fontSize: 15 }}\r\n                                    name=\"inpRadio\"\r\n                                    type=\"radio\"\r\n                                    checked={false}\r\n                                  />\r\n                                </Form.Item>\r\n                              </Col>\r\n                            </Row>\r\n                          </Form.Item>\r\n                        </div>\r\n                      ))\r\n                    : slide.current.questionType ===\r\n                      QuestionType.QUESTION_INPUT_ANSWER\r\n                    ? answers.map((answer, index) => (\r\n                        <div key={answer.key}>\r\n                          <Form.Item label={`Correct answer ${index + 1}`}>\r\n                            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                              <Col span={18}>\r\n                                <Form.Item\r\n                                  name={[index, \"text\"]}\r\n                                  rules={[{ require: true }]}\r\n                                >\r\n                                  <Input\r\n                                    placeholder={`Correct answer ${index + 1}`}\r\n                                  />\r\n                                </Form.Item>\r\n                              </Col>\r\n                              <Col span={2}>\r\n                                <Form.Item\r\n                                  name={[index, \"correct\"]}\r\n                                  valuePropName=\"checked\"\r\n                                  rules={[{ require: true, type: \"boolean\" }]}\r\n                                >\r\n                                  <Checkbox defaultChecked disabled />\r\n                                </Form.Item>\r\n                              </Col>\r\n                              <Col span={4}>\r\n                                {index > 1 ? (\r\n                                  <Button\r\n                                    type=\"danger\"\r\n                                    onClick={() => remove(answer.name)}\r\n                                  >\r\n                                    Remove\r\n                                  </Button>\r\n                                ) : null}\r\n                              </Col>\r\n                            </Row>\r\n                          </Form.Item>\r\n                        </div>\r\n                      ))\r\n                    : \"The type of question has not been determined\"}\r\n                  {answers.length < 4 &&\r\n                  slide.current.questionType !==\r\n                    QuestionType.QUESTION_TRUE_FALSE ? (\r\n                    <Form.Item>\r\n                      <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                        <Button\r\n                          type=\"dashed\"\r\n                          onClick={() =>\r\n                            slide.current.questionType ===\r\n                            QuestionType.QUESTION_INPUT_ANSWER\r\n                              ? add({ text: \"\", correct: true })\r\n                              : add()\r\n                          }\r\n                          style={{ width: \"60%\" }}\r\n                        >\r\n                          <PlusOutlined /> Add more\r\n                        </Button>\r\n                      </Row>\r\n                    </Form.Item>\r\n                  ) : null}\r\n                </div>\r\n              );\r\n            }}\r\n          </Form.List>\r\n        </StyledSlide>\r\n\r\n        <StyledSetting>\r\n          <Title level={4}>\r\n            <CommentOutlined /> Question Type\r\n          </Title>\r\n          <Form.Item name=\"questionType\" rules={[{ required: true }]}>\r\n            <Select\r\n              disabled\r\n              // onChange={handleChange}\r\n            >\r\n              <Option value={QuestionType.QUESTION_CHOICE_ANSWER}>Quiz</Option>\r\n              <Option value={QuestionType.QUESTION_TRUE_FALSE}>\r\n                True or False\r\n              </Option>\r\n              <Option value={QuestionType.QUESTION_INPUT_ANSWER}>\r\n                Input answer\r\n              </Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Title level={4}>\r\n            <SketchOutlined /> Points\r\n          </Title>\r\n          <Form.Item\r\n            name=\"score\"\r\n            initialValue={1000}\r\n            rules={[{ type: \"number\", required: false }]}\r\n          >\r\n            <Slider marks={score} min={0} max={2000} step={null} />\r\n          </Form.Item>\r\n          <Title level={4}>\r\n            <ClockCircleOutlined /> Time to answer\r\n          </Title>\r\n          <Form.Item\r\n            name=\"seconds\"\r\n            rules={[{ type: \"number\", required: false }]}\r\n          >\r\n            <Select\r\n              placeholder=\"Choose a time\"\r\n              menuItemSelectedIcon={<CheckOutlined />}\r\n            >\r\n              <Option value={5}>5 seconds</Option>\r\n              <Option value={10}>10 seconds</Option>\r\n              <Option value={20}>20 seconds</Option>\r\n              <Option value={30}>30 seconds</Option>\r\n              <Option value={60}>1 minute</Option>\r\n              <Option value={90}>1 minute 30 seconds</Option>\r\n              <Option value={120}>2 minutes</Option>\r\n              <Option value={240}>4 minutes</Option>\r\n            </Select>\r\n          </Form.Item>\r\n          {slide.current.questionType ===\r\n            QuestionType.QUESTION_CHOICE_ANSWER && (\r\n            <>\r\n              <Title level={4}>\r\n                <SettingOutlined /> Question Option\r\n              </Title>\r\n              <Form.Item\r\n                name=\"multiSelect\"\r\n                rules={[{ type: \"boolean\", required: false }]}\r\n              >\r\n                <Select\r\n                  defaultActiveFirstOption\r\n                  placeholder=\"\"\r\n                  menuItemSelectedIcon={<CheckOutlined />}\r\n                >\r\n                  <Option value={false}>Single select</Option>\r\n                  <Option value={true}>Multi-select</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </>\r\n          )}\r\n          <Button danger onClick={() => props.deleteSlide(slide.current.id)}>\r\n            Delete\r\n          </Button>\r\n        </StyledSetting>\r\n      </div>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default SlideDetail;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SingleSlide.js",[],"C:\\ReactJS\\uet-project\\src\\util\\APIUtils.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\slideSlice.js",[],"C:\\ReactJS\\uet-project\\src\\index.js",[],"C:\\ReactJS\\uet-project\\src\\app\\App.js",["225"],"import { Layout, notification } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Redirect,\n  Route,\n  Switch,\n  useHistory,\n  withRouter,\n} from \"react-router-dom\";\nimport AppHeader from \"../common/AppHeader\";\nimport { ACCESS_TOKEN } from \"../constants\";\nimport { getCurrentUser } from \"../util/APIUtils\";\nimport LoadingIndicator from \"./../common/LoadingIndicator\";\nimport NotFound from \"./../common/NotFound\";\nimport PrivateRoute from \"./../common/PrivateRoute\";\nimport \"./App.css\";\nimport PublicRoute from \"../common/PublicRoute\";\n\nconst { Content } = Layout;\n\nconst Home = React.lazy(() => import(\"pages/landing/Home\"));\nconst Audience = React.lazy(() => import(\"pages/Audience/index\"));\nconst Host = React.lazy(() => import(\"pages/Host/index\"));\n\nconst Presentations = React.lazy(() =>\n  import(\"pages/presentation/Presentations\")\n);\nconst Questions = React.lazy(() => import(\"pages/question/Questions\"));\nconst Report = React.lazy(() => import(\"pages/report/index\"));\n\nconst Login = React.lazy(() => import(\"pages/user/login/Login\"));\nconst Signup = React.lazy(() => import(\"pages/user/signup/Signup\"));\nconst Profile = React.lazy(() => import(\"pages/user/profile/Profile\"));\n\nconst App = (props) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const history = useHistory();\n\n  notification.config({\n    placement: \"topRight\",\n    top: 70,\n    duration: 3,\n  });\n\n  function loadCurrentUser() {\n    setIsLoading(true);\n    getCurrentUser()\n      .then((response) => {\n        setCurrentUser(response);\n        // console.log(response);\n        setIsAuthenticated(true);\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        setIsLoading(false);\n      });\n  }\n\n  function handleLogout(\n    redirectTo = \"/\",\n    notificationType = \"success\",\n    description = \"You're successfully logged out.\"\n  ) {\n    history.push(\"/\");\n\n    localStorage.removeItem(ACCESS_TOKEN);\n\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n\n    notification[notificationType]({\n      message: \"Viedu App\",\n      description: description,\n    });\n  }\n\n  function handleLogin() {\n    notification.success({\n      message: \"Viedu App\",\n      description: \"You're successfully logged in.\",\n    });\n    loadCurrentUser();\n\n    history.push(\"/\");\n  }\n\n  useEffect(() => {\n    loadCurrentUser();\n  }, []);\n\n  // if (isLoading) {\n  //   return <LoadingIndicator />;\n  // }\n\n  return (\n    <Layout className=\"app-container\">\n      {isLoading && <LoadingIndicator />}\n      {!isLoading && (\n        <>\n          <AppHeader\n            isAuthenticated={isAuthenticated}\n            currentUser={currentUser}\n            onLogout={handleLogout}\n          />\n          <Content className=\"app-content\">\n            <div className=\"container\">\n              <Switch>\n                {isAuthenticated && (\n                  <Redirect exact from=\"/\" to=\"/presentations\" />\n                )}\n                <PublicRoute\n                  restricted={false}\n                  path=\"/\"\n                  component={Home}\n                  exact\n                  authenticated={isAuthenticated}\n                />\n                <PublicRoute\n                  exact\n                  restricted={true}\n                  path=\"/login\"\n                  authenticated={isAuthenticated}\n                  component={(props) =>\n                    !isAuthenticated ? (\n                      <Login onLogin={handleLogin} {...props} />\n                    ) : null\n                  }\n                />\n                <Route exac path=\"/signup\" component={Signup}></Route>\n                <Route exact path=\"/user\">\n                  <Redirect to=\"/user/profile\" />\n                </Route>\n                <Route\n                  path=\"/user/profile\"\n                  render={(props) => (\n                    <Profile\n                      isAuthenticated={isAuthenticated}\n                      currentUser={currentUser}\n                      {...props}\n                    />\n                  )}\n                />\n                {/* <PrivateRoute\n              authenticated={isAuthenticated}\n              path=\"/presentations\"\n              component={Presentations}\n              handleLogout={handleLogout}\n            />\n            <PrivateRoute\n              authenticated={isAuthenticated}\n              path=\"/questions\"\n              component={Questions}\n              handleLogout={handleLogout}\n            /> */}\n                <Route\n                  path=\"/presentations\"\n                  component={Presentations}\n                  handleLogout={handleLogout}\n                />\n                <Route\n                  path=\"/questions\"\n                  component={Questions}\n                  handleLogout={handleLogout}\n                />\n                <Route\n                  path=\"/reports\"\n                  component={Report}\n                  handleLogout={handleLogout}\n                />\n                <Route path=\"/play\" component={Host} />\n                <Route path={[\"/audience\", \"/go\"]} component={Audience} />\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </Content>\n        </>\n      )}\n    </Layout>\n  );\n};\n\nexport default withRouter(App);\n","C:\\ReactJS\\uet-project\\src\\common\\LoadingIndicator.js",["226"],"import { LoadingOutlined } from \"@ant-design/icons\";\r\nimport React from \"react\";\r\nimport { Spin } from \"antd\";\r\n\r\nexport default function LoadingIndicator(props) {\r\n  return (\r\n    <Spin style={{ display: \"block\", textAlign: \"center\", marginTop: 30 }} />\r\n  );\r\n}\r\n","C:\\ReactJS\\uet-project\\src\\common\\NotFound.js",[],"C:\\ReactJS\\uet-project\\src\\common\\PublicRoute.js",[],"C:\\ReactJS\\uet-project\\src\\common\\PrivateRoute.js",[],"C:\\ReactJS\\uet-project\\src\\common\\AppHeader.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\landing\\Home.js",["227"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Row, Col, Image } from \"antd\";\r\nimport Signup from \"pages/user/signup/Signup\";\r\nimport \"./Home.css\";\r\n\r\nHome.propTypes = {};\r\n\r\nfunction Home(props) {\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          xs={24}\r\n          xl={12}\r\n          style={{\r\n            padding: 50,\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Image\r\n            preview={false}\r\n            src=\"https://www.ninjatropic.com/wp-content/uploads/2020/09/Explaining-Complex-Topics-eLearning-Video.jpg\"\r\n          />\r\n        </Col>\r\n        <Col xs={24} xl={12}>\r\n          <Signup />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\Presentations.js",[],"C:\\ReactJS\\uet-project\\src\\store\\store.js",[],["228","229"],"C:\\ReactJS\\uet-project\\src\\constants\\index.js",[],"C:\\ReactJS\\uet-project\\src\\common\\AppSider.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\question\\QuestionList.js",[],"C:\\ReactJS\\uet-project\\src\\util\\Helpers.js",[],["230","231"],"C:\\ReactJS\\uet-project\\src\\pages\\question\\Questions.js",["232","233"],"import {\r\n  Button,\r\n  Col,\r\n  Form,\r\n  Modal,\r\n  notification,\r\n  Row,\r\n  Select,\r\n  Space,\r\n  PageHeader,\r\n} from \"antd\";\r\nimport React from \"react\";\r\nimport {\r\n  Route,\r\n  Switch,\r\n  useHistory,\r\n  useRouteMatch,\r\n  withRouter,\r\n} from \"react-router-dom\";\r\nimport AppSider from \"../../common/AppSider\";\r\nimport NotFound from \"../../common/NotFound\";\r\nimport { createQuestion } from \"../../util/APIUtils\";\r\nimport EditQuestion from \"./EditQuestion\";\r\nimport QuestionList from \"./QuestionList\";\r\nimport PrivateRoute from \"./../../common/PrivateRoute\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst routes = [\r\n  {\r\n    path: \"/\",\r\n    breadcrumbName: \"Home\",\r\n  },\r\n  {\r\n    path: \"/questions\",\r\n    breadcrumbName: \"Question List\",\r\n  },\r\n];\r\n\r\nconst Questions = (props) => {\r\n  let match = useRouteMatch();\r\n  // console.log({ match });\r\n\r\n  const [visible, setVisible] = React.useState(false);\r\n  const [confirmLoading, setConfirmLoading] = React.useState(false);\r\n\r\n  const [form] = Form.useForm();\r\n  const [description, setDescription] = React.useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const showModal = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const handleSubmit = (values) => {\r\n    let answersField;\r\n    if (values.questionType === \"QUESTION_TRUE_FALSE\") {\r\n      answersField = { answers: [{ text: \"TRUE\" }, { text: \"FALSE\" }] };\r\n      values = { ...values, ...answersField };\r\n    }\r\n\r\n    if (values.questionType === \"QUESTION_INPUT_ANSWER\") {\r\n      answersField = {\r\n        answers: [\r\n          { text: \"\", correct: true },\r\n          { text: \"\", correct: true },\r\n        ],\r\n      };\r\n      values = { ...values, ...answersField };\r\n    }\r\n\r\n    const newQuestion = Object.assign({}, values);\r\n\r\n    setConfirmLoading(true);\r\n    createQuestion(newQuestion)\r\n      .then((response) => {\r\n        notification.success({\r\n          message: \"Viedu App\",\r\n          description: \"Created new question!\",\r\n        });\r\n        history.push(`${match.url}/${response.id}`);\r\n      })\r\n      .catch((error) => {\r\n        notification.error({\r\n          message: \"Viedu App\",\r\n          description: error.message || \"Error\",\r\n        });\r\n      });\r\n    setVisible(false);\r\n    setConfirmLoading(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setVisible(false);\r\n    form.resetFields();\r\n  };\r\n\r\n  function handleChange(value) {\r\n    // console.log(`selected ${value}`);\r\n    switch (value) {\r\n      case \"QUESTION_CHOICE_ANSWER\":\r\n        setDescription(\r\n          \"Gives players several answer alternatives to choose from \"\r\n        );\r\n        break;\r\n      case \"QUESTION_TRUE_FALSE\":\r\n        setDescription(\"Let players decided if the statement is true or false\");\r\n        break;\r\n      case \"QUESTION_INPUT_ANSWER\":\r\n        setDescription(\"Let players input a answer\");\r\n        break;\r\n\r\n      default:\r\n        setDescription(\"\");\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Switch>\r\n      <Route\r\n        exact\r\n        path={match.path}\r\n        render={() => (\r\n          <AppSider>\r\n            <PageHeader\r\n              title=\"My questions\"\r\n              breadcrumb={{ routes }}\r\n              subTitle=\"\"\r\n            />\r\n            <Row>\r\n              <Col span={6}>\r\n                <Space>\r\n                  <Button type=\"primary\" onClick={showModal}>\r\n                    New Question\r\n                  </Button>\r\n                  <Modal\r\n                    title=\"New question\"\r\n                    visible={visible}\r\n                    onOk={form.submit}\r\n                    confirmLoading={confirmLoading}\r\n                    onCancel={handleCancel}\r\n                    okText=\"Create\"\r\n                  >\r\n                    <Form form={form} onFinish={handleSubmit}>\r\n                      <Form.Item\r\n                        name=\"questionType\"\r\n                        label=\"Question Type\"\r\n                        rules={[{ required: true }]}\r\n                      >\r\n                        <Select\r\n                          defaultActiveFirstOption\r\n                          style={{ width: 120 }}\r\n                          onChange={handleChange}\r\n                        >\r\n                          <Option value=\"QUESTION_CHOICE_ANSWER\">Quiz</Option>\r\n                          <Option value=\"QUESTION_TRUE_FALSE\">\r\n                            True or False\r\n                          </Option>\r\n                          <Option value=\"QUESTION_INPUT_ANSWER\">\r\n                            Input answer\r\n                          </Option>\r\n                        </Select>\r\n                      </Form.Item>\r\n                    </Form>\r\n                    <p>{description}</p>\r\n                  </Modal>\r\n                </Space>\r\n              </Col>\r\n              <Col span={18}></Col>\r\n            </Row>\r\n            <br />\r\n            <QuestionList />\r\n          </AppSider>\r\n        )}\r\n      />\r\n      <Route\r\n        authenticated\r\n        path={`${match.path}/:questionId/edit`}\r\n        component={EditQuestion}\r\n      />\r\n      <Route\r\n        authenticated\r\n        path={`${match.path}/:questionId`}\r\n        component={EditQuestion}\r\n      />\r\n      <Route component={NotFound} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Questions;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\PresentationList.js",[],["234","235"],"C:\\ReactJS\\uet-project\\src\\util\\score.js",[],["236","237"],"C:\\ReactJS\\uet-project\\src\\pages\\question\\EditQuestion.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Lobby\\index.jsx",["238","239","240"],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Main\\index.jsx",["241"],"import { Button, Divider, Form, Input, Switch, Row, Col, Collapse } from \"antd\";\r\nimport React, { useEffect } from \"react\";\r\nimport { createGame } from \"util/APIUtils\";\r\nimport { useHistory, useLocation, useRouteMatch } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { currentGame } from \"./../../hostSlice\";\r\n\r\nconst { Panel } = Collapse;\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction Main(props) {\r\n  const match = useRouteMatch();\r\n  const [form] = Form.useForm();\r\n  const history = useHistory();\r\n\r\n  let query = useQuery();\r\n  const quizId = query.get(\"quizId\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  async function handleSubmit(values) {\r\n    const gameData = Object.assign({}, values);\r\n    // console.log(log);\r\n\r\n    await createGame(gameData)\r\n      .then((response) => {\r\n        dispatch(currentGame(response));\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    history.push(`${match.url}/lobby?quizId=${quizId}`, {\r\n      rootPath: match.url,\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({\r\n      presentationId: quizId,\r\n      gameType: \"LIVE\",\r\n    });\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <Form\r\n          style={{ width: 350, fontSize: 15 }}\r\n          form={form}\r\n          onFinish={handleSubmit}\r\n        >\r\n          <Form.Item name=\"gameType\">\r\n            <Input hidden />\r\n          </Form.Item>\r\n          <Form.Item name=\"presentationId\">\r\n            <Input hidden />\r\n          </Form.Item>\r\n          <Form.Item name=\"title\">\r\n            <Input autoFocus placeholder=\"Title\" />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Create Room\r\n              </Button>\r\n            </div>\r\n          </Form.Item>\r\n\r\n          <Collapse>\r\n            <Panel header=\"Game options\" key=\"1\">\r\n              <div>\r\n                <Row>\r\n                  <Col span={20}>\r\n                    Show question and answers on player's device\r\n                  </Col>\r\n                  <Col span={4}>\r\n                    <Form.Item\r\n                      name=\"playerDeviceDisplay\"\r\n                      valuePropName=\"checked\"\r\n                    >\r\n                      <Switch />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <Col span={20}>Random order of questions</Col>\r\n                  <Col span={4}>\r\n                    <Form.Item name=\"randomQuestion\" valuePropName=\"checked\">\r\n                      <Switch />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <Col span={20}>Random order of answers</Col>\r\n                  <Col span={4}>\r\n                    <Form.Item name=\"randomAnswer\" valuePropName=\"checked\">\r\n                      <Switch />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <Col span={20}>Friendly nickname genarator</Col>\r\n                  <Col span={4}>\r\n                    <Form.Item name=\"nicknameGenerator\" valuePropName=\"checked\">\r\n                      <Switch defaultChecked />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <Col span={20}>Show minimized intro instructions</Col>\r\n                  <Col span={4}>\r\n                    <Form.Item name=\"showInstructions\" valuePropName=\"checked\">\r\n                      <Switch />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n              </div>\r\n            </Panel>\r\n          </Collapse>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\index.jsx",[],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\InGame\\index.jsx",["242","243","244"],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\index.jsx",[],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Pin\\index.jsx",[],"C:\\ReactJS\\uet-project\\src\\reportWebVitals.js",[],["245","246"],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Name\\index.jsx",[],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\components\\InputPIN.jsx",["247","248"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Input, Tooltip } from \"antd\";\r\n\r\nInputPIN.propTypes = {};\r\n\r\nfunction InputPIN(props) {\r\n  const onChange = (e) => {\r\n    const { value } = e.target;\r\n    const reg = /^\\d*(\\d*)?$/;\r\n    if ((!isNaN(value) && reg.test(value)) || value === \"\") {\r\n      props.onChange(value);\r\n    }\r\n  };\r\n\r\n  const onBlur = () => {\r\n    const { onBlur } = props;\r\n    if (onBlur) {\r\n      onBlur();\r\n    }\r\n  };\r\n\r\n  return <Input {...props} onChange={onChange} onBlur={onBlur} />;\r\n}\r\n\r\nexport default InputPIN;\r\n",["249","250"],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\hostSlice.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\ProgressBar.js",["251"],"import React, { useEffect, useState } from \"react\";\r\nimport { Progress } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport { clearInterval } from \"stompjs\";\r\n\r\nProgressBar.propTypes = {\r\n  time: PropTypes.number.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n};\r\n\r\nfunction ProgressBar(props) {\r\n  const totalSecond = props.time;\r\n  const [percent, setPercent] = useState(99);\r\n\r\n  useEffect(() => {\r\n    const inter = setInterval(() => {\r\n      setPercent((percent) => (percent > 0 ? percent - 1 : 0));\r\n    }, totalSecond / 100);\r\n\r\n    return () => {\r\n      setPercent(99);\r\n      clearInterval(inter);\r\n    };\r\n  }, [props.id]);\r\n\r\n  return (\r\n    <>\r\n      {percent > 0 ? (\r\n        <Progress\r\n          showInfo={false}\r\n          strokeLinecap=\"square\"\r\n          percent={percent}\r\n        ></Progress>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ProgressBar;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\Delayed.js",["252"],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nDelayed.propTypes = {\r\n  waitBeforeShow: PropTypes.number.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n};\r\n\r\nfunction Delayed(props) {\r\n  const [hidden, setHidden] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    setTimeout(() => {\r\n      if (mounted) setHidden(false);\r\n    }, props.waitBeforeShow);\r\n\r\n    return () => {\r\n      mounted = false;\r\n      setHidden(true);\r\n    };\r\n  }, [props.id]);\r\n\r\n  return hidden ? <></> : props.children;\r\n}\r\n\r\nexport default Delayed;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\CountdownTimer.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\QuestionBankDrawer.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Instruction\\index.jsx",["253","254","255"],"import React, { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Button,\r\n  Input,\r\n  message,\r\n  Result,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  Typography,\r\n} from \"antd\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { WS_BASE_URL } from \"constants/index\";\r\nimport SockJS from \"sockjs-client\";\r\nimport Stomp from \"stompjs\";\r\nimport moment from \"moment\";\r\nimport * as QuestionType from \"util/QuestionType\";\r\nimport Checkbox from \"antd/lib/checkbox/Checkbox\";\r\nimport styled from \"styled-components\";\r\nimport { OrderedListOutlined } from \"@ant-design/icons\";\r\nimport Title from \"antd/lib/typography/Title\";\r\n\r\nInstruction.propTypes = {};\r\n\r\nconst CenterDiv = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst OptionBox = styled(Button)`\r\n  flex: 1;\r\n  height: 10vh;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  color: white;\r\n  font-size: 15;\r\n  font-weight: bold;\r\n  padding: 10px;\r\n  border: 1px solid black;\r\n  border-radius: 8px;\r\n  margin: 5px;\r\n`;\r\n\r\nvar stompClient = null;\r\nfunction Instruction(props) {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const { state } = location;\r\n\r\n  const [question, setQuestion] = useState(null);\r\n  const [screen, setScreen] = useState({ name: \"SC_ANSWER\", info: {} }); // Screen state: SC_ANSWER, SC_WAIT, SC_RESULT\r\n\r\n  const [optionSelected, setOptionSelected] = useState([]);\r\n\r\n  let startTime = useRef(null);\r\n\r\n  const onMessageReceived = useCallback((payload) => {\r\n    let receivedMessage = JSON.parse(payload.body);\r\n\r\n    if (receivedMessage.type === \"END\") {\r\n      history.replace(\"/go\");\r\n    }\r\n\r\n    if (receivedMessage.type === \"SEND_QUESTION\") {\r\n      setScreen({ name: \"SC_ANSWER\", info: {} });\r\n\r\n      let messages = JSON.parse(receivedMessage.content);\r\n      setQuestion(messages);\r\n\r\n      startTime.current = moment();\r\n    }\r\n\r\n    if (receivedMessage.type === \"INTERACT\") {\r\n      let status = receivedMessage.content.substring(0, 1); // status: 1 => correct, 0 => incorrect\r\n      let point = receivedMessage.content.substring(1);\r\n      setScreen({\r\n        name: \"SC_RESULT\",\r\n        info: { status: status, title: point },\r\n        hidden: true,\r\n      });\r\n    }\r\n\r\n    if (receivedMessage.type === \"SKIP\") {\r\n      setScreen((screen) =>\r\n        screen.name === \"SC_RESULT\"\r\n          ? { ...screen, hidden: false }\r\n          : {\r\n              name: \"SC_HALFTIME\",\r\n              info: { status: \"0\", title: \"HALF TIME\" },\r\n              hidden: false,\r\n            }\r\n      );\r\n    }\r\n\r\n    if (receivedMessage.type === \"SCORE_BOARD\") {\r\n      let listPlayer = JSON.parse(receivedMessage.content);\r\n      let currentPoint = 0;\r\n\r\n      const rank = (nickname) => {\r\n        for (var i = 0; i < listPlayer.length; i += 1) {\r\n          if (listPlayer[i][\"nickname\"] === nickname) {\r\n            currentPoint = listPlayer[i][\"point\"];\r\n            return i + 1;\r\n          }\r\n        }\r\n        return -1;\r\n      };\r\n\r\n      setScreen((screen) => ({\r\n        name: \"SC_SCOREBOARD\",\r\n        info: {\r\n          status: \"1\",\r\n          title: \"You are #\" + rank(state.nickname),\r\n          currentPoint: currentPoint,\r\n        },\r\n        hidden: false,\r\n      }));\r\n    }\r\n  }, []);\r\n\r\n  const onConnected = useCallback(() => {\r\n    stompClient.subscribe(`/quiz/${state.pin}`, onMessageReceived);\r\n    stompClient.subscribe(`/user/quiz/${state.pin}`, onMessageReceived);\r\n  }, [state.pin, onMessageReceived]);\r\n\r\n  const onError = useCallback(() => {\r\n    message.error(\r\n      \"Could not connect to server. Please refresh this page to try again!\"\r\n    );\r\n  }, []);\r\n\r\n  const connect = useCallback(() => {\r\n    let serverUrl = WS_BASE_URL;\r\n    let ws = new SockJS(serverUrl);\r\n    stompClient = Stomp.over(ws);\r\n\r\n    stompClient.connect({}, onConnected, onError);\r\n  }, [onConnected, onError]);\r\n\r\n  function disconnect() {\r\n    if (stompClient !== null) stompClient.disconnect();\r\n  }\r\n\r\n  function handleInteract(playerAnswer) {\r\n    if (playerAnswer !== null) {\r\n      stompClient.send(\r\n        `/app/game.sendResponse/${state.pin}`,\r\n        {\r\n          questionId: question.id,\r\n          responseTime: moment().diff(startTime.current, \"seconds\", true),\r\n        },\r\n        JSON.stringify({\r\n          sender: state.nickname,\r\n          type: \"INTERACT\",\r\n          content: playerAnswer,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    connect();\r\n\r\n    return () => {\r\n      disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const onCheckboxChange = (e) => {\r\n    if (e.target.checked === true) {\r\n      setOptionSelected((optionSelected) => [\r\n        ...optionSelected,\r\n        e.target.value,\r\n      ]);\r\n    } else {\r\n      setOptionSelected(\r\n        optionSelected.filter((option) => option !== e.target.value)\r\n      );\r\n    }\r\n    console.log(optionSelected);\r\n  };\r\n\r\n  const submitQuestionChoice = () => {\r\n    let playerSelected = optionSelected.join(); // join array to string\r\n    handleInteract(playerSelected);\r\n  };\r\n\r\n  const submitQuestionInput = (values) => {\r\n    let { playerInput } = values;\r\n    console.log(values);\r\n    handleInteract(playerInput);\r\n  };\r\n\r\n  const options = question\r\n    ? question.questionType === QuestionType.QUESTION_CHOICE_ANSWER\r\n      ? [\r\n          { icon: \"A\", color: \"red\" },\r\n          { icon: \"B\", color: \"blue\" },\r\n          { icon: \"C\", color: \"orange\" },\r\n          { icon: \"D\", color: \"green\" },\r\n        ]\r\n      : [\r\n          { icon: \"A\", color: \"red\" },\r\n          { icon: \"B\", color: \"blue\" },\r\n        ]\r\n    : [];\r\n\r\n  const buttonOptions = options.map((option, index) => (\r\n    <Col\r\n      span={12}\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <OptionBox\r\n        style={{\r\n          backgroundColor: option.color,\r\n        }}\r\n        key={index}\r\n        value={index}\r\n        onClick={(e) => handleInteract(e.currentTarget.value)}\r\n      >\r\n        {option.icon} {question.answers ? question.answers[index].text : \"\"}\r\n      </OptionBox>\r\n    </Col>\r\n  ));\r\n\r\n  const buttonMultiSelect = options.map((option, index) => (\r\n    <div key={index}>\r\n      <Checkbox value={index} onChange={onCheckboxChange}>\r\n        {option.icon} {question.answers ? question.answers[index].text : \"\"}\r\n      </Checkbox>\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      {screen.name === \"SC_ANSWER\" ? (\r\n        question !== null ? (\r\n          <div style={{ margin: 5 }}>\r\n            <Row style={{ backgroundColor: \"Background\" }}>\r\n              <Col xl={24}>\r\n                <CenterDiv>\r\n                  <Typography.Text strong style={{ fontSize: 25 }}>\r\n                    {question.title ? question.title : \"\"}\r\n                  </Typography.Text>\r\n                </CenterDiv>\r\n              </Col>\r\n            </Row>\r\n\r\n            {question.questionType === QuestionType.QUESTION_CHOICE_ANSWER ||\r\n            question.questionType === QuestionType.QUESTION_TRUE_FALSE ? (\r\n              question.multiSelect === true ? (\r\n                <>\r\n                  <Row>{buttonMultiSelect}</Row>\r\n                  <Row span={24}>\r\n                    <Button onClick={submitQuestionChoice}>Submit</Button>\r\n                  </Row>\r\n                </>\r\n              ) : (\r\n                <Row>{buttonOptions}</Row>\r\n              )\r\n            ) : (\r\n              <Form onFinish={submitQuestionInput}>\r\n                <Row>\r\n                  <Col span={12} offset={6}>\r\n                    <CenterDiv\r\n                      style={{ paddingTop: \"20px\", paddingBottom: \"20px\" }}\r\n                    >\r\n                      <Form.Item name=\"playerInput\">\r\n                        <Input placeholder=\"Input your answer\" />\r\n                      </Form.Item>\r\n                    </CenterDiv>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <Col span={8} offset={8}>\r\n                    <CenterDiv>\r\n                      <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                          Submit\r\n                        </Button>\r\n                      </Form.Item>\r\n                    </CenterDiv>\r\n                  </Col>\r\n                </Row>\r\n              </Form>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <Result\r\n            status=\"info\"\r\n            title=\"You can see your name at the podium\"\r\n            subTitle=\"Waiting for host to start game\"\r\n            extra={[]}\r\n          />\r\n        )\r\n      ) : null}\r\n      {!screen.hidden && screen.name === \"SC_RESULT\" ? (\r\n        <ResultView status={screen.info.status} title={screen.info.title} />\r\n      ) : null}\r\n      {screen.name === \"SC_HALFTIME\" ? (\r\n        <ResultView status={screen.info.status} title={screen.info.title} />\r\n      ) : null}\r\n      {screen.hidden && screen.name === \"SC_RESULT\" ? (\r\n        <Result status=\"success\" title=\"Waiting for the result\" extra={[]} />\r\n      ) : null}\r\n      {screen.name === \"SC_SCOREBOARD\" ? (\r\n        <ResultView\r\n          title={screen.info.title}\r\n          icon={<OrderedListOutlined />}\r\n          extra={<Title level={1}>{screen.info.currentPoint}</Title>}\r\n        />\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction ResultView(props) {\r\n  return (\r\n    <>\r\n      <Result\r\n        {...props}\r\n        status={\r\n          props.status === \"1\"\r\n            ? \"success\"\r\n            : props.status === \"0\"\r\n            ? \"error\"\r\n            : \"info\"\r\n        }\r\n        title={props.title}\r\n      ></Result>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Instruction;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\ScoreBoard\\index.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\question\\PicturesWall.js",["256"],"C:\\ReactJS\\uet-project\\src\\pages\\user\\profile\\Profile.js",["257","258"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  getUserProfile,\r\n  updateUserProfile,\r\n  updatePassword,\r\n} from \"util/APIUtils\";\r\nimport {\r\n  Avatar,\r\n  Tabs,\r\n  Card,\r\n  Input,\r\n  Button,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  notification,\r\n} from \"antd\";\r\nimport { getAvatarColor } from \"util/Colors\";\r\nimport LoadingIndicator from \"common/LoadingIndicator\";\r\nimport \"./Profile.css\";\r\nimport NotFound from \"common/NotFound\";\r\nimport ServerError from \"common/ServerError\";\r\nimport { EyeInvisibleOutlined, EyeTwoTone } from \"@ant-design/icons\";\r\n\r\nimport { PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH } from \"constants/index\";\r\n\r\nconst TabPane = Tabs.TabPane;\r\n\r\nconst Profile = (props) => {\r\n  const { currentUser } = props;\r\n\r\n  const [form] = Form.useForm();\r\n  const [formChangePass] = Form.useForm();\r\n\r\n  const [userProfile, setUserProfile] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [status, setStatus] = useState({ notFound: false, serverError: false });\r\n\r\n  function loadUserProfile(username) {\r\n    setLoading(true);\r\n\r\n    getUserProfile(username)\r\n      .then((response) => {\r\n        // console.log(response);\r\n        setUserProfile(response);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        if (error.status === 404) {\r\n          setStatus({ ...status, notFound: true });\r\n          setLoading(false);\r\n        } else {\r\n          setStatus({ ...status, serverError: true });\r\n          setLoading(false);\r\n        }\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadUserProfile(currentUser.username);\r\n  }, [currentUser]);\r\n\r\n  useEffect(() => {\r\n    userProfile && form.setFieldsValue(userProfile);\r\n\r\n    return () => {\r\n      form.resetFields();\r\n    };\r\n  }, [userProfile]);\r\n\r\n  if (loading) {\r\n    return <LoadingIndicator />;\r\n  }\r\n\r\n  if (status.notFound) {\r\n    return <NotFound />;\r\n  }\r\n\r\n  if (status.serverError) {\r\n    return <ServerError />;\r\n  }\r\n\r\n  const tabBarStyle = {\r\n    textAlign: \"center\",\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    // console.log(values);\r\n    updateUserProfile(values)\r\n      .then((res) => {\r\n        notification.success({ message: \"Saved!\" });\r\n      })\r\n      .catch((error) => notification.error({ message: \"Error!\" }));\r\n  };\r\n\r\n  const onChangePasswd = (values) => {\r\n    // console.log(values);\r\n    const { oldPassword, newPassword } = values;\r\n    updatePassword(newPassword, oldPassword)\r\n      .then((res) => {\r\n        notification.success({ message: \"Successfully!\" });\r\n      })\r\n      .catch((error) => {\r\n        notification.error({ message: \"Error\" });\r\n      });\r\n    formChangePass.resetFields();\r\n  };\r\n\r\n  return (\r\n    <div className=\"profile\">\r\n      {props.isAuthenticated && userProfile ? (\r\n        <div className=\"user-profile\">\r\n          <div className=\"user-details\">\r\n            <div className=\"user-avatar\">\r\n              <Avatar\r\n                className=\"user-avatar-circle\"\r\n                style={{\r\n                  backgroundColor: getAvatarColor(userProfile.name),\r\n                }}\r\n              >\r\n                {userProfile.name[0].toUpperCase()}\r\n              </Avatar>\r\n            </div>\r\n            <div className=\"user-summary\">\r\n              <div className=\"full-name\">{userProfile.name}</div>\r\n              <div className=\"username\">@{userProfile.username}</div>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <Tabs\r\n              defaultActiveKey=\"1\"\r\n              animated={false}\r\n              tabBarStyle={tabBarStyle}\r\n              size=\"large\"\r\n              className=\"profile-tabs\"\r\n              centered\r\n            >\r\n              <TabPane tab={`Information`} key=\"1\">\r\n                <div\r\n                  className=\"site-card-border-less-wrapper\"\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  <Card title=\"User Information\" style={{ width: \"50%\" }}>\r\n                    <Form\r\n                      form={form}\r\n                      name=\"basic\"\r\n                      onFinish={onFinish}\r\n                      className=\"signup-form\"\r\n                      layout=\"vertical\"\r\n                    >\r\n                      <Form.Item name=\"id\" label=\"Id\" hidden>\r\n                        <Input disabled />\r\n                      </Form.Item>\r\n                      <Row gutter={16}>\r\n                        <Col span={12}>\r\n                          <Form.Item name=\"username\" label=\"Username\">\r\n                            <Input size=\"large\" placeholder=\"\" disabled />\r\n                          </Form.Item>\r\n                        </Col>\r\n                        <Col span={12}>\r\n                          <Form.Item name=\"name\" label=\"Full name\">\r\n                            <Input size=\"large\" placeholder=\"\" />\r\n                          </Form.Item>\r\n                        </Col>\r\n                      </Row>\r\n                      <Form.Item name=\"email\" label=\"Email\">\r\n                        <Input size=\"large\" placeholder=\"\" />\r\n                      </Form.Item>\r\n                      <Form.Item>\r\n                        <Button\r\n                          type=\"primary\"\r\n                          htmlType=\"submit\"\r\n                          size=\"large\"\r\n                          className=\"signup-form-button\"\r\n                        >\r\n                          Save\r\n                        </Button>\r\n                      </Form.Item>\r\n                    </Form>\r\n                  </Card>\r\n                </div>\r\n              </TabPane>\r\n              <TabPane tab={`Change Password`} key=\"2\">\r\n                <div\r\n                  className=\"site-card-border-less-wrapper\"\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  <Card title=\"Password\" style={{ width: \"50%\" }}>\r\n                    <Form\r\n                      form={formChangePass}\r\n                      name=\"changePass\"\r\n                      onFinish={onChangePasswd}\r\n                      className=\"change-password-form\"\r\n                      layout=\"vertical\"\r\n                    >\r\n                      <Row gutter={16}>\r\n                        <Col span={12}>\r\n                          <Form.Item\r\n                            name=\"oldPassword\"\r\n                            label=\"Old password\"\r\n                            hasFeedback\r\n                            rules={[\r\n                              {\r\n                                required: true,\r\n                                message: \"Please input your password!\",\r\n                              },\r\n                            ]}\r\n                          >\r\n                            <Input.Password\r\n                              size=\"large\"\r\n                              placeholder=\"\"\r\n                              iconRender={(visible) =>\r\n                                visible ? (\r\n                                  <EyeTwoTone />\r\n                                ) : (\r\n                                  <EyeInvisibleOutlined />\r\n                                )\r\n                              }\r\n                            />\r\n                          </Form.Item>\r\n                        </Col>\r\n                        <Col span={12}></Col>\r\n                      </Row>\r\n                      <Row gutter={16}>\r\n                        <Col span={12}>\r\n                          <Form.Item\r\n                            name=\"newPassword\"\r\n                            label=\"New password\"\r\n                            hasFeedback\r\n                            rules={[\r\n                              {\r\n                                required: true,\r\n                                // message: \"Please input your new password!\",\r\n                                min: PASSWORD_MIN_LENGTH,\r\n                                max: PASSWORD_MAX_LENGTH,\r\n                              },\r\n                            ]}\r\n                          >\r\n                            <Input.Password\r\n                              size=\"large\"\r\n                              placeholder=\"\"\r\n                              iconRender={(visible) =>\r\n                                visible ? (\r\n                                  <EyeTwoTone />\r\n                                ) : (\r\n                                  <EyeInvisibleOutlined />\r\n                                )\r\n                              }\r\n                            />\r\n                          </Form.Item>\r\n                        </Col>\r\n                        <Col span={12}>\r\n                          <Form.Item\r\n                            name=\"confirmNewPassword\"\r\n                            label=\"Confirm new password\"\r\n                            dependencies={[\"newPassword\"]}\r\n                            hasFeedback\r\n                            rules={[\r\n                              {\r\n                                required: true,\r\n                                message: \"Please confirm your new password!\",\r\n                              },\r\n                              ({ getFieldValue }) => ({\r\n                                validator(_, value) {\r\n                                  if (\r\n                                    !value ||\r\n                                    getFieldValue(\"newPassword\") === value\r\n                                  ) {\r\n                                    return Promise.resolve();\r\n                                  }\r\n                                  return Promise.reject(\r\n                                    new Error(\r\n                                      \"The two passwords that you entered do not match!\"\r\n                                    )\r\n                                  );\r\n                                },\r\n                              }),\r\n                            ]}\r\n                          >\r\n                            <Input.Password\r\n                              size=\"large\"\r\n                              placeholder=\"\"\r\n                              iconRender={(visible) =>\r\n                                visible ? (\r\n                                  <EyeTwoTone />\r\n                                ) : (\r\n                                  <EyeInvisibleOutlined />\r\n                                )\r\n                              }\r\n                            />\r\n                          </Form.Item>\r\n                        </Col>\r\n                      </Row>\r\n                      <Form.Item>\r\n                        <Button\r\n                          type=\"primary\"\r\n                          htmlType=\"submit\"\r\n                          size=\"large\"\r\n                          className=\"signup-form-button\"\r\n                        >\r\n                          Save\r\n                        </Button>\r\n                      </Form.Item>\r\n                    </Form>\r\n                  </Card>\r\n                </div>\r\n              </TabPane>\r\n            </Tabs>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","C:\\ReactJS\\uet-project\\src\\util\\QuestionType.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\user\\login\\Login.js",[],"C:\\ReactJS\\uet-project\\src\\util\\Colors.js",[],["259","260"],"C:\\ReactJS\\uet-project\\src\\pages\\user\\signup\\Signup.js",[],"C:\\ReactJS\\uet-project\\src\\util\\Role.js",[],"C:\\ReactJS\\uet-project\\src\\util\\ImageURI.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\AnswerdCount.js",["261","262"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Row, Col, message, Typography } from \"antd\";\r\nimport { WS_BASE_URL } from \"constants/index\";\r\nimport SockJS from \"sockjs-client\";\r\nimport Stomp from \"stompjs\";\r\nimport styled from \"styled-components\";\r\n\r\nAnswerdCount.propTypes = {};\r\n\r\nvar stompClient = null;\r\n\r\nconst { Title } = Typography;\r\n\r\nconst CenterDiv = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nfunction AnswerdCount(props) {\r\n  const { game } = props;\r\n  const [answerdCount, setAnswerdCount] = useState(0);\r\n\r\n  function connect() {\r\n    let serverUrl = WS_BASE_URL;\r\n    let ws = new SockJS(serverUrl);\r\n    stompClient = Stomp.over(ws);\r\n\r\n    stompClient.connect({}, onConnected, onError);\r\n  }\r\n\r\n  function disconnect() {\r\n    if (stompClient !== null) stompClient.disconnect();\r\n  }\r\n\r\n  function onConnected() {\r\n    stompClient.subscribe(`/quiz/${game.pin}/hostListener`, onMessageReceived);\r\n  }\r\n\r\n  function onError(error) {\r\n    message.error(\r\n      \"Could not connect to server. Please refresh this page to try again!\"\r\n    );\r\n  }\r\n\r\n  function onMessageReceived(payload) {\r\n    var receivedMessage = JSON.parse(payload.body);\r\n\r\n    if (receivedMessage.type === \"INTERACT\") {\r\n      setAnswerdCount((answerdCount) => answerdCount + 1);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    connect();\r\n\r\n    return () => {\r\n      disconnect();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col span={24}>\r\n          <CenterDiv>\r\n            <Title level={4}>Answered</Title>\r\n          </CenterDiv>\r\n        </Col>\r\n        <Col span={24}>\r\n          <CenterDiv>\r\n            <Title level={2}>{answerdCount}</Title>\r\n          </CenterDiv>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AnswerdCount;\r\n","C:\\ReactJS\\uet-project\\src\\common\\ServerError.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\report\\index.jsx",["263"],{"ruleId":"264","replacedBy":"265"},{"ruleId":"266","replacedBy":"267"},{"ruleId":"268","severity":1,"message":"269","line":21,"column":28,"nodeType":"270","messageId":"271","endLine":21,"endColumn":36},{"ruleId":"268","severity":1,"message":"272","line":15,"column":8,"nodeType":"270","messageId":"271","endLine":15,"endColumn":20},{"ruleId":"268","severity":1,"message":"273","line":1,"column":10,"nodeType":"270","messageId":"271","endLine":1,"endColumn":25},{"ruleId":"268","severity":1,"message":"274","line":2,"column":8,"nodeType":"270","messageId":"271","endLine":2,"endColumn":17},{"ruleId":"264","replacedBy":"275"},{"ruleId":"266","replacedBy":"276"},{"ruleId":"264","replacedBy":"277"},{"ruleId":"266","replacedBy":"278"},{"ruleId":"268","severity":1,"message":"279","line":18,"column":3,"nodeType":"270","messageId":"271","endLine":18,"endColumn":13},{"ruleId":"268","severity":1,"message":"272","line":25,"column":8,"nodeType":"270","messageId":"271","endLine":25,"endColumn":20},{"ruleId":"264","replacedBy":"280"},{"ruleId":"266","replacedBy":"281"},{"ruleId":"264","replacedBy":"282"},{"ruleId":"266","replacedBy":"283"},{"ruleId":"268","severity":1,"message":"284","line":59,"column":18,"nodeType":"270","messageId":"271","endLine":59,"endColumn":23},{"ruleId":"285","severity":1,"message":"286","line":137,"column":6,"nodeType":"287","endLine":137,"endColumn":8,"suggestions":"288"},{"ruleId":"285","severity":1,"message":"289","line":147,"column":6,"nodeType":"287","endLine":147,"endColumn":12,"suggestions":"290"},{"ruleId":"268","severity":1,"message":"291","line":1,"column":18,"nodeType":"270","messageId":"271","endLine":1,"endColumn":25},{"ruleId":"268","severity":1,"message":"292","line":106,"column":12,"nodeType":"270","messageId":"271","endLine":106,"endColumn":22},{"ruleId":"285","severity":1,"message":"293","line":165,"column":6,"nodeType":"287","endLine":165,"endColumn":8,"suggestions":"294"},{"ruleId":"285","severity":1,"message":"295","line":212,"column":6,"nodeType":"287","endLine":212,"endColumn":16,"suggestions":"296"},{"ruleId":"264","replacedBy":"297"},{"ruleId":"266","replacedBy":"298"},{"ruleId":"268","severity":1,"message":"274","line":2,"column":8,"nodeType":"270","messageId":"271","endLine":2,"endColumn":17},{"ruleId":"268","severity":1,"message":"299","line":3,"column":17,"nodeType":"270","messageId":"271","endLine":3,"endColumn":24},{"ruleId":"264","replacedBy":"300"},{"ruleId":"266","replacedBy":"301"},{"ruleId":"285","severity":1,"message":"302","line":24,"column":6,"nodeType":"287","endLine":24,"endColumn":16,"suggestions":"303"},{"ruleId":"285","severity":1,"message":"304","line":22,"column":6,"nodeType":"287","endLine":22,"endColumn":16,"suggestions":"305"},{"ruleId":"268","severity":1,"message":"274","line":2,"column":8,"nodeType":"270","messageId":"271","endLine":2,"endColumn":17},{"ruleId":"285","severity":1,"message":"306","line":123,"column":6,"nodeType":"287","endLine":123,"endColumn":8,"suggestions":"307"},{"ruleId":"285","severity":1,"message":"308","line":171,"column":6,"nodeType":"287","endLine":171,"endColumn":8,"suggestions":"309"},{"ruleId":"268","severity":1,"message":"310","line":2,"column":34,"nodeType":"270","messageId":"271","endLine":2,"endColumn":39},{"ruleId":"285","severity":1,"message":"311","line":61,"column":6,"nodeType":"287","endLine":61,"endColumn":19,"suggestions":"312"},{"ruleId":"285","severity":1,"message":"313","line":69,"column":6,"nodeType":"287","endLine":69,"endColumn":19,"suggestions":"314"},{"ruleId":"264","replacedBy":"315"},{"ruleId":"266","replacedBy":"316"},{"ruleId":"268","severity":1,"message":"274","line":2,"column":8,"nodeType":"270","messageId":"271","endLine":2,"endColumn":17},{"ruleId":"285","severity":1,"message":"308","line":62,"column":6,"nodeType":"287","endLine":62,"endColumn":8,"suggestions":"317"},{"ruleId":"268","severity":1,"message":"274","line":2,"column":8,"nodeType":"270","messageId":"271","endLine":2,"endColumn":17},"no-native-reassign",["318"],"no-negated-in-lhs",["319"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'PrivateRoute' is defined but never used.","'LoadingOutlined' is defined but never used.","'PropTypes' is defined but never used.",["318"],["319"],["318"],["319"],"'withRouter' is defined but never used.",["318"],["319"],["318"],["319"],"'sound' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'connect' and 'stompClient'. Either include them or remove the dependency array.","ArrayExpression",["320"],"React Hook useEffect has a missing dependency: 'stop'. Either include it or remove the dependency array.",["321"],"'Divider' is defined but never used.","'disconnect' is defined but never used.","React Hook useEffect has missing dependencies: 'connect', 'game.hostedBy', 'game.pin', and 'presentationId'. Either include them or remove the dependency array.",["322"],"React Hook useEffect has missing dependencies: 'exposedData', 'playCountdown', 'playLoopMusic', 'sendQuestion', 'sendSkip', and 'stopMusic'. Either include them or remove the dependency array.",["323"],["318"],["319"],"'Tooltip' is defined but never used.",["318"],["319"],"React Hook useEffect has a missing dependency: 'totalSecond'. Either include it or remove the dependency array.",["324"],"React Hook useEffect has a missing dependency: 'props.waitBeforeShow'. Either include it or remove the dependency array.",["325"],"React Hook useCallback has missing dependencies: 'history' and 'state.nickname'. Either include them or remove the dependency array.",["326"],"React Hook useEffect has a missing dependency: 'connect'. Either include it or remove the dependency array.",["327"],"'Input' is defined but never used.","React Hook useEffect has a missing dependency: 'loadUserProfile'. Either include it or remove the dependency array.",["328"],"React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["329"],["318"],["319"],["330"],"no-global-assign","no-unsafe-negation",{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"345","fix":"351"},"Update the dependencies array to be: [connect, stompClient]",{"range":"352","text":"353"},"Update the dependencies array to be: [play, stop]",{"range":"354","text":"355"},"Update the dependencies array to be: [connect, game.hostedBy, game.pin, presentationId]",{"range":"356","text":"357"},"Update the dependencies array to be: [exposedData, playCountdown, playLoopMusic, question, sendQuestion, sendSkip, stopMusic]",{"range":"358","text":"359"},"Update the dependencies array to be: [props.id, totalSecond]",{"range":"360","text":"361"},"Update the dependencies array to be: [props.id, props.waitBeforeShow]",{"range":"362","text":"363"},"Update the dependencies array to be: [history, state.nickname]",{"range":"364","text":"365"},"Update the dependencies array to be: [connect]",{"range":"366","text":"367"},"Update the dependencies array to be: [currentUser, loadUserProfile]",{"range":"368","text":"369"},"Update the dependencies array to be: [form, userProfile]",{"range":"370","text":"371"},{"range":"372","text":"367"},[3579,3581],"[connect, stompClient]",[3740,3746],"[play, stop]",[4461,4463],"[connect, game.hostedBy, game.pin, presentationId]",[5641,5651],"[exposedData, playCountdown, playLoopMusic, question, sendQuestion, sendSkip, stopMusic]",[630,640],"[props.id, totalSecond]",[503,513],"[props.id, props.waitBeforeShow]",[3336,3338],"[history, state.nickname]",[4589,4591],"[connect]",[1587,1600],"[currentUser, loadUserProfile]",[1743,1756],"[form, userProfile]",[1486,1488]]