[{"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\EditPresentation.js":"1","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SlideDetail.js":"2","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SingleSlide.js":"3","C:\\ReactJS\\uet-project\\src\\util\\APIUtils.js":"4","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\slideSlice.js":"5","C:\\ReactJS\\uet-project\\src\\index.js":"6","C:\\ReactJS\\uet-project\\src\\app\\App.js":"7","C:\\ReactJS\\uet-project\\src\\common\\LoadingIndicator.js":"8","C:\\ReactJS\\uet-project\\src\\common\\NotFound.js":"9","C:\\ReactJS\\uet-project\\src\\common\\PublicRoute.js":"10","C:\\ReactJS\\uet-project\\src\\common\\PrivateRoute.js":"11","C:\\ReactJS\\uet-project\\src\\common\\AppHeader.js":"12","C:\\ReactJS\\uet-project\\src\\pages\\landing\\Home.js":"13","C:\\ReactJS\\uet-project\\src\\user\\profile\\Profile.js":"14","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\Presentations.js":"15","C:\\ReactJS\\uet-project\\src\\store\\store.js":"16","C:\\ReactJS\\uet-project\\src\\constants\\index.js":"17","C:\\ReactJS\\uet-project\\src\\common\\AppSider.js":"18","C:\\ReactJS\\uet-project\\src\\pages\\question\\QuestionList.js":"19","C:\\ReactJS\\uet-project\\src\\util\\Helpers.js":"20","C:\\ReactJS\\uet-project\\src\\pages\\question\\Questions.js":"21","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\PresentationList.js":"22","C:\\ReactJS\\uet-project\\src\\util\\score.js":"23","C:\\ReactJS\\uet-project\\src\\user\\login\\Login.js":"24","C:\\ReactJS\\uet-project\\src\\pages\\question\\EditQuestion.js":"25","C:\\ReactJS\\uet-project\\src\\user\\signup\\Signup.js":"26","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Lobby\\index.jsx":"27","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Main\\index.jsx":"28","C:\\ReactJS\\uet-project\\src\\pages\\Host\\index.jsx":"29","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\InGame\\index.jsx":"30","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\index.jsx":"31","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Instruction\\index.jsx":"32","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Pin\\index.jsx":"33","C:\\ReactJS\\uet-project\\src\\reportWebVitals.js":"34","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Name\\index.jsx":"35","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\components\\InputPIN.jsx":"36","C:\\ReactJS\\uet-project\\src\\pages\\Host\\hostSlice.js":"37","C:\\ReactJS\\uet-project\\src\\pages\\Host\\Countdown.js":"38"},{"size":9963,"mtime":1614759069003,"results":"39","hashOfConfig":"40"},{"size":5904,"mtime":1614740129551,"results":"41","hashOfConfig":"40"},{"size":1186,"mtime":1614737133513,"results":"42","hashOfConfig":"40"},{"size":5687,"mtime":1615274468373,"results":"43","hashOfConfig":"40"},{"size":1673,"mtime":1614756313704,"results":"44","hashOfConfig":"40"},{"size":666,"mtime":1614644985111,"results":"45","hashOfConfig":"40"},{"size":4503,"mtime":1615508843796,"results":"46","hashOfConfig":"40"},{"size":316,"mtime":1614672740653,"results":"47","hashOfConfig":"40"},{"size":427,"mtime":1614135413647,"results":"48","hashOfConfig":"40"},{"size":416,"mtime":1613854056924,"results":"49","hashOfConfig":"40"},{"size":491,"mtime":1613872121567,"results":"50","hashOfConfig":"40"},{"size":2548,"mtime":1615509419423,"results":"51","hashOfConfig":"40"},{"size":214,"mtime":1613855284951,"results":"52","hashOfConfig":"40"},{"size":3548,"mtime":1613728914519,"results":"53","hashOfConfig":"40"},{"size":3638,"mtime":1614568484413,"results":"54","hashOfConfig":"40"},{"size":287,"mtime":1614937919116,"results":"55","hashOfConfig":"40"},{"size":632,"mtime":1614857133775,"results":"56","hashOfConfig":"40"},{"size":1646,"mtime":1614134132919,"results":"57","hashOfConfig":"40"},{"size":3321,"mtime":1614046791482,"results":"58","hashOfConfig":"40"},{"size":972,"mtime":1613638260326,"results":"59","hashOfConfig":"40"},{"size":4779,"mtime":1614047511759,"results":"60","hashOfConfig":"40"},{"size":3604,"mtime":1614851422573,"results":"61","hashOfConfig":"40"},{"size":91,"mtime":1613900959638,"results":"62","hashOfConfig":"40"},{"size":2748,"mtime":1613854540474,"results":"63","hashOfConfig":"40"},{"size":6710,"mtime":1614130108256,"results":"64","hashOfConfig":"40"},{"size":10190,"mtime":1613468163614,"results":"65","hashOfConfig":"40"},{"size":5359,"mtime":1615828803418,"results":"66","hashOfConfig":"40"},{"size":1808,"mtime":1615845215478,"results":"67","hashOfConfig":"40"},{"size":636,"mtime":1615828422397,"results":"68","hashOfConfig":"40"},{"size":5235,"mtime":1615849343419,"results":"69","hashOfConfig":"40"},{"size":653,"mtime":1614904500217,"results":"70","hashOfConfig":"40"},{"size":5216,"mtime":1615851931398,"results":"71","hashOfConfig":"40"},{"size":1896,"mtime":1615844485104,"results":"72","hashOfConfig":"40"},{"size":362,"mtime":1606210735677,"results":"73","hashOfConfig":"40"},{"size":2389,"mtime":1615845355583,"results":"74","hashOfConfig":"40"},{"size":572,"mtime":1614909221751,"results":"75","hashOfConfig":"40"},{"size":435,"mtime":1615281184259,"results":"76","hashOfConfig":"40"},{"size":432,"mtime":1615456920886,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},"nz9s2i",{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"85"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"85"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"93"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"85"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"93"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\EditPresentation.js",["168"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Layout,\r\n  Modal,\r\n  Select,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Form,\r\n  Menu,\r\n  message,\r\n  Typography,\r\n} from \"antd\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { getPresentation, addToPresentation } from \"./../../util/APIUtils\";\r\n\r\nimport SingleSlide from \"./SingleSlide\";\r\nimport { updateSlide, deleteOneSlide, currentSlide } from \"./slideSlice\";\r\nimport SlideDetail from \"./SlideDetail\";\r\nimport \"./EditPresentation.css\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst { Content, Sider } = Layout;\r\nconst { Option } = Select;\r\n\r\nconst StyledButton = styled(Button)`\r\n  background: ${(props) => (props.primary ? \"dodgerblue\" : \"white\")};\r\n  color: ${(props) => (props.primary ? \"white\" : \"dodgerblue\")};\r\n  font-size: 1em;\r\n  margin: 1em;\r\n  padding: 0.25em 1em dodgerblue;\r\n  border-radius: 3px;\r\n`;\r\n\r\nconst StyledSider = styled(Sider)``;\r\n\r\nconst EditPresentation = () => {\r\n  const { presentationId } = useParams();\r\n  const [questions, setQuestions] = useState({ list: [], activeId: \"\" });\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  const [visible, setVisible] = useState(false); // visible for Modal Add question\r\n  const [confirmLoading, setConfirmLoading] = useState(false); // for loading when call api to create new question\r\n\r\n  const [form] = Form.useForm();\r\n  const [description, setDescription] = useState(\"\"); // description for type of question\r\n\r\n  const dispatch = useDispatch();\r\n  const slide = useSelector((state) => state.slides);\r\n\r\n  //When click a Slide in Sidebar\r\n  const onMenuItemClick = (clickItem) => {\r\n    const { key } = clickItem;\r\n\r\n    saveChange();\r\n\r\n    setQuestions({ ...questions, activeId: key });\r\n  };\r\n\r\n  function deleteSlide(questionId) {\r\n    // console.log(\"deleted: \" + questionId);\r\n    let { length } = questions.list;\r\n    if (length <= 1) {\r\n      message.warn(\"Presentation must have at least 1 question\");\r\n      return;\r\n    }\r\n\r\n    dispatch(deleteOneSlide({ slideId: questionId, id: presentationId })).then(\r\n      () => {\r\n        console.log(\"bla\");\r\n      }\r\n    );\r\n\r\n    let indexDelete; // indexDelete = index + 1 to avoid indexDelete equals 0 cause error\r\n    questions.list.find((e, index) =>\r\n      e.id === questions.activeId\r\n        ? (indexDelete = index + 1)\r\n        : (indexDelete = undefined)\r\n    );\r\n\r\n    --indexDelete; // to make \"indexDelete\" is index of its in array\r\n\r\n    let nextActiveId;\r\n    if (indexDelete === length - 1) {\r\n      //deleting last element\r\n      nextActiveId = questions.list[indexDelete - 1].id;\r\n    } else {\r\n      nextActiveId = questions.list[indexDelete + 1].id;\r\n    }\r\n\r\n    //duplicate list and delete a element from array\r\n    let newList = questions.list;\r\n    newList.splice(indexDelete, 1);\r\n\r\n    console.log(nextActiveId);\r\n    console.log(newList);\r\n\r\n    // dispatch(currentSlide(questions.list[indexPrev - 1]));\r\n    setQuestions({\r\n      list: newList,\r\n      activeId: nextActiveId,\r\n    });\r\n  }\r\n\r\n  function saveChange() {\r\n    let indexPrev;\r\n    questions.list.find((e, index) =>\r\n      e.id === questions.activeId\r\n        ? (indexPrev = ++index)\r\n        : (indexPrev = undefined)\r\n    );\r\n\r\n    questions.list[--indexPrev] = slide.current;\r\n\r\n    dispatch(updateSlide({ slide: slide.current, id: presentationId }));\r\n  }\r\n\r\n  //Show modal Add question\r\n  const showModal = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  // handle when Add new question\r\n  const handleSubmit = (values) => {\r\n    const typeOfQuestion = Object.assign({}, values);\r\n\r\n    setConfirmLoading(true);\r\n    addToPresentation(typeOfQuestion, presentationId)\r\n      .then((response) => {\r\n        setQuestions((questions) => ({\r\n          ...questions,\r\n          list: [...questions.list, response],\r\n          activeId: response.id,\r\n        }));\r\n        message.success(\"New question\");\r\n      })\r\n      .catch((error) => message.error(\"Error\"));\r\n    setVisible(false);\r\n    setConfirmLoading(false);\r\n  };\r\n\r\n  // handle when click button Cancel\r\n  const handleCancel = () => {\r\n    setVisible(false);\r\n    form.resetFields();\r\n  };\r\n\r\n  // handle when change type of question\r\n  function handleChange(value) {\r\n    switch (value) {\r\n      case \"QUESTION_CHOICE_ANSWER\":\r\n        setDescription(\r\n          \"Gives players several answer alternatives to choose from \"\r\n        );\r\n        break;\r\n      case \"QUESTION_TRUE_FALSE\":\r\n        setDescription(\"Let players decided if the statement is true or false\");\r\n        break;\r\n      case \"QUESTION_INPUT_ANSWER\":\r\n        setDescription(\"Let players input a answer\");\r\n        break;\r\n\r\n      default:\r\n        setDescription(\"\");\r\n        break;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    getPresentation(presentationId)\r\n      .then((response) => {\r\n        if (response.questionList) {\r\n          // case: Presentation has one or more questions => loading list of questions\r\n\r\n          if (mounted && response.questionList.length > 0) {\r\n            setTitle(response.title);\r\n            setQuestions((questions) => ({\r\n              ...questions,\r\n              list: response.questionList,\r\n              activeId: response.questionList[0].id,\r\n            }));\r\n\r\n            message.success(\"Completely loading!\");\r\n          }\r\n        } else {\r\n          // case: Presentation has no question => create a blank question choice answer\r\n          if (mounted) {\r\n            setTitle(response.title);\r\n\r\n            const firstQuestion = {\r\n              questionType: \"QUESTION_CHOICE_ANSWER\",\r\n              title: \"\",\r\n            };\r\n\r\n            addToPresentation(firstQuestion, presentationId)\r\n              .then((response) => {\r\n                // console.log(response);\r\n\r\n                setQuestions((questions) => ({\r\n                  ...questions,\r\n                  list: [...questions.list, response],\r\n                  activeId: response.id,\r\n                }));\r\n              })\r\n              .catch((error) => console.log(error));\r\n          }\r\n        }\r\n      })\r\n      .catch((error) => message.error(\"Error loading presentation\"));\r\n\r\n    return () => (mounted = false);\r\n  }, [presentationId]);\r\n\r\n  return (\r\n    <Layout>\r\n      <StyledSider width={\"15vw\"}>\r\n        <Row\r\n          style={{ marginTop: 5, marginBottom: 5 }}\r\n          type=\"flex\"\r\n          justify=\"space-around\"\r\n          align=\"middle\"\r\n        >\r\n          <Col offset={2} span={4}>\r\n            <Button onClick={() => window.history.back()}>Back</Button>\r\n          </Col>\r\n          <Col>\r\n            <StyledButton primary=\"true\" onClick={saveChange}>\r\n              Save\r\n            </StyledButton>\r\n          </Col>\r\n        </Row>\r\n        <Row type=\"flex\" justify=\"start\" align=\"middle\">\r\n          <Col offset={2} span={19}>\r\n            <Typography.Title\r\n              level={3}\r\n              editable={{ onChange: setTitle }}\r\n              ellipsis\r\n            >\r\n              {title}\r\n            </Typography.Title>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Menu defaultActiveFirst onSelect={onMenuItemClick}>\r\n          {questions.list.map((slide, index) => (\r\n            <Menu.Item\r\n              style={{\r\n                padding: 5,\r\n                height: \"17vh\",\r\n                flex: 1,\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\",\r\n                alignItems: \"stretch\",\r\n              }}\r\n              key={slide.id}\r\n            >\r\n              <div\r\n                style={{\r\n                  width: \"20%\",\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  justifyContent: \"space-between\",\r\n                  padding: \"0 5px\",\r\n                }}\r\n              >\r\n                <span>{index + 1}</span>\r\n              </div>\r\n              <div\r\n                style={{\r\n                  width: \"77%\",\r\n                }}\r\n              >\r\n                <SingleSlide\r\n                  text={slide.title}\r\n                  isActive={slide.id === questions.activeId}\r\n                />\r\n              </div>\r\n            </Menu.Item>\r\n          ))}\r\n        </Menu>\r\n\r\n        <Row type=\"flex\" justify=\"space-around\" align=\"middle\">\r\n          <Col>\r\n            <StyledButton primary=\"true\" onClick={showModal}>\r\n              Add question\r\n            </StyledButton>\r\n          </Col>\r\n        </Row>\r\n      </StyledSider>\r\n\r\n      <Modal\r\n        title=\"New question\"\r\n        visible={visible}\r\n        onOk={form.submit}\r\n        confirmLoading={confirmLoading}\r\n        onCancel={handleCancel}\r\n        okText=\"Create\"\r\n      >\r\n        <Form form={form} onFinish={handleSubmit}>\r\n          <Form.Item\r\n            name=\"questionType\"\r\n            label=\"Question Type\"\r\n            rules={[{ required: true }]}\r\n          >\r\n            <Select\r\n              defaultActiveFirstOption\r\n              style={{ width: 120 }}\r\n              onChange={handleChange}\r\n            >\r\n              <Option value=\"QUESTION_CHOICE_ANSWER\">Quiz</Option>\r\n              <Option value=\"QUESTION_TRUE_FALSE\">True or False</Option>\r\n              <Option value=\"QUESTION_INPUT_ANSWER\" disabled>\r\n                Input answer\r\n              </Option>\r\n            </Select>\r\n          </Form.Item>\r\n        </Form>\r\n        <p>{description}</p>\r\n      </Modal>\r\n      <Content\r\n        className=\"site-layout-background\"\r\n        style={{\r\n          padding: 24,\r\n          margin: 0,\r\n          background: \"whitesmoke\",\r\n        }}\r\n      >\r\n        {questions.list.length > 0 ? (\r\n          <SlideDetail\r\n            content={questions.list.find((e) => e.id === questions.activeId)}\r\n            deleteSlide={deleteSlide}\r\n          />\r\n        ) : null}\r\n      </Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default EditPresentation;\r\n",["169","170"],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SlideDetail.js",["171"],"import {\r\n  Button,\r\n  Checkbox,\r\n  Col,\r\n  Form,\r\n  Input,\r\n  Row,\r\n  Select,\r\n  Slider,\r\n  Typography,\r\n} from \"antd\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport score from \"../../util/score\";\r\nimport { currentSlide } from \"./slideSlice\";\r\n\r\nSlideDetail.propTypes = {};\r\n\r\nconst { Option } = Select;\r\nconst { Title } = Typography;\r\n\r\nconst StyledSlide = styled.div`\r\n  background: white;\r\n  color: dodgerblue;\r\n  font-size: 1em;\r\n  border: 1px solid gainsboro;\r\n  padding: 50px;\r\n  margin: 5px;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst StyledSetting = styled.div`\r\n  background: white;\r\n  width: 20vw;\r\n  color: dodgerblue;\r\n  font-size: 1em;\r\n  border: 1px solid gainsboro;\r\n  padding: 50px;\r\n  margin: 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst TitleInput = styled(Input)`\r\n  font-size: 3em;\r\n  font-weight: bold;\r\n  border: 2px solid dodgerblue;\r\n  border-radius: 3px;\r\n\r\n  margin: ${(props) => props.size};\r\n  padding: ${(props) => props.size};\r\n`;\r\n\r\nconst OptionInput = styled(Input)`\r\n  color: dodgerblue;\r\n  font-size: 2em;\r\n  border: 2px solid dodgerblue;\r\n  border-radius: 3px;\r\n\r\n  margin: 5px;\r\n  padding: ${(props) => props.size};\r\n`;\r\n\r\nfunction SlideDetail(props) {\r\n  const { content } = props;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const slide = useSelector((state) => state.slides);\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  let formValues;\r\n\r\n  function onChange(changedValues, allValues) {\r\n    formValues = { ...slide.current, ...allValues };\r\n    // console.log(formValues);\r\n    dispatch(currentSlide(formValues));\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(currentSlide(content));\r\n\r\n    form.setFieldsValue({\r\n      title: content.title,\r\n      answers: content.answers\r\n        ? content.answers\r\n        : [{ text: \"\" }, { text: \"\" }, { text: \"\" }, { text: \"\" }],\r\n      score: content.score,\r\n      seconds: content.seconds,\r\n      questionType: content.questionType,\r\n    });\r\n  }, [content, form, dispatch]);\r\n\r\n  return (\r\n    <Form form={form} onValuesChange={onChange}>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          flexWrap: \"wrap\",\r\n          alignContent: \"space-between\",\r\n        }}\r\n      >\r\n        <StyledSlide>\r\n          <Form.Item name=\"title\">\r\n            <TitleInput placeholder=\"Title question\" autoComplete=\"off\" />\r\n          </Form.Item>\r\n\r\n          <Form.List name=\"answers\" initialValue={[\"\", \"\", \"\", \"\"]}>\r\n            {(answers, { add, remove }) => {\r\n              return (\r\n                <div>\r\n                  {answers.map((answer, index) => (\r\n                    <div key={answer.key}>\r\n                      <Form.Item label={`Option ${index + 1}`}>\r\n                        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                          <Col span={12}>\r\n                            <Form.Item\r\n                              name={[index, \"text\"]}\r\n                              rules={[{ require: true }]}\r\n                            >\r\n                              <Input\r\n                                placeholder={`Option ${index + 1}`}\r\n                                autoComplete=\"off\"\r\n                              />\r\n                            </Form.Item>\r\n                          </Col>\r\n                          <Col span={6}>\r\n                            <Form.Item\r\n                              name={[index, \"correct\"]}\r\n                              valuePropName=\"checked\"\r\n                              rules={[{ require: true, type: \"boolean\" }]}\r\n                            >\r\n                              <Checkbox checked={false} />\r\n                            </Form.Item>\r\n                          </Col>\r\n                        </Row>\r\n                      </Form.Item>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              );\r\n            }}\r\n          </Form.List>\r\n        </StyledSlide>\r\n\r\n        <StyledSetting>\r\n          <Title level={4}>Question Type</Title>\r\n          <Form.Item name=\"questionType\" rules={[{ required: true }]}>\r\n            <Select\r\n              defaultActiveFirstOption\r\n              // onChange={handleChange}\r\n            >\r\n              <Option value=\"QUESTION_CHOICE_ANSWER\">Quiz</Option>\r\n              <Option value=\"QUESTION_TRUE_FALSE\">True or False</Option>\r\n              <Option value=\"QUESTION_INPUT_ANSWER\" disabled>\r\n                Input answer\r\n              </Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Title level={4}>Score</Title>\r\n          <Form.Item\r\n            name=\"score\"\r\n            initialValue={1000}\r\n            rules={[{ type: \"number\", required: false }]}\r\n          >\r\n            <Slider marks={score} min={0} max={2000} step={null} />\r\n          </Form.Item>\r\n          <Title level={4}>Time to answer</Title>\r\n          <Form.Item\r\n            name=\"seconds\"\r\n            rules={[{ type: \"number\", required: false }]}\r\n          >\r\n            <Select placeholder=\"Choose a time\" style={{ width: 150 }}>\r\n              <Option value={5}>5 seconds</Option>\r\n              <Option value={10}>10 seconds</Option>\r\n              <Option value={20}>20 seconds</Option>\r\n              <Option value={30}>30 seconds</Option>\r\n              <Option value={60}>1 minute</Option>\r\n              <Option value={90}>1 minute 30 seconds</Option>\r\n              <Option value={120}>2 minutes</Option>\r\n              <Option value={240}>4 minutes</Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Button danger onClick={() => props.deleteSlide(slide.current.id)}>\r\n            Delete\r\n          </Button>\r\n        </StyledSetting>\r\n      </div>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default SlideDetail;\r\n",["172","173"],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SingleSlide.js",[],["174","175"],"C:\\ReactJS\\uet-project\\src\\util\\APIUtils.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\slideSlice.js",[],["176","177"],"C:\\ReactJS\\uet-project\\src\\index.js",[],"C:\\ReactJS\\uet-project\\src\\app\\App.js",["178"],"import { Layout, notification } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Redirect,\n  Route,\n  Switch,\n  useHistory,\n  withRouter,\n} from \"react-router-dom\";\nimport AppHeader from \"../common/AppHeader\";\nimport { ACCESS_TOKEN } from \"../constants\";\nimport Profile from \"../user/profile/Profile\";\nimport Signup from \"../user/signup/Signup\";\nimport { getCurrentUser } from \"../util/APIUtils\";\nimport LoadingIndicator from \"./../common/LoadingIndicator\";\nimport NotFound from \"./../common/NotFound\";\nimport PrivateRoute from \"./../common/PrivateRoute\";\nimport Presentations from \"../pages/presentation/Presentations\";\nimport Login from \"./../user/login/Login\";\nimport \"./App.css\";\nimport PublicRoute from \"../common/PublicRoute\";\nimport Home from \"../pages/landing/Home\";\nimport Questions from \"../pages/question/Questions\";\nimport Host from \"./../pages/Host\";\nimport Audience from \"pages/Audience/index\";\n\nconst { Content } = Layout;\n\nconst App = (props) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const history = useHistory();\n\n  notification.config({\n    placement: \"topRight\",\n    top: 70,\n    duration: 3,\n  });\n\n  function loadCurrentUser() {\n    setIsLoading(true);\n    getCurrentUser()\n      .then((response) => {\n        setCurrentUser(response);\n        // console.log(response);\n        setIsAuthenticated(true);\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        setIsLoading(false);\n      });\n  }\n\n  function handleLogout(\n    redirectTo = \"/\",\n    notificationType = \"success\",\n    description = \"You're successfully logged out.\"\n  ) {\n    history.push(\"/\");\n\n    localStorage.removeItem(ACCESS_TOKEN);\n\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n\n    notification[notificationType]({\n      message: \"Viedu App\",\n      description: description,\n    });\n  }\n\n  function handleLogin() {\n    notification.success({\n      message: \"Viedu App\",\n      description: \"You're successfully logged in.\",\n    });\n    loadCurrentUser();\n\n    history.push(\"/\");\n  }\n\n  useEffect(() => {\n    loadCurrentUser();\n  }, []);\n\n  if (isLoading) {\n    return <LoadingIndicator />;\n  }\n\n  return (\n    <Layout className=\"app-container\">\n      <AppHeader\n        isAuthenticated={isAuthenticated}\n        currentUser={currentUser}\n        onLogout={handleLogout}\n      />\n      <Content className=\"app-content\">\n        <div className=\"container\">\n          <Switch>\n            {isAuthenticated && <Redirect exact from=\"/\" to=\"/presentations\" />}\n            <PublicRoute\n              restricted={false}\n              path=\"/\"\n              component={Home}\n              exact\n              authenticated={isAuthenticated}\n            />\n            <PublicRoute\n              exact\n              restricted={true}\n              path=\"/login\"\n              authenticated={isAuthenticated}\n              component={(props) =>\n                !isAuthenticated ? (\n                  <Login onLogin={handleLogin} {...props} />\n                ) : null\n              }\n            />\n            <Route exac path=\"/signup\" component={Signup}></Route>\n            <Route\n              path=\"/users/:username\"\n              render={(props) => (\n                <Profile\n                  isAuthenticated={isAuthenticated}\n                  currentUser={currentUser}\n                  {...props}\n                />\n              )}\n            />\n            {/* <PrivateRoute\n              authenticated={isAuthenticated}\n              path=\"/presentations\"\n              component={Presentations}\n              handleLogout={handleLogout}\n            />\n            <PrivateRoute\n              authenticated={isAuthenticated}\n              path=\"/questions\"\n              component={Questions}\n              handleLogout={handleLogout}\n            /> */}\n            <Route\n              path=\"/presentations\"\n              component={Presentations}\n              handleLogout={handleLogout}\n            />\n            <Route\n              path=\"/questions\"\n              component={Questions}\n              handleLogout={handleLogout}\n            />\n            <Route path=\"/play\" component={Host} />\n            <Route path=\"/audience\" component={Audience} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default withRouter(App);\n","C:\\ReactJS\\uet-project\\src\\common\\LoadingIndicator.js",[],"C:\\ReactJS\\uet-project\\src\\common\\NotFound.js",[],"C:\\ReactJS\\uet-project\\src\\common\\PublicRoute.js",[],"C:\\ReactJS\\uet-project\\src\\common\\PrivateRoute.js",[],"C:\\ReactJS\\uet-project\\src\\common\\AppHeader.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\landing\\Home.js",["179"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nHome.propTypes = {};\r\n\r\nfunction Home(props) {\r\n  return (\r\n    <div>\r\n      <h2>VIEDU APP HOME</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\ReactJS\\uet-project\\src\\user\\profile\\Profile.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\Presentations.js",[],"C:\\ReactJS\\uet-project\\src\\store\\store.js",[],"C:\\ReactJS\\uet-project\\src\\constants\\index.js",[],"C:\\ReactJS\\uet-project\\src\\common\\AppSider.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\question\\QuestionList.js",[],"C:\\ReactJS\\uet-project\\src\\util\\Helpers.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\question\\Questions.js",["180","181"],"import {\r\n  Button,\r\n  Col,\r\n  Form,\r\n  Modal,\r\n  notification,\r\n  Row,\r\n  Select,\r\n  Space,\r\n  PageHeader,\r\n} from \"antd\";\r\nimport React from \"react\";\r\nimport {\r\n  Route,\r\n  Switch,\r\n  useHistory,\r\n  useRouteMatch,\r\n  withRouter,\r\n} from \"react-router-dom\";\r\nimport AppSider from \"../../common/AppSider\";\r\nimport NotFound from \"../../common/NotFound\";\r\nimport { createQuestion } from \"../../util/APIUtils\";\r\nimport EditQuestion from \"./EditQuestion\";\r\nimport QuestionList from \"./QuestionList\";\r\nimport PrivateRoute from \"./../../common/PrivateRoute\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst routes = [\r\n  {\r\n    path: \"/\",\r\n    breadcrumbName: \"Home\",\r\n  },\r\n  {\r\n    path: \"/questions\",\r\n    breadcrumbName: \"Question List\",\r\n  },\r\n];\r\n\r\nconst Questions = (props) => {\r\n  let match = useRouteMatch();\r\n  // console.log({ match });\r\n\r\n  const [visible, setVisible] = React.useState(false);\r\n  const [confirmLoading, setConfirmLoading] = React.useState(false);\r\n\r\n  const [form] = Form.useForm();\r\n  const [description, setDescription] = React.useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const showModal = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const handleSubmit = (values) => {\r\n    const titleQuestion = Object.assign({}, values);\r\n\r\n    setConfirmLoading(true);\r\n    createQuestion(titleQuestion)\r\n      .then((response) => {\r\n        notification.success({\r\n          message: \"Viedu App\",\r\n          description: \"Created new question!\",\r\n        });\r\n        history.push(`${match.url}/${response.id}`);\r\n      })\r\n      .catch((error) => {\r\n        notification.error({\r\n          message: \"Viedu App\",\r\n          description: error.message || \"Error\",\r\n        });\r\n      });\r\n    setVisible(false);\r\n    setConfirmLoading(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setVisible(false);\r\n    form.resetFields();\r\n  };\r\n\r\n  function handleChange(value) {\r\n    // console.log(`selected ${value}`);\r\n    switch (value) {\r\n      case \"QUESTION_CHOICE_ANSWER\":\r\n        setDescription(\r\n          \"Gives players several answer alternatives to choose from \"\r\n        );\r\n        break;\r\n      case \"QUESTION_TRUE_FALSE\":\r\n        setDescription(\"Let players decided if the statement is true or false\");\r\n        break;\r\n      case \"QUESTION_INPUT_ANSWER\":\r\n        setDescription(\"Let players input a answer\");\r\n        break;\r\n\r\n      default:\r\n        setDescription(\"\");\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Switch>\r\n      <Route\r\n        exact\r\n        path={match.path}\r\n        render={() => (\r\n          <AppSider>\r\n            <PageHeader\r\n              title=\"My questions\"\r\n              breadcrumb={{ routes }}\r\n              subTitle=\"\"\r\n            />\r\n            <Row>\r\n              <Col span={6}>\r\n                <Space>\r\n                  <Button type=\"primary\" onClick={showModal}>\r\n                    New Question\r\n                  </Button>\r\n                  <Modal\r\n                    title=\"New question\"\r\n                    visible={visible}\r\n                    onOk={form.submit}\r\n                    confirmLoading={confirmLoading}\r\n                    onCancel={handleCancel}\r\n                    okText=\"Create\"\r\n                  >\r\n                    <Form form={form} onFinish={handleSubmit}>\r\n                      <Form.Item\r\n                        name=\"questionType\"\r\n                        label=\"Question Type\"\r\n                        rules={[{ required: true }]}\r\n                      >\r\n                        <Select\r\n                          defaultActiveFirstOption\r\n                          style={{ width: 120 }}\r\n                          onChange={handleChange}\r\n                        >\r\n                          <Option value=\"QUESTION_CHOICE_ANSWER\">Quiz</Option>\r\n                          <Option value=\"QUESTION_TRUE_FALSE\">\r\n                            True or False\r\n                          </Option>\r\n                          <Option value=\"QUESTION_INPUT_ANSWER\" disabled>\r\n                            Input answer\r\n                          </Option>\r\n                        </Select>\r\n                      </Form.Item>\r\n                    </Form>\r\n                    <p>{description}</p>\r\n                  </Modal>\r\n                </Space>\r\n              </Col>\r\n              <Col span={18}></Col>\r\n            </Row>\r\n            <br />\r\n            <QuestionList />\r\n          </AppSider>\r\n        )}\r\n      />\r\n      <Route\r\n        authenticated\r\n        path={`${match.path}/:questionId/edit`}\r\n        component={EditQuestion}\r\n      />\r\n      <Route\r\n        authenticated\r\n        path={`${match.path}/:questionId`}\r\n        component={EditQuestion}\r\n      />\r\n      <Route component={NotFound} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Questions;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\PresentationList.js",[],"C:\\ReactJS\\uet-project\\src\\util\\score.js",[],"C:\\ReactJS\\uet-project\\src\\user\\login\\Login.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\question\\EditQuestion.js",[],"C:\\ReactJS\\uet-project\\src\\user\\signup\\Signup.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Lobby\\index.jsx",["182"],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Main\\index.jsx",["183"],"import { Button, Form, Input } from \"antd\";\r\nimport React, { useEffect } from \"react\";\r\nimport { createGame } from \"util/APIUtils\";\r\nimport { useHistory, useLocation, useRouteMatch } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { currentGame } from \"./../../hostSlice\";\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction Main(props) {\r\n  const match = useRouteMatch();\r\n  const [form] = Form.useForm();\r\n  const history = useHistory();\r\n\r\n  let query = useQuery();\r\n  const quizId = query.get(\"quizId\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  async function handleSubmit(values) {\r\n    const gameData = Object.assign({}, values);\r\n    // console.log(log);\r\n\r\n    await createGame(gameData)\r\n      .then((response) => {\r\n        dispatch(currentGame(response));\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    history.push(`${match.url}/lobby?quizId=${quizId}`, {\r\n      rootPath: match.url,\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({\r\n      presentationId: quizId,\r\n      gameType: \"LIVE\",\r\n    });\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <Form style={{ width: 350 }} form={form} onFinish={handleSubmit}>\r\n          <Form.Item name=\"gameType\">\r\n            <Input hidden />\r\n          </Form.Item>\r\n          <Form.Item name=\"presentationId\">\r\n            <Input hidden />\r\n          </Form.Item>\r\n          <Form.Item name=\"title\">\r\n            <Input placeholder=\"Title\" />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Button htmlType=\"submit\">Create Room</Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\index.jsx",[],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\InGame\\index.jsx",["184","185","186"],"import { Button, message, Statistic } from \"antd\";\r\nimport { WS_BASE_URL } from \"constants/index\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SockJS from \"sockjs-client\";\r\nimport Stomp from \"stompjs\";\r\nimport { getPresentation } from \"util/APIUtils\";\r\n\r\nInGame.propTypes = {};\r\n\r\nvar stompClient = null;\r\n\r\nconst { Countdown } = Statistic;\r\n\r\nconst answerOptions = [\"A\", \"B\", \"C\", \"D\"];\r\n\r\nfunction InGame(props) {\r\n  const history = useHistory();\r\n  const games = useSelector((state) => state.games);\r\n  const game = games.current;\r\n  const [presentation, setPresentation] = useState({});\r\n  const [question, setQuestion] = useState({ data: {}, index: -1 });\r\n  // const [isLastQuestion, setIsLastQuestion] = useState(false);\r\n\r\n  const { presentationId } = game;\r\n\r\n  // const rendered = useRef(1);\r\n  // useEffect(() => {\r\n  //   rendered.current = rendered.current + 1;\r\n  // });\r\n\r\n  function connect() {\r\n    let serverUrl = WS_BASE_URL;\r\n    let ws = new SockJS(serverUrl);\r\n    stompClient = Stomp.over(ws);\r\n\r\n    stompClient.connect({}, onConnected, onError);\r\n  }\r\n\r\n  function disconnect() {\r\n    if (stompClient !== null) stompClient.disconnect();\r\n  }\r\n\r\n  function onConnected() {\r\n    // Subscribe to the Game\r\n    stompClient.subscribe(`/quiz/${game.pin}`, onMessageReceived);\r\n  }\r\n\r\n  function onError(error) {\r\n    message.error(\r\n      \"Could not connect to server. Please refresh this page to try again!\"\r\n    );\r\n  }\r\n\r\n  function onMessageReceived(payload) {\r\n    var receivedMessage = JSON.parse(payload.body);\r\n\r\n    if (receivedMessage.type === \"INTERACT\") {\r\n      console.log(receivedMessage.sender + \": \" + receivedMessage.content);\r\n    }\r\n\r\n    if (receivedMessage.type === \"SKIP\") {\r\n      // setLive(false);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    //re-connect\r\n    connect();\r\n\r\n    // get list of questions\r\n    const fetch = async () => {\r\n      await getPresentation(presentationId)\r\n        .then((res) => {\r\n          if (mounted) {\r\n            setPresentation(res);\r\n          }\r\n        })\r\n        .catch((error) => console.log(error));\r\n    };\r\n\r\n    fetch();\r\n\r\n    return () => {\r\n      mounted = false;\r\n      disconnect();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (presentation.questionList)\r\n      setQuestion({\r\n        data: presentation.questionList[0],\r\n        index: 0,\r\n      });\r\n    else {\r\n      console.log(\"Presentation has been loaded yet\");\r\n    }\r\n  }, [presentation]);\r\n\r\n  useEffect(() => {\r\n    question.index >= 0\r\n      ? setTimeout(() => {\r\n          // allow players to answer\r\n          sendQuestion();\r\n          // console.log(presentation);\r\n          let count = question.data.seconds;\r\n          const timeAnswer = setInterval(() => {\r\n            console.log(count);\r\n            if (count === 0) {\r\n              console.log(\"Time up\");\r\n              clearInterval(timeAnswer);\r\n              //skip\r\n              sendSkip();\r\n            }\r\n            count--;\r\n          }, 1000);\r\n        }, 5000)\r\n      : console.log(\"No question is loaded\");\r\n  }, [question]);\r\n\r\n  const handleNext = () => {\r\n    // console.log(questionNumber);\r\n    // console.log(presentation);\r\n    if (question.index < presentation.questionList.length - 1) {\r\n      setQuestion((question) => ({\r\n        data: presentation.questionList[question.index + 1],\r\n        index: question.index + 1,\r\n      }));\r\n    } else {\r\n      // handle End\r\n      history.replace(\"/\");\r\n    }\r\n  };\r\n\r\n  function sendSkip() {\r\n    stompClient.send(\r\n      `/app/game.skipLive/${game.pin}`,\r\n      {},\r\n      JSON.stringify({\r\n        sender: game.hostedBy,\r\n        type: \"SKIP\",\r\n      })\r\n    );\r\n  }\r\n\r\n  async function sendQuestion() {\r\n    let sendContent = question.data.id.concat(\r\n      \"|\",\r\n      question.data.questionType,\r\n      \"|\",\r\n      question.data.title\r\n    );\r\n    stompClient.send(\r\n      `/app/game.sendQuestion/${game.pin}`,\r\n      {},\r\n      JSON.stringify({\r\n        sender: game.hostedBy,\r\n        type: \"SEND_QUESTION\",\r\n        content: sendContent,\r\n      })\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* rendered : {rendered.current} */}\r\n      {presentation.questionList ? (\r\n        <>\r\n          <div>\r\n            <Button onClick={() => handleNext()}>\r\n              {question.index < presentation.questionList.length - 1\r\n                ? \"Next\"\r\n                : \"End\"}\r\n            </Button>\r\n          </div>\r\n          <Countdown\r\n            title=\"Time\"\r\n            value={Date.now() + 1000 * 6}\r\n            format=\"ss\"\r\n            onFinish={() => console.log(\"Let's interact...\")}\r\n          />\r\n          <div>\r\n            <span>{question.data.title ? question.data.title : \"\"}</span>\r\n            <ul>\r\n              {question.data.answers\r\n                ? question.data.answers.map((a, index) => (\r\n                    <li key={index}>\r\n                      {answerOptions[index]}. {a.text}\r\n                    </li>\r\n                  ))\r\n                : null}\r\n            </ul>\r\n          </div>\r\n        </>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InGame;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\index.jsx",[],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Instruction\\index.jsx",["187","188","189"],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Pin\\index.jsx",[],"C:\\ReactJS\\uet-project\\src\\reportWebVitals.js",[],["190","191"],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Name\\index.jsx",[],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\components\\InputPIN.jsx",["192","193"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Input, Tooltip } from \"antd\";\r\n\r\nInputPIN.propTypes = {};\r\n\r\nfunction InputPIN(props) {\r\n  const onChange = (e) => {\r\n    const { value } = e.target;\r\n    const reg = /^\\d*(\\d*)?$/;\r\n    if ((!isNaN(value) && reg.test(value)) || value === \"\") {\r\n      props.onChange(value);\r\n    }\r\n  };\r\n\r\n  const onBlur = () => {\r\n    const { onBlur } = props;\r\n    if (onBlur) {\r\n      onBlur();\r\n    }\r\n  };\r\n\r\n  return <Input {...props} onChange={onChange} onBlur={onBlur} />;\r\n}\r\n\r\nexport default InputPIN;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\hostSlice.js",["194"],"import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { message } from \"antd\";\r\n\r\nconst initGame = { current: {} };\r\n\r\nconst game = createSlice({\r\n  name: \"hostGame\",\r\n  initialState: initGame,\r\n  reducers: {\r\n    currentGame: (state, action) => {\r\n      state.current = action.payload;\r\n    },\r\n  },\r\n  extraReducers: {},\r\n});\r\n\r\nconst { reducer, actions } = game;\r\nexport const { currentGame } = actions;\r\nexport default reducer;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\Countdown.js",["195","196","197"],{"ruleId":"198","severity":1,"message":"199","line":21,"column":39,"nodeType":"200","messageId":"201","endLine":21,"endColumn":51},{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","replacedBy":"205"},{"ruleId":"198","severity":1,"message":"206","line":58,"column":7,"nodeType":"200","messageId":"201","endLine":58,"endColumn":18},{"ruleId":"202","replacedBy":"207"},{"ruleId":"204","replacedBy":"208"},{"ruleId":"202","replacedBy":"209"},{"ruleId":"204","replacedBy":"210"},{"ruleId":"202","replacedBy":"211"},{"ruleId":"204","replacedBy":"212"},{"ruleId":"198","severity":1,"message":"213","line":17,"column":8,"nodeType":"200","messageId":"201","endLine":17,"endColumn":20},{"ruleId":"198","severity":1,"message":"214","line":2,"column":8,"nodeType":"200","messageId":"201","endLine":2,"endColumn":17},{"ruleId":"198","severity":1,"message":"215","line":18,"column":3,"nodeType":"200","messageId":"201","endLine":18,"endColumn":13},{"ruleId":"198","severity":1,"message":"213","line":25,"column":8,"nodeType":"200","messageId":"201","endLine":25,"endColumn":20},{"ruleId":"216","severity":1,"message":"217","line":116,"column":6,"nodeType":"218","endLine":116,"endColumn":8,"suggestions":"219"},{"ruleId":"198","severity":1,"message":"220","line":12,"column":7,"nodeType":"200","messageId":"201","endLine":12,"endColumn":13},{"ruleId":"198","severity":1,"message":"221","line":3,"column":28,"nodeType":"200","messageId":"201","endLine":3,"endColumn":34},{"ruleId":"216","severity":1,"message":"222","line":90,"column":6,"nodeType":"218","endLine":90,"endColumn":8,"suggestions":"223"},{"ruleId":"216","severity":1,"message":"224","line":122,"column":6,"nodeType":"218","endLine":122,"endColumn":16,"suggestions":"225"},{"ruleId":"198","severity":1,"message":"214","line":2,"column":8,"nodeType":"200","messageId":"201","endLine":2,"endColumn":17},{"ruleId":"198","severity":1,"message":"226","line":14,"column":9,"nodeType":"200","messageId":"201","endLine":14,"endColumn":16},{"ruleId":"216","severity":1,"message":"227","line":111,"column":6,"nodeType":"218","endLine":111,"endColumn":8,"suggestions":"228"},{"ruleId":"202","replacedBy":"229"},{"ruleId":"204","replacedBy":"230"},{"ruleId":"198","severity":1,"message":"214","line":2,"column":8,"nodeType":"200","messageId":"201","endLine":2,"endColumn":17},{"ruleId":"198","severity":1,"message":"231","line":3,"column":17,"nodeType":"200","messageId":"201","endLine":3,"endColumn":24},{"ruleId":"198","severity":1,"message":"232","line":2,"column":10,"nodeType":"200","messageId":"201","endLine":2,"endColumn":17},{"ruleId":"198","severity":1,"message":"233","line":1,"column":17,"nodeType":"200","messageId":"201","endLine":1,"endColumn":26},{"ruleId":"198","severity":1,"message":"234","line":1,"column":28,"nodeType":"200","messageId":"201","endLine":1,"endColumn":36},{"ruleId":"198","severity":1,"message":"214","line":2,"column":8,"nodeType":"200","messageId":"201","endLine":2,"endColumn":17},"no-unused-vars","'currentSlide' is defined but never used.","Identifier","unusedVar","no-native-reassign",["235"],"no-negated-in-lhs",["236"],"'OptionInput' is assigned a value but never used.",["235"],["236"],["235"],["236"],["235"],["236"],"'PrivateRoute' is defined but never used.","'PropTypes' is defined but never used.","'withRouter' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'connect' and 'stompClient'. Either include them or remove the dependency array.","ArrayExpression",["237"],"'layout' is assigned a value but never used.","'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'connect' and 'presentationId'. Either include them or remove the dependency array.",["238"],"React Hook useEffect has missing dependencies: 'sendQuestion' and 'sendSkip'. Either include them or remove the dependency array.",["239"],"'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'connect'. Either include it or remove the dependency array.",["240"],["235"],["236"],"'Tooltip' is defined but never used.","'message' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},"Update the dependencies array to be: [connect, stompClient]",{"range":"249","text":"250"},"Update the dependencies array to be: [connect, presentationId]",{"range":"251","text":"252"},"Update the dependencies array to be: [question, sendQuestion, sendSkip]",{"range":"253","text":"254"},"Update the dependencies array to be: [connect]",{"range":"255","text":"256"},[3109,3111],"[connect, stompClient]",[2329,2331],"[connect, presentationId]",[3189,3199],"[question, sendQuestion, sendSkip]",[3238,3240],"[connect]"]