[{"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\EditPresentation.js":"1","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SlideDetail.js":"2","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SingleSlide.js":"3","C:\\ReactJS\\uet-project\\src\\util\\APIUtils.js":"4","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\slideSlice.js":"5","C:\\ReactJS\\uet-project\\src\\index.js":"6","C:\\ReactJS\\uet-project\\src\\app\\App.js":"7","C:\\ReactJS\\uet-project\\src\\common\\LoadingIndicator.js":"8","C:\\ReactJS\\uet-project\\src\\common\\NotFound.js":"9","C:\\ReactJS\\uet-project\\src\\common\\PublicRoute.js":"10","C:\\ReactJS\\uet-project\\src\\common\\PrivateRoute.js":"11","C:\\ReactJS\\uet-project\\src\\common\\AppHeader.js":"12","C:\\ReactJS\\uet-project\\src\\pages\\landing\\Home.js":"13","C:\\ReactJS\\uet-project\\src\\user\\profile\\Profile.js":"14","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\Presentations.js":"15","C:\\ReactJS\\uet-project\\src\\store\\store.js":"16","C:\\ReactJS\\uet-project\\src\\constants\\index.js":"17","C:\\ReactJS\\uet-project\\src\\common\\AppSider.js":"18","C:\\ReactJS\\uet-project\\src\\pages\\question\\QuestionList.js":"19","C:\\ReactJS\\uet-project\\src\\util\\Helpers.js":"20","C:\\ReactJS\\uet-project\\src\\pages\\question\\Questions.js":"21","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\PresentationList.js":"22","C:\\ReactJS\\uet-project\\src\\util\\score.js":"23","C:\\ReactJS\\uet-project\\src\\user\\login\\Login.js":"24","C:\\ReactJS\\uet-project\\src\\pages\\question\\EditQuestion.js":"25","C:\\ReactJS\\uet-project\\src\\user\\signup\\Signup.js":"26","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Lobby\\index.jsx":"27","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Main\\index.jsx":"28","C:\\ReactJS\\uet-project\\src\\pages\\Host\\index.jsx":"29","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\InGame\\index.jsx":"30","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\index.jsx":"31","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Pin\\index.jsx":"32","C:\\ReactJS\\uet-project\\src\\reportWebVitals.js":"33","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Name\\index.jsx":"34","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\components\\InputPIN.jsx":"35","C:\\ReactJS\\uet-project\\src\\pages\\Host\\hostSlice.js":"36","C:\\ReactJS\\uet-project\\src\\pages\\Host\\ProgressBar.js":"37","C:\\ReactJS\\uet-project\\src\\pages\\Host\\Delayed.js":"38","C:\\ReactJS\\uet-project\\src\\pages\\Host\\CountdownTimer.js":"39","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\QuestionBankDrawer.js":"40","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Instruction\\index.jsx":"41"},{"size":13446,"mtime":1616856142286,"results":"42","hashOfConfig":"43"},{"size":12271,"mtime":1616927140654,"results":"44","hashOfConfig":"43"},{"size":1186,"mtime":1614737133513,"results":"45","hashOfConfig":"43"},{"size":5690,"mtime":1616842870855,"results":"46","hashOfConfig":"43"},{"size":1673,"mtime":1616487245976,"results":"47","hashOfConfig":"43"},{"size":805,"mtime":1616083517546,"results":"48","hashOfConfig":"43"},{"size":4666,"mtime":1616084400320,"results":"49","hashOfConfig":"43"},{"size":316,"mtime":1614672740653,"results":"50","hashOfConfig":"43"},{"size":427,"mtime":1614135413647,"results":"51","hashOfConfig":"43"},{"size":416,"mtime":1613854056924,"results":"52","hashOfConfig":"43"},{"size":491,"mtime":1613872121567,"results":"53","hashOfConfig":"43"},{"size":2548,"mtime":1616853651950,"results":"54","hashOfConfig":"43"},{"size":214,"mtime":1613855284951,"results":"55","hashOfConfig":"43"},{"size":3548,"mtime":1613728914519,"results":"56","hashOfConfig":"43"},{"size":3638,"mtime":1614568484413,"results":"57","hashOfConfig":"43"},{"size":282,"mtime":1616070090624,"results":"58","hashOfConfig":"43"},{"size":632,"mtime":1614857133775,"results":"59","hashOfConfig":"43"},{"size":1646,"mtime":1614134132919,"results":"60","hashOfConfig":"43"},{"size":3408,"mtime":1616251316521,"results":"61","hashOfConfig":"43"},{"size":972,"mtime":1613638260326,"results":"62","hashOfConfig":"43"},{"size":5241,"mtime":1616488568592,"results":"63","hashOfConfig":"43"},{"size":3601,"mtime":1616432778385,"results":"64","hashOfConfig":"43"},{"size":91,"mtime":1613900959638,"results":"65","hashOfConfig":"43"},{"size":2748,"mtime":1613854540474,"results":"66","hashOfConfig":"43"},{"size":15094,"mtime":1616927046998,"results":"67","hashOfConfig":"43"},{"size":10190,"mtime":1613468163614,"results":"68","hashOfConfig":"43"},{"size":5359,"mtime":1615828803418,"results":"69","hashOfConfig":"43"},{"size":1808,"mtime":1615845215478,"results":"70","hashOfConfig":"43"},{"size":636,"mtime":1615828422397,"results":"71","hashOfConfig":"43"},{"size":10980,"mtime":1617075356369,"results":"72","hashOfConfig":"43"},{"size":648,"mtime":1616927243784,"results":"73","hashOfConfig":"43"},{"size":1896,"mtime":1615844485104,"results":"74","hashOfConfig":"43"},{"size":362,"mtime":1606210735677,"results":"75","hashOfConfig":"43"},{"size":2389,"mtime":1615845355583,"results":"76","hashOfConfig":"43"},{"size":572,"mtime":1614909221751,"results":"77","hashOfConfig":"43"},{"size":435,"mtime":1615281184259,"results":"78","hashOfConfig":"43"},{"size":888,"mtime":1616856572516,"results":"79","hashOfConfig":"43"},{"size":532,"mtime":1615980421259,"results":"80","hashOfConfig":"43"},{"size":913,"mtime":1615982344537,"results":"81","hashOfConfig":"43"},{"size":4079,"mtime":1616846183984,"results":"82","hashOfConfig":"43"},{"size":6527,"mtime":1616948592154,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"nz9s2i",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"89"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"89"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"89"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"89"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"86"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"89"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"86"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"89"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"135"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"179"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\EditPresentation.js",[],["184","185"],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SlideDetail.js",[],["186","187"],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SingleSlide.js",[],"C:\\ReactJS\\uet-project\\src\\util\\APIUtils.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\slideSlice.js",[],"C:\\ReactJS\\uet-project\\src\\index.js",[],"C:\\ReactJS\\uet-project\\src\\app\\App.js",["188"],"import { Layout, notification } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Redirect,\n  Route,\n  Switch,\n  useHistory,\n  withRouter,\n} from \"react-router-dom\";\nimport AppHeader from \"../common/AppHeader\";\nimport { ACCESS_TOKEN } from \"../constants\";\nimport { getCurrentUser } from \"../util/APIUtils\";\nimport LoadingIndicator from \"./../common/LoadingIndicator\";\nimport NotFound from \"./../common/NotFound\";\nimport PrivateRoute from \"./../common/PrivateRoute\";\nimport \"./App.css\";\nimport PublicRoute from \"../common/PublicRoute\";\n\nconst { Content } = Layout;\n\nconst Home = React.lazy(() => import(\"pages/landing/Home\"));\nconst Audience = React.lazy(() => import(\"pages/Audience/index\"));\nconst Host = React.lazy(() => import(\"pages/Host/index\"));\n\nconst Presentations = React.lazy(() =>\n  import(\"pages/presentation/Presentations\")\n);\nconst Questions = React.lazy(() => import(\"pages/question/Questions\"));\n\nconst Login = React.lazy(() => import(\"user/login/Login\"));\nconst Signup = React.lazy(() => import(\"user/signup/Signup\"));\nconst Profile = React.lazy(() => import(\"user/profile/Profile\"));\n\nconst App = (props) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const history = useHistory();\n\n  notification.config({\n    placement: \"topRight\",\n    top: 70,\n    duration: 3,\n  });\n\n  function loadCurrentUser() {\n    setIsLoading(true);\n    getCurrentUser()\n      .then((response) => {\n        setCurrentUser(response);\n        // console.log(response);\n        setIsAuthenticated(true);\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        setIsLoading(false);\n      });\n  }\n\n  function handleLogout(\n    redirectTo = \"/\",\n    notificationType = \"success\",\n    description = \"You're successfully logged out.\"\n  ) {\n    history.push(\"/\");\n\n    localStorage.removeItem(ACCESS_TOKEN);\n\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n\n    notification[notificationType]({\n      message: \"Viedu App\",\n      description: description,\n    });\n  }\n\n  function handleLogin() {\n    notification.success({\n      message: \"Viedu App\",\n      description: \"You're successfully logged in.\",\n    });\n    loadCurrentUser();\n\n    history.push(\"/\");\n  }\n\n  useEffect(() => {\n    loadCurrentUser();\n  }, []);\n\n  if (isLoading) {\n    return <LoadingIndicator />;\n  }\n\n  return (\n    <Layout className=\"app-container\">\n      <AppHeader\n        isAuthenticated={isAuthenticated}\n        currentUser={currentUser}\n        onLogout={handleLogout}\n      />\n      <Content className=\"app-content\">\n        <div className=\"container\">\n          <Switch>\n            {isAuthenticated && <Redirect exact from=\"/\" to=\"/presentations\" />}\n            <PublicRoute\n              restricted={false}\n              path=\"/\"\n              component={Home}\n              exact\n              authenticated={isAuthenticated}\n            />\n            <PublicRoute\n              exact\n              restricted={true}\n              path=\"/login\"\n              authenticated={isAuthenticated}\n              component={(props) =>\n                !isAuthenticated ? (\n                  <Login onLogin={handleLogin} {...props} />\n                ) : null\n              }\n            />\n            <Route exac path=\"/signup\" component={Signup}></Route>\n            <Route\n              path=\"/users/:username\"\n              render={(props) => (\n                <Profile\n                  isAuthenticated={isAuthenticated}\n                  currentUser={currentUser}\n                  {...props}\n                />\n              )}\n            />\n            {/* <PrivateRoute\n              authenticated={isAuthenticated}\n              path=\"/presentations\"\n              component={Presentations}\n              handleLogout={handleLogout}\n            />\n            <PrivateRoute\n              authenticated={isAuthenticated}\n              path=\"/questions\"\n              component={Questions}\n              handleLogout={handleLogout}\n            /> */}\n            <Route\n              path=\"/presentations\"\n              component={Presentations}\n              handleLogout={handleLogout}\n            />\n            <Route\n              path=\"/questions\"\n              component={Questions}\n              handleLogout={handleLogout}\n            />\n            <Route path=\"/play\" component={Host} />\n            <Route path=\"/audience\" component={Audience} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default withRouter(App);\n","C:\\ReactJS\\uet-project\\src\\common\\LoadingIndicator.js",[],"C:\\ReactJS\\uet-project\\src\\common\\NotFound.js",[],"C:\\ReactJS\\uet-project\\src\\common\\PublicRoute.js",[],"C:\\ReactJS\\uet-project\\src\\common\\PrivateRoute.js",[],"C:\\ReactJS\\uet-project\\src\\common\\AppHeader.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\landing\\Home.js",["189"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nHome.propTypes = {};\r\n\r\nfunction Home(props) {\r\n  return (\r\n    <div>\r\n      <h2>VIEDU APP HOME</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\ReactJS\\uet-project\\src\\user\\profile\\Profile.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\Presentations.js",[],"C:\\ReactJS\\uet-project\\src\\store\\store.js",[],["190","191"],"C:\\ReactJS\\uet-project\\src\\constants\\index.js",[],"C:\\ReactJS\\uet-project\\src\\common\\AppSider.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\question\\QuestionList.js",[],"C:\\ReactJS\\uet-project\\src\\util\\Helpers.js",[],["192","193"],"C:\\ReactJS\\uet-project\\src\\pages\\question\\Questions.js",["194","195"],"import {\r\n  Button,\r\n  Col,\r\n  Form,\r\n  Modal,\r\n  notification,\r\n  Row,\r\n  Select,\r\n  Space,\r\n  PageHeader,\r\n} from \"antd\";\r\nimport React from \"react\";\r\nimport {\r\n  Route,\r\n  Switch,\r\n  useHistory,\r\n  useRouteMatch,\r\n  withRouter,\r\n} from \"react-router-dom\";\r\nimport AppSider from \"../../common/AppSider\";\r\nimport NotFound from \"../../common/NotFound\";\r\nimport { createQuestion } from \"../../util/APIUtils\";\r\nimport EditQuestion from \"./EditQuestion\";\r\nimport QuestionList from \"./QuestionList\";\r\nimport PrivateRoute from \"./../../common/PrivateRoute\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst routes = [\r\n  {\r\n    path: \"/\",\r\n    breadcrumbName: \"Home\",\r\n  },\r\n  {\r\n    path: \"/questions\",\r\n    breadcrumbName: \"Question List\",\r\n  },\r\n];\r\n\r\nconst Questions = (props) => {\r\n  let match = useRouteMatch();\r\n  // console.log({ match });\r\n\r\n  const [visible, setVisible] = React.useState(false);\r\n  const [confirmLoading, setConfirmLoading] = React.useState(false);\r\n\r\n  const [form] = Form.useForm();\r\n  const [description, setDescription] = React.useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const showModal = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const handleSubmit = (values) => {\r\n    let answersField;\r\n    if (values.questionType === \"QUESTION_TRUE_FALSE\") {\r\n      answersField = { answers: [{ text: \"TRUE\" }, { text: \"FALSE\" }] };\r\n      values = { ...values, ...answersField };\r\n    }\r\n\r\n    if (values.questionType === \"QUESTION_INPUT_ANSWER\") {\r\n      answersField = {\r\n        answers: [\r\n          { text: \"\", correct: true },\r\n          { text: \"\", correct: true },\r\n        ],\r\n      };\r\n      values = { ...values, ...answersField };\r\n    }\r\n\r\n    const newQuestion = Object.assign({}, values);\r\n\r\n    setConfirmLoading(true);\r\n    createQuestion(newQuestion)\r\n      .then((response) => {\r\n        notification.success({\r\n          message: \"Viedu App\",\r\n          description: \"Created new question!\",\r\n        });\r\n        history.push(`${match.url}/${response.id}`);\r\n      })\r\n      .catch((error) => {\r\n        notification.error({\r\n          message: \"Viedu App\",\r\n          description: error.message || \"Error\",\r\n        });\r\n      });\r\n    setVisible(false);\r\n    setConfirmLoading(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setVisible(false);\r\n    form.resetFields();\r\n  };\r\n\r\n  function handleChange(value) {\r\n    // console.log(`selected ${value}`);\r\n    switch (value) {\r\n      case \"QUESTION_CHOICE_ANSWER\":\r\n        setDescription(\r\n          \"Gives players several answer alternatives to choose from \"\r\n        );\r\n        break;\r\n      case \"QUESTION_TRUE_FALSE\":\r\n        setDescription(\"Let players decided if the statement is true or false\");\r\n        break;\r\n      case \"QUESTION_INPUT_ANSWER\":\r\n        setDescription(\"Let players input a answer\");\r\n        break;\r\n\r\n      default:\r\n        setDescription(\"\");\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Switch>\r\n      <Route\r\n        exact\r\n        path={match.path}\r\n        render={() => (\r\n          <AppSider>\r\n            <PageHeader\r\n              title=\"My questions\"\r\n              breadcrumb={{ routes }}\r\n              subTitle=\"\"\r\n            />\r\n            <Row>\r\n              <Col span={6}>\r\n                <Space>\r\n                  <Button type=\"primary\" onClick={showModal}>\r\n                    New Question\r\n                  </Button>\r\n                  <Modal\r\n                    title=\"New question\"\r\n                    visible={visible}\r\n                    onOk={form.submit}\r\n                    confirmLoading={confirmLoading}\r\n                    onCancel={handleCancel}\r\n                    okText=\"Create\"\r\n                  >\r\n                    <Form form={form} onFinish={handleSubmit}>\r\n                      <Form.Item\r\n                        name=\"questionType\"\r\n                        label=\"Question Type\"\r\n                        rules={[{ required: true }]}\r\n                      >\r\n                        <Select\r\n                          defaultActiveFirstOption\r\n                          style={{ width: 120 }}\r\n                          onChange={handleChange}\r\n                        >\r\n                          <Option value=\"QUESTION_CHOICE_ANSWER\">Quiz</Option>\r\n                          <Option value=\"QUESTION_TRUE_FALSE\">\r\n                            True or False\r\n                          </Option>\r\n                          <Option value=\"QUESTION_INPUT_ANSWER\">\r\n                            Input answer\r\n                          </Option>\r\n                        </Select>\r\n                      </Form.Item>\r\n                    </Form>\r\n                    <p>{description}</p>\r\n                  </Modal>\r\n                </Space>\r\n              </Col>\r\n              <Col span={18}></Col>\r\n            </Row>\r\n            <br />\r\n            <QuestionList />\r\n          </AppSider>\r\n        )}\r\n      />\r\n      <Route\r\n        authenticated\r\n        path={`${match.path}/:questionId/edit`}\r\n        component={EditQuestion}\r\n      />\r\n      <Route\r\n        authenticated\r\n        path={`${match.path}/:questionId`}\r\n        component={EditQuestion}\r\n      />\r\n      <Route component={NotFound} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Questions;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\PresentationList.js",[],["196","197"],"C:\\ReactJS\\uet-project\\src\\util\\score.js",[],"C:\\ReactJS\\uet-project\\src\\user\\login\\Login.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\question\\EditQuestion.js",["198"],"import {\r\n  Divider,\r\n  Form,\r\n  Input,\r\n  Layout,\r\n  Button,\r\n  Space,\r\n  Slider,\r\n  Select,\r\n  Col,\r\n  Row,\r\n  Checkbox,\r\n  notification,\r\n  Switch,\r\n  Card,\r\n  Typography,\r\n} from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport \"./EditQuestion.css\";\r\nimport score from \"./../../util/score\";\r\nimport { updateQuestion, getQuestion } from \"./../../util/APIUtils\";\r\nimport LoadingIndicator from \"./../../common/LoadingIndicator\";\r\nimport {\r\n  CheckOutlined,\r\n  ClockCircleOutlined,\r\n  PlusOutlined,\r\n  SettingOutlined,\r\n  SketchOutlined,\r\n} from \"@ant-design/icons\";\r\nimport styled from \"styled-components\";\r\nimport * as QuestionType from \"util/QuestionType\";\r\n\r\nconst { Content } = Layout;\r\nconst { Option } = Select;\r\nconst { Title } = Typography;\r\n\r\nconst TitleInput = styled(Input)`\r\n  font-size: 3em;\r\n  font-weight: bold;\r\n  border: 2px solid dodgerblue;\r\n  border-radius: 3px;\r\n\r\n  margin: ${(props) => props.size};\r\n  padding: ${(props) => props.size};\r\n`;\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 6,\r\n  },\r\n  wrapperCol: {\r\n    span: 24,\r\n  },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 10,\r\n    span: 24,\r\n  },\r\n};\r\n\r\nconst EditQuestion = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [submiting, setSubmiting] = useState(false);\r\n  const [question, setQuestion] = useState({});\r\n  const { questionId } = useParams();\r\n  const [form] = Form.useForm();\r\n\r\n  const handleSubmit = (values) => {\r\n    const combineId = { ...values, id: questionId };\r\n\r\n    const requestData = Object.assign({}, combineId);\r\n\r\n    setSubmiting(true);\r\n    setTimeout(() => {\r\n      updateQuestion(requestData).then((response) => {\r\n        notification.success({\r\n          message: \"Success\",\r\n          description: \"Saved changes\",\r\n        });\r\n        setSubmiting(false);\r\n      });\r\n    }, 2000);\r\n  };\r\n\r\n  const onReset = () => {\r\n    form.resetFields();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const onFill = (values) => {\r\n      form.setFieldsValue(values);\r\n    };\r\n    setLoading(true);\r\n    getQuestion(questionId)\r\n      .then((response) => {\r\n        // console.log(response);\r\n        onFill(response);\r\n        setQuestion(response);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        notification.error({\r\n          message: \"Error\",\r\n          description: \"Have error\",\r\n        });\r\n        setLoading(false);\r\n      });\r\n  }, [questionId, form]);\r\n\r\n  return loading ? (\r\n    <LoadingIndicator />\r\n  ) : (\r\n    <Layout>\r\n      {/* <Sider width={200} className=\"site-layout-background\"></Sider> */}\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          padding: \"24px 24px 24px\",\r\n        }}\r\n      >\r\n        <Card style={{ width: \"60%\" }}>\r\n          <Row>\r\n            <Col span={6}>\r\n              <Button type=\"primary\" onClick={() => window.history.back()}>\r\n                Back\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Content\r\n            className=\"site-layout-background\"\r\n            style={{\r\n              padding: 24,\r\n              margin: 0,\r\n              minHeight: 280,\r\n            }}\r\n          >\r\n            <Form\r\n              {...layout}\r\n              form={form}\r\n              onFinish={handleSubmit}\r\n              layout=\"vertical\"\r\n            >\r\n              <Form.Item name=\"questionType\" hidden>\r\n                <Input placeholder=\"Question type\" disabled />\r\n              </Form.Item>\r\n              <Form.Item name=\"createdAt\" hidden>\r\n                <Input placeholder=\"createdAt\" disabled />\r\n              </Form.Item>\r\n              <Form.Item name=\"modifiedAt\" hidden>\r\n                <Input placeholder=\"modifiedAt\" disabled />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"title\"\r\n                label={<Title level={4}>Your question</Title>}\r\n              >\r\n                <TitleInput\r\n                  placeholder=\"Enter your question\"\r\n                  autoComplete=\"off\"\r\n                />\r\n              </Form.Item>\r\n\r\n              <Divider />\r\n              <Form.List name=\"answers\" initialValue={[\"\", \"\"]}>\r\n                {(answers, { add, remove }) => {\r\n                  return (\r\n                    <div>\r\n                      {question.questionType ===\r\n                      QuestionType.QUESTION_CHOICE_ANSWER\r\n                        ? answers.map((answer, index) => (\r\n                            <div key={answer.key}>\r\n                              <Form.Item label={`Option ${index + 1}`}>\r\n                                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                                  <Col span={18}>\r\n                                    <Form.Item\r\n                                      name={[index, \"text\"]}\r\n                                      rules={[{ require: true }]}\r\n                                    >\r\n                                      <Input\r\n                                        placeholder={`Option ${index + 1}`}\r\n                                      />\r\n                                    </Form.Item>\r\n                                  </Col>\r\n                                  <Col span={2}>\r\n                                    <Form.Item\r\n                                      name={[index, \"correct\"]}\r\n                                      valuePropName=\"checked\"\r\n                                      rules={[\r\n                                        { require: true, type: \"boolean\" },\r\n                                      ]}\r\n                                    >\r\n                                      <Checkbox checked={false} />\r\n                                    </Form.Item>\r\n                                  </Col>\r\n                                  <Col span={4}>\r\n                                    {index > 1 ? (\r\n                                      <Button\r\n                                        type=\"danger\"\r\n                                        onClick={() => remove(answer.name)}\r\n                                      >\r\n                                        Remove\r\n                                      </Button>\r\n                                    ) : null}\r\n                                  </Col>\r\n                                </Row>\r\n                              </Form.Item>\r\n                            </div>\r\n                          ))\r\n                        : question.questionType ===\r\n                          QuestionType.QUESTION_TRUE_FALSE\r\n                        ? answers.map((answer, index) => (\r\n                            <div key={answer.key}>\r\n                              <Form.Item label={`Option ${index + 1}`}>\r\n                                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                                  <Col span={12}>\r\n                                    <Form.Item\r\n                                      name={[index, \"text\"]}\r\n                                      rules={[{ require: true }]}\r\n                                    >\r\n                                      <Input readOnly />\r\n                                    </Form.Item>\r\n                                  </Col>\r\n                                  <Col span={6}>\r\n                                    <Form.Item\r\n                                      name={[index, \"correct\"]}\r\n                                      valuePropName=\"checked\"\r\n                                      rules={[\r\n                                        { require: true, type: \"boolean\" },\r\n                                      ]}\r\n                                    >\r\n                                      <input\r\n                                        style={{ fontSize: 15 }}\r\n                                        name=\"inpRadio\"\r\n                                        type=\"radio\"\r\n                                        checked={false}\r\n                                      />\r\n                                    </Form.Item>\r\n                                  </Col>\r\n                                  <Col span={6}>\r\n                                    {index > 1 ? (\r\n                                      <Button\r\n                                        type=\"danger\"\r\n                                        onClick={() => remove(answer.name)}\r\n                                      >\r\n                                        Remove\r\n                                      </Button>\r\n                                    ) : null}\r\n                                  </Col>\r\n                                </Row>\r\n                              </Form.Item>\r\n                            </div>\r\n                          ))\r\n                        : question.questionType ===\r\n                          QuestionType.QUESTION_INPUT_ANSWER\r\n                        ? answers.map((answer, index) => (\r\n                            <div key={answer.key}>\r\n                              <Form.Item label={`Correct answer ${index + 1}`}>\r\n                                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                                  <Col span={18}>\r\n                                    <Form.Item\r\n                                      name={[index, \"text\"]}\r\n                                      rules={[{ require: true }]}\r\n                                    >\r\n                                      <Input\r\n                                        placeholder={`Correct answer ${\r\n                                          index + 1\r\n                                        }`}\r\n                                      />\r\n                                    </Form.Item>\r\n                                  </Col>\r\n                                  <Col span={2}>\r\n                                    <Form.Item\r\n                                      name={[index, \"correct\"]}\r\n                                      valuePropName=\"checked\"\r\n                                      rules={[\r\n                                        { require: true, type: \"boolean\" },\r\n                                      ]}\r\n                                    >\r\n                                      <Checkbox defaultChecked disabled />\r\n                                    </Form.Item>\r\n                                  </Col>\r\n                                  <Col span={4}>\r\n                                    {index > 1 ? (\r\n                                      <Button\r\n                                        type=\"danger\"\r\n                                        onClick={() => remove(answer.name)}\r\n                                      >\r\n                                        Remove\r\n                                      </Button>\r\n                                    ) : null}\r\n                                  </Col>\r\n                                </Row>\r\n                              </Form.Item>\r\n                            </div>\r\n                          ))\r\n                        : \"The type of question has not been determined\"}\r\n                      {answers.length < 4 &&\r\n                      question.questionType !==\r\n                        QuestionType.QUESTION_TRUE_FALSE ? (\r\n                        <Form.Item>\r\n                          <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                            <Button\r\n                              type=\"dashed\"\r\n                              onClick={() =>\r\n                                question.questionType ===\r\n                                QuestionType.QUESTION_INPUT_ANSWER\r\n                                  ? add({ text: \"\", correct: true })\r\n                                  : add()\r\n                              }\r\n                              style={{ width: \"60%\" }}\r\n                            >\r\n                              <PlusOutlined /> Add more\r\n                            </Button>\r\n                          </Row>\r\n                        </Form.Item>\r\n                      ) : null}\r\n                    </div>\r\n                  );\r\n                }}\r\n              </Form.List>\r\n\r\n              <Divider />\r\n\r\n              <Form.Item\r\n                wrapperCol={{ span: 8 }}\r\n                name=\"score\"\r\n                label={\r\n                  <Title level={4}>\r\n                    <SketchOutlined /> Points\r\n                  </Title>\r\n                }\r\n                initialValue={0}\r\n                rules={[{ type: \"number\", required: false }]}\r\n              >\r\n                <Slider marks={score} min={0} max={2000} step={null} />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                wrapperCol={{ span: 5 }}\r\n                name=\"seconds\"\r\n                label={\r\n                  <Title level={4}>\r\n                    <ClockCircleOutlined /> Time to answer\r\n                  </Title>\r\n                }\r\n                rules={[{ type: \"number\", required: false }]}\r\n              >\r\n                <Select\r\n                  placeholder=\"Choose a time\"\r\n                  menuItemSelectedIcon={<CheckOutlined />}\r\n                >\r\n                  <Option value={5}>5 seconds</Option>\r\n                  <Option value={10}>10 seconds</Option>\r\n                  <Option value={20}>20 seconds</Option>\r\n                  <Option value={30}>30 seconds</Option>\r\n                  <Option value={60}>1 minute</Option>\r\n                  <Option value={90}>1 minute 30 seconds</Option>\r\n                  <Option value={120}>2 minutes</Option>\r\n                  <Option value={240}>4 minutes</Option>\r\n                </Select>\r\n              </Form.Item>\r\n\r\n              {question.questionType === QuestionType.QUESTION_CHOICE_ANSWER ? (\r\n                <Form.Item\r\n                  wrapperCol={{ span: 5 }}\r\n                  label={\r\n                    <Title level={4}>\r\n                      <SettingOutlined /> Question Option\r\n                    </Title>\r\n                  }\r\n                  name=\"multiSelect\"\r\n                  rules={[{ require: false, type: \"boolean\" }]}\r\n                >\r\n                  <Select\r\n                    defaultActiveFirstOption\r\n                    placeholder=\"\"\r\n                    menuItemSelectedIcon={<CheckOutlined />}\r\n                  >\r\n                    <Option value={false}>Single select</Option>\r\n                    <Option value={true}>Multi-select</Option>\r\n                  </Select>\r\n                </Form.Item>\r\n              ) : null}\r\n\r\n              <Form.Item {...tailLayout}>\r\n                <Space size=\"small\">\r\n                  <Button type=\"primary\" loading={submiting} htmlType=\"submit\">\r\n                    Submit\r\n                  </Button>\r\n                  <Button htmlType=\"button\" onClick={onReset}>\r\n                    Reset\r\n                  </Button>\r\n                </Space>\r\n              </Form.Item>\r\n            </Form>\r\n          </Content>\r\n        </Card>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default EditQuestion;\r\n","C:\\ReactJS\\uet-project\\src\\user\\signup\\Signup.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Lobby\\index.jsx",["199"],"import { Button, message, Tooltip } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport SockJS from \"sockjs-client\";\r\nimport Stomp from \"stompjs\";\r\nimport { WS_BASE_URL } from \"constants/index\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { currentGame } from \"./../../hostSlice\";\r\nimport { updateGame } from \"util/APIUtils\";\r\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\r\nimport { FullscreenExitOutlined, FullscreenOutlined } from \"@ant-design/icons\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ToolBar = styled.div`\r\n  display: flex;\r\n  flex-direction: row-reverse;\r\n  padding: 10px;\r\n`;\r\n\r\nLobby.propTypes = {};\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction Lobby(props) {\r\n  //get query params\r\n  let query = useQuery();\r\n  const quizId = query.get(\"quizId\");\r\n\r\n  const dispatch = useDispatch();\r\n  const games = useSelector((state) => state.games);\r\n  const game = games.current;\r\n\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  const handle = useFullScreenHandle();\r\n\r\n  const [playersJoined, setPlayersJoined] = useState([]);\r\n\r\n  var stompClient = null;\r\n\r\n  function connect() {\r\n    let serverUrl = WS_BASE_URL;\r\n    let ws = new SockJS(serverUrl);\r\n    stompClient = Stomp.over(ws);\r\n\r\n    stompClient.connect({}, onConnected, onError);\r\n  }\r\n\r\n  function onConnected() {\r\n    // update game to server\r\n    updateGame({ ...game, gameStatus: \"GOING_ON\" })\r\n      .then((res) => dispatch(currentGame(res)))\r\n      .catch((error) => console.log(error.message));\r\n\r\n    // Subscribe to the Game\r\n    stompClient.subscribe(`/quiz/${game.pin}`, onMessageReceived);\r\n\r\n    // Tell name of host person to the server\r\n    stompClient.send(\r\n      `/app/game.hostGame/${game.pin}`,\r\n      {},\r\n      JSON.stringify({\r\n        sender: game.hostedBy,\r\n        type: \"HOST\",\r\n        content: game.title,\r\n      })\r\n    );\r\n  }\r\n\r\n  function onError(error) {\r\n    message.error(\r\n      \"Could not connect to server. Please refresh this page to try again!\"\r\n    );\r\n  }\r\n\r\n  function onMessageReceived(payload) {\r\n    var receivedMessage = JSON.parse(payload.body);\r\n\r\n    if (receivedMessage.type === \"JOIN\") {\r\n      setPlayersJoined((playersJoined) => [\r\n        ...playersJoined,\r\n        {\r\n          nickname: receivedMessage.sender,\r\n          point: 0,\r\n        },\r\n      ]);\r\n    }\r\n\r\n    if (receivedMessage.type === \"LEAVE\") {\r\n      setPlayersJoined(\r\n        playersJoined.filter(\r\n          (player) => player.nickname !== receivedMessage.sender\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  function handleStart() {\r\n    history.push(`${location.state.rootPath}/ingame?quizId=${quizId}`);\r\n  }\r\n\r\n  useEffect(() => {\r\n    connect();\r\n\r\n    return () => {\r\n      if (stompClient !== null) {\r\n        stompClient.disconnect();\r\n      }\r\n      // updateGame({ ...game, players: playersJoined })\r\n      //   .then((res) => {})\r\n      //   .catch((error) => console.log(error.message));\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ minHeight: \"100vh\" }}>\r\n      <FullScreen handle={handle}>\r\n        <div\r\n          style={{\r\n            backgroundColor: \"white\",\r\n            display: \"flex\",\r\n            flex: 1,\r\n            height: \"100%\",\r\n            flexDirection: \"column\",\r\n          }}\r\n        >\r\n          <ToolBar>\r\n            {handle.active ? (\r\n              <Tooltip placement=\"bottomRight\" title=\"Exit\">\r\n                <Button\r\n                  onClick={handle.exit}\r\n                  icon={<FullscreenExitOutlined />}\r\n                />\r\n              </Tooltip>\r\n            ) : (\r\n              <Tooltip placement=\"bottomRight\" title=\"Fullscreen\">\r\n                <Button onClick={handle.enter} icon={<FullscreenOutlined />} />\r\n              </Tooltip>\r\n            )}\r\n          </ToolBar>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              padding: 20,\r\n            }}\r\n          >\r\n            <Button type=\"primary\" onClick={handleStart}>\r\n              Start\r\n            </Button>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"space-around\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <span>\r\n              Join at <b>viedu.live/audience</b> with PIN: <h1>{game.pin}</h1>\r\n            </span>\r\n            <div>\r\n              Number of players: <h1>{playersJoined.length}</h1>\r\n            </div>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              padding: 10,\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <BoardName list={playersJoined} />\r\n          </div>\r\n        </div>\r\n      </FullScreen>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction BoardName(props) {\r\n  const { list } = props;\r\n  return (\r\n    <div>\r\n      {list\r\n        ? list.map((player, index) => (\r\n            <span key={index}>\r\n              <h3>{player.nickname} </h3>\r\n            </span>\r\n          ))\r\n        : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Lobby;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Main\\index.jsx",["200"],"import { Button, Form, Input } from \"antd\";\r\nimport React, { useEffect } from \"react\";\r\nimport { createGame } from \"util/APIUtils\";\r\nimport { useHistory, useLocation, useRouteMatch } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { currentGame } from \"./../../hostSlice\";\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction Main(props) {\r\n  const match = useRouteMatch();\r\n  const [form] = Form.useForm();\r\n  const history = useHistory();\r\n\r\n  let query = useQuery();\r\n  const quizId = query.get(\"quizId\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  async function handleSubmit(values) {\r\n    const gameData = Object.assign({}, values);\r\n    // console.log(log);\r\n\r\n    await createGame(gameData)\r\n      .then((response) => {\r\n        dispatch(currentGame(response));\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    history.push(`${match.url}/lobby?quizId=${quizId}`, {\r\n      rootPath: match.url,\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({\r\n      presentationId: quizId,\r\n      gameType: \"LIVE\",\r\n    });\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <Form style={{ width: 350 }} form={form} onFinish={handleSubmit}>\r\n          <Form.Item name=\"gameType\">\r\n            <Input hidden />\r\n          </Form.Item>\r\n          <Form.Item name=\"presentationId\">\r\n            <Input hidden />\r\n          </Form.Item>\r\n          <Form.Item name=\"title\">\r\n            <Input placeholder=\"Title\" />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Button htmlType=\"submit\">Create Room</Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\index.jsx",[],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\InGame\\index.jsx",["201","202"],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\index.jsx",[],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Pin\\index.jsx",[],"C:\\ReactJS\\uet-project\\src\\reportWebVitals.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Name\\index.jsx",[],["203","204"],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\components\\InputPIN.jsx",["205","206"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Input, Tooltip } from \"antd\";\r\n\r\nInputPIN.propTypes = {};\r\n\r\nfunction InputPIN(props) {\r\n  const onChange = (e) => {\r\n    const { value } = e.target;\r\n    const reg = /^\\d*(\\d*)?$/;\r\n    if ((!isNaN(value) && reg.test(value)) || value === \"\") {\r\n      props.onChange(value);\r\n    }\r\n  };\r\n\r\n  const onBlur = () => {\r\n    const { onBlur } = props;\r\n    if (onBlur) {\r\n      onBlur();\r\n    }\r\n  };\r\n\r\n  return <Input {...props} onChange={onChange} onBlur={onBlur} />;\r\n}\r\n\r\nexport default InputPIN;\r\n",["207","208"],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\hostSlice.js",["209"],"import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { message } from \"antd\";\r\n\r\nconst initGame = { current: {} };\r\n\r\nconst game = createSlice({\r\n  name: \"hostGame\",\r\n  initialState: initGame,\r\n  reducers: {\r\n    currentGame: (state, action) => {\r\n      state.current = action.payload;\r\n    },\r\n  },\r\n  extraReducers: {},\r\n});\r\n\r\nconst { reducer, actions } = game;\r\nexport const { currentGame } = actions;\r\nexport default reducer;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\ProgressBar.js",["210"],"import React, { useEffect, useState } from \"react\";\r\nimport { Progress } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport { clearInterval } from \"stompjs\";\r\n\r\nProgressBar.propTypes = {\r\n  time: PropTypes.number.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n};\r\n\r\nfunction ProgressBar(props) {\r\n  const totalSecond = props.time;\r\n  const [percent, setPercent] = useState(99);\r\n\r\n  useEffect(() => {\r\n    const inter = setInterval(() => {\r\n      setPercent((percent) => (percent > 0 ? percent - 1 : 0));\r\n    }, totalSecond / 100);\r\n\r\n    return () => {\r\n      setPercent(99);\r\n      clearInterval(inter);\r\n    };\r\n  }, [props.id]);\r\n\r\n  return (\r\n    <>\r\n      {percent > 0 ? (\r\n        <Progress\r\n          showInfo={false}\r\n          strokeLinecap=\"square\"\r\n          percent={percent}\r\n        ></Progress>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ProgressBar;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\Delayed.js",["211"],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nDelayed.propTypes = {\r\n  waitBeforeShow: PropTypes.number.isRequired,\r\n  key: PropTypes.string.isRequired,\r\n};\r\n\r\nfunction Delayed(props) {\r\n  const [hidden, setHidden] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setHidden(false);\r\n    }, props.waitBeforeShow);\r\n\r\n    return () => {\r\n      setHidden(true);\r\n    };\r\n  }, [props.key]);\r\n\r\n  return hidden ? <></> : props.children;\r\n}\r\n\r\nexport default Delayed;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\CountdownTimer.js",[],["212","213"],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\QuestionBankDrawer.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Instruction\\index.jsx",["214","215","216"],{"ruleId":"217","replacedBy":"218"},{"ruleId":"219","replacedBy":"220"},{"ruleId":"217","replacedBy":"221"},{"ruleId":"219","replacedBy":"222"},{"ruleId":"223","severity":1,"message":"224","line":15,"column":8,"nodeType":"225","messageId":"226","endLine":15,"endColumn":20},{"ruleId":"223","severity":1,"message":"227","line":2,"column":8,"nodeType":"225","messageId":"226","endLine":2,"endColumn":17},{"ruleId":"217","replacedBy":"228"},{"ruleId":"219","replacedBy":"229"},{"ruleId":"217","replacedBy":"230"},{"ruleId":"219","replacedBy":"231"},{"ruleId":"223","severity":1,"message":"232","line":18,"column":3,"nodeType":"225","messageId":"226","endLine":18,"endColumn":13},{"ruleId":"223","severity":1,"message":"224","line":25,"column":8,"nodeType":"225","messageId":"226","endLine":25,"endColumn":20},{"ruleId":"217","replacedBy":"233"},{"ruleId":"219","replacedBy":"234"},{"ruleId":"223","severity":1,"message":"235","line":14,"column":3,"nodeType":"225","messageId":"226","endLine":14,"endColumn":9},{"ruleId":"236","severity":1,"message":"237","line":116,"column":6,"nodeType":"238","endLine":116,"endColumn":8,"suggestions":"239"},{"ruleId":"223","severity":1,"message":"240","line":12,"column":7,"nodeType":"225","messageId":"226","endLine":12,"endColumn":13},{"ruleId":"236","severity":1,"message":"241","line":134,"column":6,"nodeType":"238","endLine":134,"endColumn":8,"suggestions":"242"},{"ruleId":"236","severity":1,"message":"243","line":170,"column":6,"nodeType":"238","endLine":170,"endColumn":16,"suggestions":"244"},{"ruleId":"217","replacedBy":"245"},{"ruleId":"219","replacedBy":"246"},{"ruleId":"223","severity":1,"message":"227","line":2,"column":8,"nodeType":"225","messageId":"226","endLine":2,"endColumn":17},{"ruleId":"223","severity":1,"message":"247","line":3,"column":17,"nodeType":"225","messageId":"226","endLine":3,"endColumn":24},{"ruleId":"217","replacedBy":"248"},{"ruleId":"219","replacedBy":"249"},{"ruleId":"223","severity":1,"message":"250","line":2,"column":10,"nodeType":"225","messageId":"226","endLine":2,"endColumn":17},{"ruleId":"236","severity":1,"message":"251","line":24,"column":6,"nodeType":"238","endLine":24,"endColumn":16,"suggestions":"252"},{"ruleId":"236","severity":1,"message":"253","line":20,"column":6,"nodeType":"238","endLine":20,"endColumn":17,"suggestions":"254"},{"ruleId":"217","replacedBy":"255"},{"ruleId":"219","replacedBy":"256"},{"ruleId":"223","severity":1,"message":"227","line":2,"column":8,"nodeType":"225","messageId":"226","endLine":2,"endColumn":17},{"ruleId":"223","severity":1,"message":"257","line":16,"column":9,"nodeType":"225","messageId":"226","endLine":16,"endColumn":16},{"ruleId":"236","severity":1,"message":"258","line":114,"column":6,"nodeType":"238","endLine":114,"endColumn":8,"suggestions":"259"},"no-native-reassign",["260"],"no-negated-in-lhs",["261"],["260"],["261"],"no-unused-vars","'PrivateRoute' is defined but never used.","Identifier","unusedVar","'PropTypes' is defined but never used.",["260"],["261"],["260"],["261"],"'withRouter' is defined but never used.",["260"],["261"],"'Switch' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'connect' and 'stompClient'. Either include them or remove the dependency array.","ArrayExpression",["262"],"'layout' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'connect' and 'presentationId'. Either include them or remove the dependency array.",["263"],"React Hook useEffect has missing dependencies: 'sendQuestion' and 'sendSkip'. Either include them or remove the dependency array.",["264"],["260"],["261"],"'Tooltip' is defined but never used.",["260"],["261"],"'message' is defined but never used.","React Hook useEffect has a missing dependency: 'totalSecond'. Either include it or remove the dependency array.",["265"],"React Hook useEffect has a missing dependency: 'props.waitBeforeShow'. Either include it or remove the dependency array.",["266"],["260"],["261"],"'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'connect'. Either include it or remove the dependency array.",["267"],"no-global-assign","no-unsafe-negation",{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},"Update the dependencies array to be: [connect, stompClient]",{"range":"280","text":"281"},"Update the dependencies array to be: [connect, presentationId]",{"range":"282","text":"283"},"Update the dependencies array to be: [question, sendQuestion, sendSkip]",{"range":"284","text":"285"},"Update the dependencies array to be: [props.id, totalSecond]",{"range":"286","text":"287"},"Update the dependencies array to be: [props.key, props.waitBeforeShow]",{"range":"288","text":"289"},"Update the dependencies array to be: [connect]",{"range":"290","text":"291"},[3109,3111],"[connect, stompClient]",[3390,3392],"[connect, presentationId]",[4312,4322],"[question, sendQuestion, sendSkip]",[630,640],"[props.id, totalSecond]",[442,453],"[props.key, props.waitBeforeShow]",[3405,3407],"[connect]"]