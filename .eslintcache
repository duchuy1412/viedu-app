[{"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\EditPresentation.js":"1","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SlideDetail.js":"2","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SingleSlide.js":"3","C:\\ReactJS\\uet-project\\src\\util\\APIUtils.js":"4","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\slideSlice.js":"5","C:\\ReactJS\\uet-project\\src\\index.js":"6","C:\\ReactJS\\uet-project\\src\\app\\App.js":"7","C:\\ReactJS\\uet-project\\src\\common\\LoadingIndicator.js":"8","C:\\ReactJS\\uet-project\\src\\common\\NotFound.js":"9","C:\\ReactJS\\uet-project\\src\\common\\PublicRoute.js":"10","C:\\ReactJS\\uet-project\\src\\common\\PrivateRoute.js":"11","C:\\ReactJS\\uet-project\\src\\common\\AppHeader.js":"12","C:\\ReactJS\\uet-project\\src\\pages\\landing\\Home.js":"13","C:\\ReactJS\\uet-project\\src\\user\\profile\\Profile.js":"14","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\Presentations.js":"15","C:\\ReactJS\\uet-project\\src\\store\\store.js":"16","C:\\ReactJS\\uet-project\\src\\constants\\index.js":"17","C:\\ReactJS\\uet-project\\src\\common\\AppSider.js":"18","C:\\ReactJS\\uet-project\\src\\pages\\question\\QuestionList.js":"19","C:\\ReactJS\\uet-project\\src\\util\\Helpers.js":"20","C:\\ReactJS\\uet-project\\src\\pages\\question\\Questions.js":"21","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\PresentationList.js":"22","C:\\ReactJS\\uet-project\\src\\util\\score.js":"23","C:\\ReactJS\\uet-project\\src\\user\\login\\Login.js":"24","C:\\ReactJS\\uet-project\\src\\pages\\question\\EditQuestion.js":"25","C:\\ReactJS\\uet-project\\src\\user\\signup\\Signup.js":"26","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Lobby\\index.jsx":"27","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Main\\index.jsx":"28","C:\\ReactJS\\uet-project\\src\\pages\\Host\\index.jsx":"29","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\InGame\\index.jsx":"30","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\index.jsx":"31","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Pin\\index.jsx":"32","C:\\ReactJS\\uet-project\\src\\reportWebVitals.js":"33","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Name\\index.jsx":"34","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\components\\InputPIN.jsx":"35","C:\\ReactJS\\uet-project\\src\\pages\\Host\\hostSlice.js":"36","C:\\ReactJS\\uet-project\\src\\pages\\Host\\ProgressBar.js":"37","C:\\ReactJS\\uet-project\\src\\pages\\Host\\Delayed.js":"38","C:\\ReactJS\\uet-project\\src\\pages\\Host\\CountdownTimer.js":"39","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\QuestionBankDrawer.js":"40","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Instruction\\index.jsx":"41","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\ScoreBoard\\index.js":"42","C:\\ReactJS\\uet-project\\src\\pages\\question\\PicturesWall.js":"43"},{"size":13446,"mtime":1616856142286,"results":"44","hashOfConfig":"45"},{"size":12271,"mtime":1616927140654,"results":"46","hashOfConfig":"45"},{"size":1186,"mtime":1614737133513,"results":"47","hashOfConfig":"45"},{"size":5821,"mtime":1617243424633,"results":"48","hashOfConfig":"45"},{"size":1673,"mtime":1616487245976,"results":"49","hashOfConfig":"45"},{"size":805,"mtime":1616083517546,"results":"50","hashOfConfig":"45"},{"size":4666,"mtime":1616084400320,"results":"51","hashOfConfig":"45"},{"size":316,"mtime":1614672740653,"results":"52","hashOfConfig":"45"},{"size":427,"mtime":1614135413647,"results":"53","hashOfConfig":"45"},{"size":416,"mtime":1613854056924,"results":"54","hashOfConfig":"45"},{"size":491,"mtime":1613872121567,"results":"55","hashOfConfig":"45"},{"size":2548,"mtime":1616853651950,"results":"56","hashOfConfig":"45"},{"size":214,"mtime":1613855284951,"results":"57","hashOfConfig":"45"},{"size":3548,"mtime":1613728914519,"results":"58","hashOfConfig":"45"},{"size":3638,"mtime":1614568484413,"results":"59","hashOfConfig":"45"},{"size":282,"mtime":1616070090624,"results":"60","hashOfConfig":"45"},{"size":691,"mtime":1617296708178,"results":"61","hashOfConfig":"45"},{"size":1646,"mtime":1614134132919,"results":"62","hashOfConfig":"45"},{"size":3408,"mtime":1616251316521,"results":"63","hashOfConfig":"45"},{"size":972,"mtime":1613638260326,"results":"64","hashOfConfig":"45"},{"size":5241,"mtime":1616488568592,"results":"65","hashOfConfig":"45"},{"size":3601,"mtime":1616432778385,"results":"66","hashOfConfig":"45"},{"size":91,"mtime":1613900959638,"results":"67","hashOfConfig":"45"},{"size":2748,"mtime":1613854540474,"results":"68","hashOfConfig":"45"},{"size":15462,"mtime":1617566205046,"results":"69","hashOfConfig":"45"},{"size":10190,"mtime":1613468163614,"results":"70","hashOfConfig":"45"},{"size":5359,"mtime":1615828803418,"results":"71","hashOfConfig":"45"},{"size":1808,"mtime":1615845215478,"results":"72","hashOfConfig":"45"},{"size":636,"mtime":1615828422397,"results":"73","hashOfConfig":"45"},{"size":13499,"mtime":1617246264982,"results":"74","hashOfConfig":"45"},{"size":653,"mtime":1616928105874,"results":"75","hashOfConfig":"45"},{"size":1896,"mtime":1615844485104,"results":"76","hashOfConfig":"45"},{"size":362,"mtime":1606210735677,"results":"77","hashOfConfig":"45"},{"size":2389,"mtime":1615845355583,"results":"78","hashOfConfig":"45"},{"size":572,"mtime":1614909221751,"results":"79","hashOfConfig":"45"},{"size":1081,"mtime":1617246113456,"results":"80","hashOfConfig":"45"},{"size":888,"mtime":1616856572516,"results":"81","hashOfConfig":"45"},{"size":592,"mtime":1617242627760,"results":"82","hashOfConfig":"45"},{"size":913,"mtime":1615982344537,"results":"83","hashOfConfig":"45"},{"size":4079,"mtime":1616846183984,"results":"84","hashOfConfig":"45"},{"size":8937,"mtime":1617194062427,"results":"85","hashOfConfig":"45"},{"size":925,"mtime":1617212230385,"results":"86","hashOfConfig":"45"},{"size":3670,"mtime":1617566564403,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"nz9s2i",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"90"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"90"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"90"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"90"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"90"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"90"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"171"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\EditPresentation.js",[],["192","193"],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SlideDetail.js",[],["194","195"],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SingleSlide.js",[],"C:\\ReactJS\\uet-project\\src\\util\\APIUtils.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\slideSlice.js",[],"C:\\ReactJS\\uet-project\\src\\index.js",[],"C:\\ReactJS\\uet-project\\src\\app\\App.js",["196"],"import { Layout, notification } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Redirect,\n  Route,\n  Switch,\n  useHistory,\n  withRouter,\n} from \"react-router-dom\";\nimport AppHeader from \"../common/AppHeader\";\nimport { ACCESS_TOKEN } from \"../constants\";\nimport { getCurrentUser } from \"../util/APIUtils\";\nimport LoadingIndicator from \"./../common/LoadingIndicator\";\nimport NotFound from \"./../common/NotFound\";\nimport PrivateRoute from \"./../common/PrivateRoute\";\nimport \"./App.css\";\nimport PublicRoute from \"../common/PublicRoute\";\n\nconst { Content } = Layout;\n\nconst Home = React.lazy(() => import(\"pages/landing/Home\"));\nconst Audience = React.lazy(() => import(\"pages/Audience/index\"));\nconst Host = React.lazy(() => import(\"pages/Host/index\"));\n\nconst Presentations = React.lazy(() =>\n  import(\"pages/presentation/Presentations\")\n);\nconst Questions = React.lazy(() => import(\"pages/question/Questions\"));\n\nconst Login = React.lazy(() => import(\"user/login/Login\"));\nconst Signup = React.lazy(() => import(\"user/signup/Signup\"));\nconst Profile = React.lazy(() => import(\"user/profile/Profile\"));\n\nconst App = (props) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const history = useHistory();\n\n  notification.config({\n    placement: \"topRight\",\n    top: 70,\n    duration: 3,\n  });\n\n  function loadCurrentUser() {\n    setIsLoading(true);\n    getCurrentUser()\n      .then((response) => {\n        setCurrentUser(response);\n        // console.log(response);\n        setIsAuthenticated(true);\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        setIsLoading(false);\n      });\n  }\n\n  function handleLogout(\n    redirectTo = \"/\",\n    notificationType = \"success\",\n    description = \"You're successfully logged out.\"\n  ) {\n    history.push(\"/\");\n\n    localStorage.removeItem(ACCESS_TOKEN);\n\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n\n    notification[notificationType]({\n      message: \"Viedu App\",\n      description: description,\n    });\n  }\n\n  function handleLogin() {\n    notification.success({\n      message: \"Viedu App\",\n      description: \"You're successfully logged in.\",\n    });\n    loadCurrentUser();\n\n    history.push(\"/\");\n  }\n\n  useEffect(() => {\n    loadCurrentUser();\n  }, []);\n\n  if (isLoading) {\n    return <LoadingIndicator />;\n  }\n\n  return (\n    <Layout className=\"app-container\">\n      <AppHeader\n        isAuthenticated={isAuthenticated}\n        currentUser={currentUser}\n        onLogout={handleLogout}\n      />\n      <Content className=\"app-content\">\n        <div className=\"container\">\n          <Switch>\n            {isAuthenticated && <Redirect exact from=\"/\" to=\"/presentations\" />}\n            <PublicRoute\n              restricted={false}\n              path=\"/\"\n              component={Home}\n              exact\n              authenticated={isAuthenticated}\n            />\n            <PublicRoute\n              exact\n              restricted={true}\n              path=\"/login\"\n              authenticated={isAuthenticated}\n              component={(props) =>\n                !isAuthenticated ? (\n                  <Login onLogin={handleLogin} {...props} />\n                ) : null\n              }\n            />\n            <Route exac path=\"/signup\" component={Signup}></Route>\n            <Route\n              path=\"/users/:username\"\n              render={(props) => (\n                <Profile\n                  isAuthenticated={isAuthenticated}\n                  currentUser={currentUser}\n                  {...props}\n                />\n              )}\n            />\n            {/* <PrivateRoute\n              authenticated={isAuthenticated}\n              path=\"/presentations\"\n              component={Presentations}\n              handleLogout={handleLogout}\n            />\n            <PrivateRoute\n              authenticated={isAuthenticated}\n              path=\"/questions\"\n              component={Questions}\n              handleLogout={handleLogout}\n            /> */}\n            <Route\n              path=\"/presentations\"\n              component={Presentations}\n              handleLogout={handleLogout}\n            />\n            <Route\n              path=\"/questions\"\n              component={Questions}\n              handleLogout={handleLogout}\n            />\n            <Route path=\"/play\" component={Host} />\n            <Route path=\"/audience\" component={Audience} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default withRouter(App);\n","C:\\ReactJS\\uet-project\\src\\common\\LoadingIndicator.js",[],"C:\\ReactJS\\uet-project\\src\\common\\NotFound.js",[],"C:\\ReactJS\\uet-project\\src\\common\\PublicRoute.js",[],"C:\\ReactJS\\uet-project\\src\\common\\PrivateRoute.js",[],"C:\\ReactJS\\uet-project\\src\\common\\AppHeader.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\landing\\Home.js",["197"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nHome.propTypes = {};\r\n\r\nfunction Home(props) {\r\n  return (\r\n    <div>\r\n      <h2>VIEDU APP HOME</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\ReactJS\\uet-project\\src\\user\\profile\\Profile.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\Presentations.js",[],"C:\\ReactJS\\uet-project\\src\\store\\store.js",[],["198","199"],"C:\\ReactJS\\uet-project\\src\\constants\\index.js",[],"C:\\ReactJS\\uet-project\\src\\common\\AppSider.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\question\\QuestionList.js",[],"C:\\ReactJS\\uet-project\\src\\util\\Helpers.js",[],["200","201"],"C:\\ReactJS\\uet-project\\src\\pages\\question\\Questions.js",["202","203"],"import {\r\n  Button,\r\n  Col,\r\n  Form,\r\n  Modal,\r\n  notification,\r\n  Row,\r\n  Select,\r\n  Space,\r\n  PageHeader,\r\n} from \"antd\";\r\nimport React from \"react\";\r\nimport {\r\n  Route,\r\n  Switch,\r\n  useHistory,\r\n  useRouteMatch,\r\n  withRouter,\r\n} from \"react-router-dom\";\r\nimport AppSider from \"../../common/AppSider\";\r\nimport NotFound from \"../../common/NotFound\";\r\nimport { createQuestion } from \"../../util/APIUtils\";\r\nimport EditQuestion from \"./EditQuestion\";\r\nimport QuestionList from \"./QuestionList\";\r\nimport PrivateRoute from \"./../../common/PrivateRoute\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst routes = [\r\n  {\r\n    path: \"/\",\r\n    breadcrumbName: \"Home\",\r\n  },\r\n  {\r\n    path: \"/questions\",\r\n    breadcrumbName: \"Question List\",\r\n  },\r\n];\r\n\r\nconst Questions = (props) => {\r\n  let match = useRouteMatch();\r\n  // console.log({ match });\r\n\r\n  const [visible, setVisible] = React.useState(false);\r\n  const [confirmLoading, setConfirmLoading] = React.useState(false);\r\n\r\n  const [form] = Form.useForm();\r\n  const [description, setDescription] = React.useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const showModal = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const handleSubmit = (values) => {\r\n    let answersField;\r\n    if (values.questionType === \"QUESTION_TRUE_FALSE\") {\r\n      answersField = { answers: [{ text: \"TRUE\" }, { text: \"FALSE\" }] };\r\n      values = { ...values, ...answersField };\r\n    }\r\n\r\n    if (values.questionType === \"QUESTION_INPUT_ANSWER\") {\r\n      answersField = {\r\n        answers: [\r\n          { text: \"\", correct: true },\r\n          { text: \"\", correct: true },\r\n        ],\r\n      };\r\n      values = { ...values, ...answersField };\r\n    }\r\n\r\n    const newQuestion = Object.assign({}, values);\r\n\r\n    setConfirmLoading(true);\r\n    createQuestion(newQuestion)\r\n      .then((response) => {\r\n        notification.success({\r\n          message: \"Viedu App\",\r\n          description: \"Created new question!\",\r\n        });\r\n        history.push(`${match.url}/${response.id}`);\r\n      })\r\n      .catch((error) => {\r\n        notification.error({\r\n          message: \"Viedu App\",\r\n          description: error.message || \"Error\",\r\n        });\r\n      });\r\n    setVisible(false);\r\n    setConfirmLoading(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setVisible(false);\r\n    form.resetFields();\r\n  };\r\n\r\n  function handleChange(value) {\r\n    // console.log(`selected ${value}`);\r\n    switch (value) {\r\n      case \"QUESTION_CHOICE_ANSWER\":\r\n        setDescription(\r\n          \"Gives players several answer alternatives to choose from \"\r\n        );\r\n        break;\r\n      case \"QUESTION_TRUE_FALSE\":\r\n        setDescription(\"Let players decided if the statement is true or false\");\r\n        break;\r\n      case \"QUESTION_INPUT_ANSWER\":\r\n        setDescription(\"Let players input a answer\");\r\n        break;\r\n\r\n      default:\r\n        setDescription(\"\");\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Switch>\r\n      <Route\r\n        exact\r\n        path={match.path}\r\n        render={() => (\r\n          <AppSider>\r\n            <PageHeader\r\n              title=\"My questions\"\r\n              breadcrumb={{ routes }}\r\n              subTitle=\"\"\r\n            />\r\n            <Row>\r\n              <Col span={6}>\r\n                <Space>\r\n                  <Button type=\"primary\" onClick={showModal}>\r\n                    New Question\r\n                  </Button>\r\n                  <Modal\r\n                    title=\"New question\"\r\n                    visible={visible}\r\n                    onOk={form.submit}\r\n                    confirmLoading={confirmLoading}\r\n                    onCancel={handleCancel}\r\n                    okText=\"Create\"\r\n                  >\r\n                    <Form form={form} onFinish={handleSubmit}>\r\n                      <Form.Item\r\n                        name=\"questionType\"\r\n                        label=\"Question Type\"\r\n                        rules={[{ required: true }]}\r\n                      >\r\n                        <Select\r\n                          defaultActiveFirstOption\r\n                          style={{ width: 120 }}\r\n                          onChange={handleChange}\r\n                        >\r\n                          <Option value=\"QUESTION_CHOICE_ANSWER\">Quiz</Option>\r\n                          <Option value=\"QUESTION_TRUE_FALSE\">\r\n                            True or False\r\n                          </Option>\r\n                          <Option value=\"QUESTION_INPUT_ANSWER\">\r\n                            Input answer\r\n                          </Option>\r\n                        </Select>\r\n                      </Form.Item>\r\n                    </Form>\r\n                    <p>{description}</p>\r\n                  </Modal>\r\n                </Space>\r\n              </Col>\r\n              <Col span={18}></Col>\r\n            </Row>\r\n            <br />\r\n            <QuestionList />\r\n          </AppSider>\r\n        )}\r\n      />\r\n      <Route\r\n        authenticated\r\n        path={`${match.path}/:questionId/edit`}\r\n        component={EditQuestion}\r\n      />\r\n      <Route\r\n        authenticated\r\n        path={`${match.path}/:questionId`}\r\n        component={EditQuestion}\r\n      />\r\n      <Route component={NotFound} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Questions;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\PresentationList.js",[],"C:\\ReactJS\\uet-project\\src\\util\\score.js",[],"C:\\ReactJS\\uet-project\\src\\user\\login\\Login.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\question\\EditQuestion.js",["204"],"C:\\ReactJS\\uet-project\\src\\user\\signup\\Signup.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Lobby\\index.jsx",["205"],"import { Button, message, Tooltip } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport SockJS from \"sockjs-client\";\r\nimport Stomp from \"stompjs\";\r\nimport { WS_BASE_URL } from \"constants/index\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { currentGame } from \"./../../hostSlice\";\r\nimport { updateGame } from \"util/APIUtils\";\r\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\r\nimport { FullscreenExitOutlined, FullscreenOutlined } from \"@ant-design/icons\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ToolBar = styled.div`\r\n  display: flex;\r\n  flex-direction: row-reverse;\r\n  padding: 10px;\r\n`;\r\n\r\nLobby.propTypes = {};\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction Lobby(props) {\r\n  //get query params\r\n  let query = useQuery();\r\n  const quizId = query.get(\"quizId\");\r\n\r\n  const dispatch = useDispatch();\r\n  const games = useSelector((state) => state.games);\r\n  const game = games.current;\r\n\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  const handle = useFullScreenHandle();\r\n\r\n  const [playersJoined, setPlayersJoined] = useState([]);\r\n\r\n  var stompClient = null;\r\n\r\n  function connect() {\r\n    let serverUrl = WS_BASE_URL;\r\n    let ws = new SockJS(serverUrl);\r\n    stompClient = Stomp.over(ws);\r\n\r\n    stompClient.connect({}, onConnected, onError);\r\n  }\r\n\r\n  function onConnected() {\r\n    // update game to server\r\n    updateGame({ ...game, gameStatus: \"GOING_ON\" })\r\n      .then((res) => dispatch(currentGame(res)))\r\n      .catch((error) => console.log(error.message));\r\n\r\n    // Subscribe to the Game\r\n    stompClient.subscribe(`/quiz/${game.pin}`, onMessageReceived);\r\n\r\n    // Tell name of host person to the server\r\n    stompClient.send(\r\n      `/app/game.hostGame/${game.pin}`,\r\n      {},\r\n      JSON.stringify({\r\n        sender: game.hostedBy,\r\n        type: \"HOST\",\r\n        content: game.title,\r\n      })\r\n    );\r\n  }\r\n\r\n  function onError(error) {\r\n    message.error(\r\n      \"Could not connect to server. Please refresh this page to try again!\"\r\n    );\r\n  }\r\n\r\n  function onMessageReceived(payload) {\r\n    var receivedMessage = JSON.parse(payload.body);\r\n\r\n    if (receivedMessage.type === \"JOIN\") {\r\n      setPlayersJoined((playersJoined) => [\r\n        ...playersJoined,\r\n        {\r\n          nickname: receivedMessage.sender,\r\n          point: 0,\r\n        },\r\n      ]);\r\n    }\r\n\r\n    if (receivedMessage.type === \"LEAVE\") {\r\n      setPlayersJoined(\r\n        playersJoined.filter(\r\n          (player) => player.nickname !== receivedMessage.sender\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  function handleStart() {\r\n    history.push(`${location.state.rootPath}/ingame?quizId=${quizId}`);\r\n  }\r\n\r\n  useEffect(() => {\r\n    connect();\r\n\r\n    return () => {\r\n      if (stompClient !== null) {\r\n        stompClient.disconnect();\r\n      }\r\n      // updateGame({ ...game, players: playersJoined })\r\n      //   .then((res) => {})\r\n      //   .catch((error) => console.log(error.message));\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ minHeight: \"100vh\" }}>\r\n      <FullScreen handle={handle}>\r\n        <div\r\n          style={{\r\n            backgroundColor: \"white\",\r\n            display: \"flex\",\r\n            flex: 1,\r\n            height: \"100%\",\r\n            flexDirection: \"column\",\r\n          }}\r\n        >\r\n          <ToolBar>\r\n            {handle.active ? (\r\n              <Tooltip placement=\"bottomRight\" title=\"Exit\">\r\n                <Button\r\n                  onClick={handle.exit}\r\n                  icon={<FullscreenExitOutlined />}\r\n                />\r\n              </Tooltip>\r\n            ) : (\r\n              <Tooltip placement=\"bottomRight\" title=\"Fullscreen\">\r\n                <Button onClick={handle.enter} icon={<FullscreenOutlined />} />\r\n              </Tooltip>\r\n            )}\r\n          </ToolBar>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              padding: 20,\r\n            }}\r\n          >\r\n            <Button type=\"primary\" onClick={handleStart}>\r\n              Start\r\n            </Button>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"space-around\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <span>\r\n              Join at <b>viedu.live/audience</b> with PIN: <h1>{game.pin}</h1>\r\n            </span>\r\n            <div>\r\n              Number of players: <h1>{playersJoined.length}</h1>\r\n            </div>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              padding: 10,\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <BoardName list={playersJoined} />\r\n          </div>\r\n        </div>\r\n      </FullScreen>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction BoardName(props) {\r\n  const { list } = props;\r\n  return (\r\n    <div>\r\n      {list\r\n        ? list.map((player, index) => (\r\n            <span key={index}>\r\n              <h3>{player.nickname} </h3>\r\n            </span>\r\n          ))\r\n        : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Lobby;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Main\\index.jsx",["206"],"import { Button, Form, Input } from \"antd\";\r\nimport React, { useEffect } from \"react\";\r\nimport { createGame } from \"util/APIUtils\";\r\nimport { useHistory, useLocation, useRouteMatch } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { currentGame } from \"./../../hostSlice\";\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction Main(props) {\r\n  const match = useRouteMatch();\r\n  const [form] = Form.useForm();\r\n  const history = useHistory();\r\n\r\n  let query = useQuery();\r\n  const quizId = query.get(\"quizId\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  async function handleSubmit(values) {\r\n    const gameData = Object.assign({}, values);\r\n    // console.log(log);\r\n\r\n    await createGame(gameData)\r\n      .then((response) => {\r\n        dispatch(currentGame(response));\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    history.push(`${match.url}/lobby?quizId=${quizId}`, {\r\n      rootPath: match.url,\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({\r\n      presentationId: quizId,\r\n      gameType: \"LIVE\",\r\n    });\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <Form style={{ width: 350 }} form={form} onFinish={handleSubmit}>\r\n          <Form.Item name=\"gameType\">\r\n            <Input hidden />\r\n          </Form.Item>\r\n          <Form.Item name=\"presentationId\">\r\n            <Input hidden />\r\n          </Form.Item>\r\n          <Form.Item name=\"title\">\r\n            <Input placeholder=\"Title\" />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Button htmlType=\"submit\">Create Room</Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n",["207","208"],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\index.jsx",[],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\InGame\\index.jsx",["209","210","211"],"import {\r\n  CheckOutlined,\r\n  CloseOutlined,\r\n  FullscreenExitOutlined,\r\n  FullscreenOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Button, Col, message, Row, Tooltip, Typography } from \"antd\";\r\nimport { WS_BASE_URL } from \"constants/index\";\r\nimport Delayed from \"pages/Host/Delayed\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SockJS from \"sockjs-client\";\r\nimport Stomp from \"stompjs\";\r\nimport styled from \"styled-components\";\r\nimport { getPresentation } from \"util/APIUtils\";\r\nimport * as QuestionType from \"util/QuestionType\";\r\nimport CountdownTimer from \"./../../CountdownTimer\";\r\nimport ProgressBar from \"./../../ProgressBar\";\r\nimport ScoreBoard from \"../ScoreBoard\";\r\nimport { currentGame, updateGameStatus } from \"pages/Host/hostSlice\";\r\n\r\nconst ToolBar = styled.div`\r\n  display: flex;\r\n  flex-direction: row-reverse;\r\n  padding: 10px;\r\n`;\r\n\r\nconst CenterDiv = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst OptionBox = styled.div`\r\n  height: 50px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  color: white;\r\n  font-size: 15;\r\n  font-weight: bold;\r\n  padding: 10px;\r\n  border: 1px solid black;\r\n  border-radius: 8px;\r\n  margin: 5px;\r\n`;\r\n\r\nInGame.propTypes = {};\r\n\r\nvar stompClient = null;\r\n\r\nconst answerOptions = [\r\n  { icon: \"A\", color: \"red\" },\r\n  { icon: \"B\", color: \"blue\" },\r\n  { icon: \"C\", color: \"orange\" },\r\n  { icon: \"D\", color: \"green\" },\r\n];\r\n\r\nfunction InGame(props) {\r\n  const history = useHistory();\r\n  const games = useSelector((state) => state.games);\r\n  const game = games.current;\r\n  const [presentation, setPresentation] = useState({});\r\n  const [question, setQuestion] = useState({ data: {}, index: -1 });\r\n  const [displayResult, setDisplayResult] = useState(false);\r\n  const [scoreBoard, setScoreBoard] = useState({ display: false, list: [] });\r\n\r\n  const dispatch = useDispatch();\r\n  const handle = useFullScreenHandle();\r\n\r\n  const { presentationId } = game;\r\n\r\n  // const rendered = useRef(1);\r\n  // useEffect(() => {\r\n  //   rendered.current = rendered.current + 1;\r\n  // });\r\n  // ];\r\n\r\n  function connect() {\r\n    let serverUrl = WS_BASE_URL;\r\n    let ws = new SockJS(serverUrl);\r\n    stompClient = Stomp.over(ws);\r\n\r\n    stompClient.connect({}, onConnected, onError);\r\n  }\r\n\r\n  function disconnect() {\r\n    if (stompClient !== null) stompClient.disconnect();\r\n  }\r\n\r\n  function onConnected() {\r\n    // Subscribe to the Game\r\n    stompClient.subscribe(`/quiz/${game.pin}`, onMessageReceived);\r\n  }\r\n\r\n  function onError(error) {\r\n    message.error(\r\n      \"Could not connect to server. Please refresh this page to try again!\"\r\n    );\r\n  }\r\n\r\n  function onMessageReceived(payload) {\r\n    var receivedMessage = JSON.parse(payload.body);\r\n\r\n    if (receivedMessage.type === \"END\") {\r\n      dispatch(updateGameStatus({ gameStatus: \"FINISHED\" }));\r\n    }\r\n\r\n    if (receivedMessage.type === \"SCORE_BOARD\") {\r\n      let listPlayer = JSON.parse(receivedMessage.content);\r\n      setScoreBoard((scoreBoard) => ({ ...scoreBoard, list: listPlayer }));\r\n      dispatch(currentGame({ ...game, players: listPlayer }));\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    //re-connect\r\n    connect();\r\n\r\n    // get list of questions\r\n    const fetch = async () => {\r\n      await getPresentation(presentationId)\r\n        .then((res) => {\r\n          if (mounted) {\r\n            setPresentation(res);\r\n          }\r\n        })\r\n        .catch((error) => console.log(error));\r\n    };\r\n\r\n    fetch();\r\n\r\n    return () => {\r\n      mounted = false;\r\n      stompClient.send(\r\n        `/app/game.endGame/${game.pin}`,\r\n        {},\r\n        JSON.stringify({\r\n          sender: game.hostedBy,\r\n          type: \"END\",\r\n          content: \"Host end game\",\r\n        })\r\n      );\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (presentation.questionList)\r\n      setQuestion({\r\n        data: presentation.questionList[0],\r\n        index: 0,\r\n      });\r\n    else {\r\n      console.log(\"Presentation has been loaded yet\");\r\n    }\r\n  }, [presentation]);\r\n\r\n  useEffect(() => {\r\n    question.index >= 0\r\n      ? setTimeout(() => {\r\n          // allow players to answer\r\n          sendQuestion();\r\n          // console.log(presentation);\r\n          let count = question.data.seconds;\r\n          const timeAnswer = setInterval(() => {\r\n            console.log(count);\r\n            if (count === 0) {\r\n              console.log(\"Time up\");\r\n              clearInterval(timeAnswer);\r\n              //skip\r\n              sendSkip();\r\n            }\r\n            count--;\r\n          }, 1000);\r\n        }, 5000)\r\n      : console.log(\"No question is loaded\");\r\n\r\n    return () => {\r\n      setDisplayResult(false);\r\n    };\r\n  }, [question]);\r\n\r\n  const handleNext = () => {\r\n    if (!scoreBoard.display) {\r\n      // setQuestion((question) => ({ ...question, data: {} }));\r\n\r\n      stompClient.send(\r\n        `/app/game.getScoreBoard/${game.pin}`,\r\n        {},\r\n        JSON.stringify({\r\n          sender: game.hostedBy,\r\n          type: \"SCORE_BOARD\",\r\n          content: \"Get score board\",\r\n        })\r\n      );\r\n\r\n      setScoreBoard((scoreBoard) => ({ ...scoreBoard, display: true }));\r\n    } else {\r\n      setScoreBoard((scoreBoard) => ({ ...scoreBoard, display: false }));\r\n\r\n      if (question.index < presentation.questionList.length - 1) {\r\n        setQuestion((question) => ({\r\n          data: presentation.questionList[question.index + 1],\r\n          index: question.index + 1,\r\n        }));\r\n      } else {\r\n        // handle End\r\n        history.replace(\"/\");\r\n      }\r\n    }\r\n\r\n    console.log(scoreBoard);\r\n  };\r\n\r\n  function sendSkip() {\r\n    stompClient.send(\r\n      `/app/game.skipLive/${game.pin}`,\r\n      {},\r\n      JSON.stringify({\r\n        sender: game.hostedBy,\r\n        type: \"SKIP\",\r\n        content: question.data.id,\r\n      })\r\n    );\r\n    setDisplayResult(true);\r\n  }\r\n\r\n  async function sendQuestion() {\r\n    let sendObject = JSON.parse(JSON.stringify(question.data));\r\n\r\n    if (sendObject.questionType === QuestionType.QUESTION_INPUT_ANSWER)\r\n      delete sendObject.answers;\r\n    else sendObject.answers.map((answer) => delete answer.correct);\r\n\r\n    let sendContent = JSON.stringify(sendObject);\r\n\r\n    stompClient.send(\r\n      `/app/game.sendQuestion/${game.pin}`,\r\n      {},\r\n      JSON.stringify({\r\n        sender: game.hostedBy,\r\n        type: \"SEND_QUESTION\",\r\n        content: sendContent,\r\n      })\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <FullScreen handle={handle}>\r\n        <div\r\n          style={{\r\n            backgroundColor: \"white\",\r\n            display: \"flex\",\r\n            flex: 1,\r\n            height: \"100%\",\r\n            flexDirection: \"column\",\r\n          }}\r\n        >\r\n          <ToolBar>\r\n            {handle.active ? (\r\n              <Tooltip placement=\"bottomRight\" title=\"Exit\">\r\n                <Button\r\n                  onClick={handle.exit}\r\n                  icon={<FullscreenExitOutlined />}\r\n                />\r\n              </Tooltip>\r\n            ) : (\r\n              <Tooltip placement=\"bottomRight\" title=\"Fullscreen\">\r\n                <Button onClick={handle.enter} icon={<FullscreenOutlined />} />\r\n              </Tooltip>\r\n            )}\r\n          </ToolBar>\r\n          {presentation.questionList ? (\r\n            <>\r\n              <Row style={{ backgroundColor: \"Background\" }}>\r\n                <Col xl={4}>\r\n                  <CenterDiv>\r\n                    <Typography.Text strong style={{ fontSize: 25 }}>\r\n                      Question {question.index + 1} of{\" \"}\r\n                      {presentation.questionList.length}\r\n                    </Typography.Text>\r\n                  </CenterDiv>\r\n                </Col>\r\n                <Col xl={16}>\r\n                  <CenterDiv>\r\n                    <Typography.Text strong style={{ fontSize: 25 }}>\r\n                      {scoreBoard.display === false && question.data.title\r\n                        ? question.data.title\r\n                        : \"\"}\r\n                    </Typography.Text>\r\n                  </CenterDiv>\r\n                </Col>\r\n                <Col xl={4}>\r\n                  <CenterDiv\r\n                    style={{ justifyContent: \"flex-end\", padding: 10 }}\r\n                  >\r\n                    <Button type=\"primary\" onClick={() => handleNext()}>\r\n                      {question.index < presentation.questionList.length - 1\r\n                        ? \"Next\"\r\n                        : \"End\"}\r\n                    </Button>\r\n                  </CenterDiv>\r\n                </Col>\r\n              </Row>\r\n              {scoreBoard.display === true ? (\r\n                <ScoreBoard list={scoreBoard.list}></ScoreBoard>\r\n              ) : (\r\n                <>\r\n                  {question.data.id && (\r\n                    <div>\r\n                      <CenterDiv>\r\n                        <ProgressBar time={5000} id={question.data.id} />\r\n                      </CenterDiv>\r\n\r\n                      <Delayed waitBeforeShow={5000} id={question.data.id}>\r\n                        <Row>\r\n                          <Col span={5}>\r\n                            <CenterDiv>\r\n                              <CountdownTimer\r\n                                duration={question.data.seconds}\r\n                              />\r\n                            </CenterDiv>\r\n                          </Col>\r\n                          <Col span={14}></Col>\r\n                          <Col span={5}></Col>\r\n                        </Row>\r\n                        <Row>\r\n                          {question.data.answers &&\r\n                          (question.data.questionType ===\r\n                            QuestionType.QUESTION_CHOICE_ANSWER ||\r\n                            question.data.questionType ===\r\n                              QuestionType.QUESTION_TRUE_FALSE)\r\n                            ? question.data.answers.map((a, index) => (\r\n                                <Col key={index} span={12}>\r\n                                  <OptionBox\r\n                                    style={{\r\n                                      justifyContent: displayResult\r\n                                        ? \"space-between\"\r\n                                        : \"flex-start\",\r\n                                      backgroundColor:\r\n                                        answerOptions[index].color,\r\n                                      opacity: displayResult\r\n                                        ? !a.correct\r\n                                          ? 0.3\r\n                                          : 1\r\n                                        : 1,\r\n                                    }}\r\n                                  >\r\n                                    <span>\r\n                                      {answerOptions[index].icon}. {a.text}\r\n                                    </span>\r\n                                    {displayResult ? (\r\n                                      <span>\r\n                                        {a.correct ? (\r\n                                          <CheckOutlined />\r\n                                        ) : (\r\n                                          <CloseOutlined />\r\n                                        )}\r\n                                      </span>\r\n                                    ) : null}\r\n                                  </OptionBox>\r\n                                </Col>\r\n                              ))\r\n                            : null}\r\n                          {question.data.answers &&\r\n                          question.data.questionType ===\r\n                            QuestionType.QUESTION_INPUT_ANSWER ? (\r\n                            <>\r\n                              {!displayResult && (\r\n                                <div>\r\n                                  Please input your answer in your device!\r\n                                </div>\r\n                              )}\r\n                              {displayResult &&\r\n                                question.data.answers.map((a, index) => (\r\n                                  <Col key={index} span={12}>\r\n                                    <OptionBox\r\n                                      style={{\r\n                                        justifyContent: \"space-between\",\r\n                                        backgroundColor:\r\n                                          answerOptions[index].color,\r\n                                      }}\r\n                                    >\r\n                                      <span>\r\n                                        {answerOptions[index].icon}. {a.text}\r\n                                      </span>\r\n\r\n                                      <span>\r\n                                        <CheckOutlined />\r\n                                      </span>\r\n                                    </OptionBox>\r\n                                  </Col>\r\n                                ))}\r\n                            </>\r\n                          ) : null}\r\n                        </Row>\r\n                      </Delayed>\r\n                    </div>\r\n                  )}\r\n                </>\r\n              )}\r\n            </>\r\n          ) : null}\r\n        </div>\r\n      </FullScreen>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InGame;\r\n",["212","213"],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\index.jsx",[],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Pin\\index.jsx",[],"C:\\ReactJS\\uet-project\\src\\reportWebVitals.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Name\\index.jsx",[],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\components\\InputPIN.jsx",["214","215"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Input, Tooltip } from \"antd\";\r\n\r\nInputPIN.propTypes = {};\r\n\r\nfunction InputPIN(props) {\r\n  const onChange = (e) => {\r\n    const { value } = e.target;\r\n    const reg = /^\\d*(\\d*)?$/;\r\n    if ((!isNaN(value) && reg.test(value)) || value === \"\") {\r\n      props.onChange(value);\r\n    }\r\n  };\r\n\r\n  const onBlur = () => {\r\n    const { onBlur } = props;\r\n    if (onBlur) {\r\n      onBlur();\r\n    }\r\n  };\r\n\r\n  return <Input {...props} onChange={onChange} onBlur={onBlur} />;\r\n}\r\n\r\nexport default InputPIN;\r\n",["216","217"],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\hostSlice.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\ProgressBar.js",["218"],"import React, { useEffect, useState } from \"react\";\r\nimport { Progress } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport { clearInterval } from \"stompjs\";\r\n\r\nProgressBar.propTypes = {\r\n  time: PropTypes.number.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n};\r\n\r\nfunction ProgressBar(props) {\r\n  const totalSecond = props.time;\r\n  const [percent, setPercent] = useState(99);\r\n\r\n  useEffect(() => {\r\n    const inter = setInterval(() => {\r\n      setPercent((percent) => (percent > 0 ? percent - 1 : 0));\r\n    }, totalSecond / 100);\r\n\r\n    return () => {\r\n      setPercent(99);\r\n      clearInterval(inter);\r\n    };\r\n  }, [props.id]);\r\n\r\n  return (\r\n    <>\r\n      {percent > 0 ? (\r\n        <Progress\r\n          showInfo={false}\r\n          strokeLinecap=\"square\"\r\n          percent={percent}\r\n        ></Progress>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ProgressBar;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\Delayed.js",["219"],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nDelayed.propTypes = {\r\n  waitBeforeShow: PropTypes.number.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n};\r\n\r\nfunction Delayed(props) {\r\n  const [hidden, setHidden] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    setTimeout(() => {\r\n      if (mounted) setHidden(false);\r\n    }, props.waitBeforeShow);\r\n\r\n    return () => {\r\n      mounted = false;\r\n      setHidden(true);\r\n    };\r\n  }, [props.id]);\r\n\r\n  return hidden ? <></> : props.children;\r\n}\r\n\r\nexport default Delayed;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\CountdownTimer.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\QuestionBankDrawer.js",[],["220","221"],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Instruction\\index.jsx",["222","223","224"],"import React, { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Button,\r\n  Input,\r\n  message,\r\n  Result,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  Typography,\r\n} from \"antd\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { WS_BASE_URL } from \"constants/index\";\r\nimport SockJS from \"sockjs-client\";\r\nimport Stomp from \"stompjs\";\r\nimport moment from \"moment\";\r\nimport * as QuestionType from \"util/QuestionType\";\r\nimport Checkbox from \"antd/lib/checkbox/Checkbox\";\r\nimport styled from \"styled-components\";\r\n\r\nInstruction.propTypes = {};\r\n\r\nconst CenterDiv = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst OptionBox = styled(Button)`\r\n  flex: 1;\r\n  height: 10vh;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  color: white;\r\n  font-size: 15;\r\n  font-weight: bold;\r\n  padding: 10px;\r\n  border: 1px solid black;\r\n  border-radius: 8px;\r\n  margin: 5px;\r\n`;\r\n\r\nvar stompClient = null;\r\nfunction Instruction(props) {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const { state } = location;\r\n\r\n  const [question, setQuestion] = useState(null);\r\n  const [screen, setScreen] = useState({ name: \"SC_ANSWER\", info: {} }); // Screen state: SC_ANSWER, SC_WAIT, SC_RESULT\r\n\r\n  const [optionSelected, setOptionSelected] = useState([]);\r\n\r\n  let startTime = useRef(null);\r\n\r\n  const onMessageReceived = useCallback((payload) => {\r\n    let receivedMessage = JSON.parse(payload.body);\r\n\r\n    if (receivedMessage.type === \"END\") {\r\n      history.replace(\"/audience\");\r\n    }\r\n\r\n    if (receivedMessage.type === \"SEND_QUESTION\") {\r\n      setScreen({ name: \"SC_ANSWER\", info: {} });\r\n\r\n      let messages = JSON.parse(receivedMessage.content);\r\n      setQuestion(messages);\r\n\r\n      startTime.current = moment();\r\n    }\r\n\r\n    if (receivedMessage.type === \"INTERACT\") {\r\n      let status = receivedMessage.content.substring(0, 1); // status: 1 => correct, 0 => incorrect\r\n      let point = receivedMessage.content.substring(1);\r\n      setScreen({\r\n        name: \"SC_RESULT\",\r\n        info: { status: status, title: point },\r\n        hidden: true,\r\n      });\r\n    }\r\n\r\n    if (receivedMessage.type === \"SKIP\") {\r\n      setScreen((screen) =>\r\n        screen.name === \"SC_RESULT\"\r\n          ? { ...screen, hidden: false }\r\n          : {\r\n              name: \"SC_HALFTIME\",\r\n              info: { status: 0, title: \"HALF TIME\" },\r\n              hidden: false,\r\n            }\r\n      );\r\n    }\r\n\r\n    if (receivedMessage.type === \"SCORE_BOARD\") {\r\n      setScreen((screen) => ({\r\n        name: \"SC_SCOREBOARD\",\r\n        info: { status: 1, title: \"SCOREBOARD SCOREBOARD SCOREBOARD\" },\r\n        hidden: false,\r\n      }));\r\n    }\r\n  }, []);\r\n\r\n  const onConnected = useCallback(() => {\r\n    stompClient.subscribe(`/quiz/${state.pin}`, onMessageReceived);\r\n    stompClient.subscribe(`/user/quiz/${state.pin}`, onMessageReceived);\r\n  }, [state.pin, onMessageReceived]);\r\n\r\n  const onError = useCallback(() => {\r\n    message.error(\r\n      \"Could not connect to server. Please refresh this page to try again!\"\r\n    );\r\n  }, []);\r\n\r\n  const connect = useCallback(() => {\r\n    let serverUrl = WS_BASE_URL;\r\n    let ws = new SockJS(serverUrl);\r\n    stompClient = Stomp.over(ws);\r\n\r\n    stompClient.connect({}, onConnected, onError);\r\n  }, [onConnected, onError]);\r\n\r\n  function disconnect() {\r\n    if (stompClient !== null) stompClient.disconnect();\r\n  }\r\n\r\n  function handleInteract(playerAnswer) {\r\n    if (playerAnswer !== null) {\r\n      stompClient.send(\r\n        `/app/game.sendResponse/${state.pin}`,\r\n        {\r\n          questionId: question.id,\r\n          responseTime: moment().diff(startTime.current, \"seconds\", true),\r\n        },\r\n        JSON.stringify({\r\n          sender: state.nickname,\r\n          type: \"INTERACT\",\r\n          content: playerAnswer,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    connect();\r\n\r\n    return () => {\r\n      disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const onCheckboxChange = (e) => {\r\n    if (e.target.checked === true) {\r\n      setOptionSelected((optionSelected) => [\r\n        ...optionSelected,\r\n        e.target.value,\r\n      ]);\r\n    } else {\r\n      setOptionSelected(\r\n        optionSelected.filter((option) => option !== e.target.value)\r\n      );\r\n    }\r\n    console.log(optionSelected);\r\n  };\r\n\r\n  const submitQuestionChoice = () => {\r\n    let playerSelected = optionSelected.join(); // join array to string\r\n    handleInteract(playerSelected);\r\n  };\r\n\r\n  const submitQuestionInput = (values) => {\r\n    let { playerInput } = values;\r\n    console.log(values);\r\n    handleInteract(playerInput);\r\n  };\r\n\r\n  const options = question\r\n    ? question.questionType === QuestionType.QUESTION_CHOICE_ANSWER\r\n      ? [\r\n          { icon: \"A\", color: \"red\" },\r\n          { icon: \"B\", color: \"blue\" },\r\n          { icon: \"C\", color: \"orange\" },\r\n          { icon: \"D\", color: \"green\" },\r\n        ]\r\n      : [\r\n          { icon: \"A\", color: \"red\" },\r\n          { icon: \"B\", color: \"blue\" },\r\n        ]\r\n    : [];\r\n\r\n  const buttonOptions = options.map((option, index) => (\r\n    <Col\r\n      span={12}\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <OptionBox\r\n        style={{\r\n          backgroundColor: option.color,\r\n        }}\r\n        key={index}\r\n        value={index}\r\n        onClick={(e) => handleInteract(e.currentTarget.value)}\r\n      >\r\n        {option.icon} {question.answers ? question.answers[index].text : \"\"}\r\n      </OptionBox>\r\n    </Col>\r\n  ));\r\n\r\n  const buttonMultiSelect = options.map((option, index) => (\r\n    <div key={index}>\r\n      <Checkbox value={index} onChange={onCheckboxChange}>\r\n        {option.icon} {question.answers ? question.answers[index].text : \"\"}\r\n      </Checkbox>\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      {screen.name === \"SC_ANSWER\" ? (\r\n        question !== null ? (\r\n          <div style={{ margin: 5 }}>\r\n            <Row style={{ backgroundColor: \"Background\" }}>\r\n              <Col xl={24}>\r\n                <CenterDiv>\r\n                  <Typography.Text strong style={{ fontSize: 25 }}>\r\n                    {question.title ? question.title : \"\"}\r\n                  </Typography.Text>\r\n                </CenterDiv>\r\n              </Col>\r\n            </Row>\r\n\r\n            {question.questionType === QuestionType.QUESTION_CHOICE_ANSWER ||\r\n            question.questionType === QuestionType.QUESTION_TRUE_FALSE ? (\r\n              question.multiSelect === true ? (\r\n                <>\r\n                  <Row>{buttonMultiSelect}</Row>\r\n                  <Row span={24}>\r\n                    <Button onClick={submitQuestionChoice}>Submit</Button>\r\n                  </Row>\r\n                </>\r\n              ) : (\r\n                <Row>{buttonOptions}</Row>\r\n              )\r\n            ) : (\r\n              <Form onFinish={submitQuestionInput}>\r\n                <Row>\r\n                  <Col span={12} offset={6}>\r\n                    <CenterDiv\r\n                      style={{ paddingTop: \"20px\", paddingBottom: \"20px\" }}\r\n                    >\r\n                      <Form.Item name=\"playerInput\">\r\n                        <Input placeholder=\"Input your answer\" />\r\n                      </Form.Item>\r\n                    </CenterDiv>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                  <Col span={8} offset={8}>\r\n                    <CenterDiv>\r\n                      <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                          Submit\r\n                        </Button>\r\n                      </Form.Item>\r\n                    </CenterDiv>\r\n                  </Col>\r\n                </Row>\r\n              </Form>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <Result\r\n            status=\"info\"\r\n            title=\"You can see your name at the podium\"\r\n            subTitle=\"Waiting for host to start game\"\r\n            extra={[]}\r\n          />\r\n        )\r\n      ) : null}\r\n      {!screen.hidden && screen.name === \"SC_RESULT\" ? (\r\n        <ResultView status={screen.info.status} title={screen.info.title} />\r\n      ) : null}\r\n      {screen.name === \"SC_HALFTIME\" ? (\r\n        <ResultView status={screen.info.status} title={screen.info.title} />\r\n      ) : null}\r\n      {screen.hidden && screen.name === \"SC_RESULT\" ? (\r\n        <Result status=\"success\" title=\"Waiting for the result\" extra={[]} />\r\n      ) : null}\r\n      {screen.name === \"SC_SCOREBOARD\" ? (\r\n        <ResultView status={screen.info.status} title={screen.info.title} />\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction ResultView(props) {\r\n  return (\r\n    <>\r\n      <Result\r\n        status={props.status === \"1\" ? \"success\" : \"error\"}\r\n        title={props.title}\r\n      ></Result>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Instruction;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\ScoreBoard\\index.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\question\\PicturesWall.js",["225","226"],{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","replacedBy":"230"},{"ruleId":"227","replacedBy":"231"},{"ruleId":"229","replacedBy":"232"},{"ruleId":"233","severity":1,"message":"234","line":15,"column":8,"nodeType":"235","messageId":"236","endLine":15,"endColumn":20},{"ruleId":"233","severity":1,"message":"237","line":2,"column":8,"nodeType":"235","messageId":"236","endLine":2,"endColumn":17},{"ruleId":"227","replacedBy":"238"},{"ruleId":"229","replacedBy":"239"},{"ruleId":"227","replacedBy":"240"},{"ruleId":"229","replacedBy":"241"},{"ruleId":"233","severity":1,"message":"242","line":18,"column":3,"nodeType":"235","messageId":"236","endLine":18,"endColumn":13},{"ruleId":"233","severity":1,"message":"234","line":25,"column":8,"nodeType":"235","messageId":"236","endLine":25,"endColumn":20},{"ruleId":"233","severity":1,"message":"243","line":27,"column":3,"nodeType":"235","messageId":"236","endLine":27,"endColumn":20},{"ruleId":"244","severity":1,"message":"245","line":116,"column":6,"nodeType":"246","endLine":116,"endColumn":8,"suggestions":"247"},{"ruleId":"233","severity":1,"message":"248","line":12,"column":7,"nodeType":"235","messageId":"236","endLine":12,"endColumn":13},{"ruleId":"227","replacedBy":"249"},{"ruleId":"229","replacedBy":"250"},{"ruleId":"233","severity":1,"message":"251","line":90,"column":12,"nodeType":"235","messageId":"236","endLine":90,"endColumn":22},{"ruleId":"244","severity":1,"message":"252","line":149,"column":6,"nodeType":"246","endLine":149,"endColumn":8,"suggestions":"253"},{"ruleId":"244","severity":1,"message":"254","line":185,"column":6,"nodeType":"246","endLine":185,"endColumn":16,"suggestions":"255"},{"ruleId":"227","replacedBy":"256"},{"ruleId":"229","replacedBy":"257"},{"ruleId":"233","severity":1,"message":"237","line":2,"column":8,"nodeType":"235","messageId":"236","endLine":2,"endColumn":17},{"ruleId":"233","severity":1,"message":"258","line":3,"column":17,"nodeType":"235","messageId":"236","endLine":3,"endColumn":24},{"ruleId":"227","replacedBy":"259"},{"ruleId":"229","replacedBy":"260"},{"ruleId":"244","severity":1,"message":"261","line":24,"column":6,"nodeType":"246","endLine":24,"endColumn":16,"suggestions":"262"},{"ruleId":"244","severity":1,"message":"263","line":22,"column":6,"nodeType":"246","endLine":22,"endColumn":16,"suggestions":"264"},{"ruleId":"227","replacedBy":"265"},{"ruleId":"229","replacedBy":"266"},{"ruleId":"233","severity":1,"message":"237","line":2,"column":8,"nodeType":"235","messageId":"236","endLine":2,"endColumn":17},{"ruleId":"244","severity":1,"message":"267","line":104,"column":6,"nodeType":"246","endLine":104,"endColumn":8,"suggestions":"268"},{"ruleId":"244","severity":1,"message":"269","line":152,"column":6,"nodeType":"246","endLine":152,"endColumn":8,"suggestions":"270"},{"ruleId":"233","severity":1,"message":"271","line":2,"column":34,"nodeType":"235","messageId":"236","endLine":2,"endColumn":38},{"ruleId":"233","severity":1,"message":"272","line":27,"column":7,"nodeType":"235","messageId":"236","endLine":27,"endColumn":17},"no-native-reassign",["273"],"no-negated-in-lhs",["274"],["273"],["274"],"no-unused-vars","'PrivateRoute' is defined but never used.","Identifier","unusedVar","'PropTypes' is defined but never used.",["273"],["274"],["273"],["274"],"'withRouter' is defined but never used.","'FileImageOutlined' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'connect' and 'stompClient'. Either include them or remove the dependency array.","ArrayExpression",["275"],"'layout' is assigned a value but never used.",["273"],["274"],"'disconnect' is defined but never used.","React Hook useEffect has missing dependencies: 'connect', 'game.hostedBy', 'game.pin', and 'presentationId'. Either include them or remove the dependency array.",["276"],"React Hook useEffect has missing dependencies: 'sendQuestion' and 'sendSkip'. Either include them or remove the dependency array.",["277"],["273"],["274"],"'Tooltip' is defined but never used.",["273"],["274"],"React Hook useEffect has a missing dependency: 'totalSecond'. Either include it or remove the dependency array.",["278"],"React Hook useEffect has a missing dependency: 'props.waitBeforeShow'. Either include it or remove the dependency array.",["279"],["273"],["274"],"React Hook useCallback has a missing dependency: 'history'. Either include it or remove the dependency array.",["280"],"React Hook useEffect has a missing dependency: 'connect'. Either include it or remove the dependency array.",["281"],"'Form' is defined but never used.","'UploadItem' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},"Update the dependencies array to be: [connect, stompClient]",{"range":"296","text":"297"},"Update the dependencies array to be: [connect, game.hostedBy, game.pin, presentationId]",{"range":"298","text":"299"},"Update the dependencies array to be: [question, sendQuestion, sendSkip]",{"range":"300","text":"301"},"Update the dependencies array to be: [props.id, totalSecond]",{"range":"302","text":"303"},"Update the dependencies array to be: [props.id, props.waitBeforeShow]",{"range":"304","text":"305"},"Update the dependencies array to be: [history]",{"range":"306","text":"307"},"Update the dependencies array to be: [connect]",{"range":"308","text":"309"},[3109,3111],"[connect, stompClient]",[3997,3999],"[connect, game.hostedBy, game.pin, presentationId]",[4919,4929],"[question, sendQuestion, sendSkip]",[630,640],"[props.id, totalSecond]",[503,513],"[props.id, props.waitBeforeShow]",[2783,2785],"[history]",[4036,4038],"[connect]"]