[{"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\EditPresentation.js":"1","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SlideDetail.js":"2","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SingleSlide.js":"3","C:\\ReactJS\\uet-project\\src\\util\\APIUtils.js":"4","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\slideSlice.js":"5","C:\\ReactJS\\uet-project\\src\\index.js":"6","C:\\ReactJS\\uet-project\\src\\app\\App.js":"7","C:\\ReactJS\\uet-project\\src\\common\\LoadingIndicator.js":"8","C:\\ReactJS\\uet-project\\src\\common\\NotFound.js":"9","C:\\ReactJS\\uet-project\\src\\common\\PublicRoute.js":"10","C:\\ReactJS\\uet-project\\src\\common\\PrivateRoute.js":"11","C:\\ReactJS\\uet-project\\src\\common\\AppHeader.js":"12","C:\\ReactJS\\uet-project\\src\\pages\\landing\\Home.js":"13","C:\\ReactJS\\uet-project\\src\\user\\profile\\Profile.js":"14","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\Presentations.js":"15","C:\\ReactJS\\uet-project\\src\\store\\store.js":"16","C:\\ReactJS\\uet-project\\src\\constants\\index.js":"17","C:\\ReactJS\\uet-project\\src\\common\\AppSider.js":"18","C:\\ReactJS\\uet-project\\src\\pages\\question\\QuestionList.js":"19","C:\\ReactJS\\uet-project\\src\\util\\Helpers.js":"20","C:\\ReactJS\\uet-project\\src\\pages\\question\\Questions.js":"21","C:\\ReactJS\\uet-project\\src\\pages\\presentation\\PresentationList.js":"22","C:\\ReactJS\\uet-project\\src\\util\\score.js":"23","C:\\ReactJS\\uet-project\\src\\user\\login\\Login.js":"24","C:\\ReactJS\\uet-project\\src\\pages\\question\\EditQuestion.js":"25","C:\\ReactJS\\uet-project\\src\\user\\signup\\Signup.js":"26","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Lobby\\index.jsx":"27","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Main\\index.jsx":"28","C:\\ReactJS\\uet-project\\src\\pages\\Host\\index.jsx":"29","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\InGame\\index.jsx":"30","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\index.jsx":"31","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Instruction\\index.jsx":"32","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Pin\\index.jsx":"33","C:\\ReactJS\\uet-project\\src\\reportWebVitals.js":"34","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Name\\index.jsx":"35","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\components\\InputPIN.jsx":"36","C:\\ReactJS\\uet-project\\src\\pages\\Host\\hostSlice.js":"37","C:\\ReactJS\\uet-project\\src\\pages\\Host\\ProgressBar.js":"38","C:\\ReactJS\\uet-project\\src\\pages\\Host\\Delayed.js":"39","C:\\ReactJS\\uet-project\\src\\pages\\Host\\CountdownTimer.js":"40"},{"size":9920,"mtime":1616048369247,"results":"41","hashOfConfig":"42"},{"size":5861,"mtime":1616048379680,"results":"43","hashOfConfig":"42"},{"size":1186,"mtime":1614737133513,"results":"44","hashOfConfig":"42"},{"size":5687,"mtime":1615274468373,"results":"45","hashOfConfig":"42"},{"size":1673,"mtime":1614756313704,"results":"46","hashOfConfig":"42"},{"size":805,"mtime":1616083517546,"results":"47","hashOfConfig":"42"},{"size":4666,"mtime":1616083731789,"results":"48","hashOfConfig":"42"},{"size":316,"mtime":1614672740653,"results":"49","hashOfConfig":"42"},{"size":427,"mtime":1614135413647,"results":"50","hashOfConfig":"42"},{"size":416,"mtime":1613854056924,"results":"51","hashOfConfig":"42"},{"size":491,"mtime":1613872121567,"results":"52","hashOfConfig":"42"},{"size":2548,"mtime":1615509419423,"results":"53","hashOfConfig":"42"},{"size":214,"mtime":1613855284951,"results":"54","hashOfConfig":"42"},{"size":3548,"mtime":1613728914519,"results":"55","hashOfConfig":"42"},{"size":3638,"mtime":1614568484413,"results":"56","hashOfConfig":"42"},{"size":282,"mtime":1616070090624,"results":"57","hashOfConfig":"42"},{"size":632,"mtime":1614857133775,"results":"58","hashOfConfig":"42"},{"size":1646,"mtime":1614134132919,"results":"59","hashOfConfig":"42"},{"size":3321,"mtime":1614046791482,"results":"60","hashOfConfig":"42"},{"size":972,"mtime":1613638260326,"results":"61","hashOfConfig":"42"},{"size":4978,"mtime":1616058379864,"results":"62","hashOfConfig":"42"},{"size":3604,"mtime":1614851422573,"results":"63","hashOfConfig":"42"},{"size":91,"mtime":1613900959638,"results":"64","hashOfConfig":"42"},{"size":2748,"mtime":1613854540474,"results":"65","hashOfConfig":"42"},{"size":9200,"mtime":1616058610377,"results":"66","hashOfConfig":"42"},{"size":10190,"mtime":1613468163614,"results":"67","hashOfConfig":"42"},{"size":5359,"mtime":1615828803418,"results":"68","hashOfConfig":"42"},{"size":1808,"mtime":1615845215478,"results":"69","hashOfConfig":"42"},{"size":636,"mtime":1615828422397,"results":"70","hashOfConfig":"42"},{"size":9863,"mtime":1615982309910,"results":"71","hashOfConfig":"42"},{"size":653,"mtime":1614904500217,"results":"72","hashOfConfig":"42"},{"size":5457,"mtime":1615901693561,"results":"73","hashOfConfig":"42"},{"size":1896,"mtime":1615844485104,"results":"74","hashOfConfig":"42"},{"size":362,"mtime":1606210735677,"results":"75","hashOfConfig":"42"},{"size":2389,"mtime":1615845355583,"results":"76","hashOfConfig":"42"},{"size":572,"mtime":1614909221751,"results":"77","hashOfConfig":"42"},{"size":435,"mtime":1615281184259,"results":"78","hashOfConfig":"42"},{"size":838,"mtime":1615979921535,"results":"79","hashOfConfig":"42"},{"size":532,"mtime":1615980421259,"results":"80","hashOfConfig":"42"},{"size":913,"mtime":1615982344537,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},"nz9s2i",{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"85"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"85"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"122"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"85"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"85"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\EditPresentation.js",["176"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Layout,\r\n  Modal,\r\n  Select,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Form,\r\n  Menu,\r\n  message,\r\n  Typography,\r\n} from \"antd\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { getPresentation, addToPresentation } from \"./../../util/APIUtils\";\r\n\r\nimport SingleSlide from \"./SingleSlide\";\r\nimport { updateSlide, deleteOneSlide, currentSlide } from \"./slideSlice\";\r\nimport SlideDetail from \"./SlideDetail\";\r\nimport \"./EditPresentation.css\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst { Content, Sider } = Layout;\r\nconst { Option } = Select;\r\n\r\nconst StyledButton = styled(Button)`\r\n  background: ${(props) => (props.primary ? \"dodgerblue\" : \"white\")};\r\n  color: ${(props) => (props.primary ? \"white\" : \"dodgerblue\")};\r\n  font-size: 1em;\r\n  margin: 1em;\r\n  padding: 0.25em 1em dodgerblue;\r\n  border-radius: 3px;\r\n`;\r\n\r\nconst StyledSider = styled(Sider)``;\r\n\r\nconst EditPresentation = () => {\r\n  const { presentationId } = useParams();\r\n  const [questions, setQuestions] = useState({ list: [], activeId: \"\" });\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  const [visible, setVisible] = useState(false); // visible for Modal Add question\r\n  const [confirmLoading, setConfirmLoading] = useState(false); // for loading when call api to create new question\r\n\r\n  const [form] = Form.useForm();\r\n  const [description, setDescription] = useState(\"\"); // description for type of question\r\n\r\n  const dispatch = useDispatch();\r\n  const slide = useSelector((state) => state.slides);\r\n\r\n  //When click a Slide in Sidebar\r\n  const onMenuItemClick = (clickItem) => {\r\n    const { key } = clickItem;\r\n\r\n    saveChange();\r\n\r\n    setQuestions({ ...questions, activeId: key });\r\n  };\r\n\r\n  function deleteSlide(questionId) {\r\n    // console.log(\"deleted: \" + questionId);\r\n    let { length } = questions.list;\r\n    if (length <= 1) {\r\n      message.warn(\"Presentation must have at least 1 question\");\r\n      return;\r\n    }\r\n\r\n    dispatch(deleteOneSlide({ slideId: questionId, id: presentationId })).then(\r\n      () => {\r\n        console.log(\"bla\");\r\n      }\r\n    );\r\n\r\n    let indexDelete; // indexDelete = index + 1 to avoid indexDelete equals 0 cause error\r\n    questions.list.find((e, index) =>\r\n      e.id === questions.activeId\r\n        ? (indexDelete = index + 1)\r\n        : (indexDelete = undefined)\r\n    );\r\n\r\n    --indexDelete; // to make \"indexDelete\" is index of its in array\r\n\r\n    let nextActiveId;\r\n    if (indexDelete === length - 1) {\r\n      //deleting last element\r\n      nextActiveId = questions.list[indexDelete - 1].id;\r\n    } else {\r\n      nextActiveId = questions.list[indexDelete + 1].id;\r\n    }\r\n\r\n    //duplicate list and delete a element from array\r\n    let newList = questions.list;\r\n    newList.splice(indexDelete, 1);\r\n\r\n    console.log(nextActiveId);\r\n    console.log(newList);\r\n\r\n    // dispatch(currentSlide(questions.list[indexPrev - 1]));\r\n    setQuestions({\r\n      list: newList,\r\n      activeId: nextActiveId,\r\n    });\r\n  }\r\n\r\n  function saveChange() {\r\n    let indexPrev;\r\n    questions.list.find((e, index) =>\r\n      e.id === questions.activeId\r\n        ? (indexPrev = ++index)\r\n        : (indexPrev = undefined)\r\n    );\r\n\r\n    questions.list[--indexPrev] = slide.current;\r\n\r\n    dispatch(updateSlide({ slide: slide.current, id: presentationId }));\r\n  }\r\n\r\n  //Show modal Add question\r\n  const showModal = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  // handle when Add new question\r\n  const handleSubmit = (values) => {\r\n    const typeOfQuestion = Object.assign({}, values);\r\n\r\n    setConfirmLoading(true);\r\n    addToPresentation(typeOfQuestion, presentationId)\r\n      .then((response) => {\r\n        setQuestions((questions) => ({\r\n          ...questions,\r\n          list: [...questions.list, response],\r\n          activeId: response.id,\r\n        }));\r\n        message.success(\"New question\");\r\n      })\r\n      .catch((error) => message.error(\"Error\"));\r\n    setVisible(false);\r\n    setConfirmLoading(false);\r\n  };\r\n\r\n  // handle when click button Cancel\r\n  const handleCancel = () => {\r\n    setVisible(false);\r\n    form.resetFields();\r\n  };\r\n\r\n  // handle when change type of question\r\n  function handleChange(value) {\r\n    switch (value) {\r\n      case \"QUESTION_CHOICE_ANSWER\":\r\n        setDescription(\r\n          \"Gives players several answer alternatives to choose from \"\r\n        );\r\n        break;\r\n      case \"QUESTION_TRUE_FALSE\":\r\n        setDescription(\"Let players decided if the statement is true or false\");\r\n        break;\r\n      case \"QUESTION_INPUT_ANSWER\":\r\n        setDescription(\"Let players input a answer\");\r\n        break;\r\n\r\n      default:\r\n        setDescription(\"\");\r\n        break;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    getPresentation(presentationId)\r\n      .then((response) => {\r\n        if (response.questionList) {\r\n          // case: Presentation has one or more questions => loading list of questions\r\n\r\n          if (mounted && response.questionList.length > 0) {\r\n            setTitle(response.title);\r\n            setQuestions((questions) => ({\r\n              ...questions,\r\n              list: response.questionList,\r\n              activeId: response.questionList[0].id,\r\n            }));\r\n\r\n            message.success(\"Completely loading!\");\r\n          }\r\n        } else {\r\n          // case: Presentation has no question => create a blank question choice answer\r\n          if (mounted) {\r\n            setTitle(response.title);\r\n\r\n            const firstQuestion = {\r\n              questionType: \"QUESTION_CHOICE_ANSWER\",\r\n              title: \"\",\r\n            };\r\n\r\n            addToPresentation(firstQuestion, presentationId)\r\n              .then((response) => {\r\n                // console.log(response);\r\n\r\n                setQuestions((questions) => ({\r\n                  ...questions,\r\n                  list: [...questions.list, response],\r\n                  activeId: response.id,\r\n                }));\r\n              })\r\n              .catch((error) => console.log(error));\r\n          }\r\n        }\r\n      })\r\n      .catch((error) => message.error(\"Error loading presentation\"));\r\n\r\n    return () => (mounted = false);\r\n  }, [presentationId]);\r\n\r\n  return (\r\n    <Layout>\r\n      <StyledSider width={\"15vw\"}>\r\n        <Row\r\n          style={{ marginTop: 5, marginBottom: 5 }}\r\n          type=\"flex\"\r\n          justify=\"space-around\"\r\n          align=\"middle\"\r\n        >\r\n          <Col offset={2} span={4}>\r\n            <Button onClick={() => window.history.back()}>Back</Button>\r\n          </Col>\r\n          <Col>\r\n            <StyledButton primary=\"true\" onClick={saveChange}>\r\n              Save\r\n            </StyledButton>\r\n          </Col>\r\n        </Row>\r\n        <Row type=\"flex\" justify=\"start\" align=\"middle\">\r\n          <Col offset={2} span={19}>\r\n            <Typography.Title\r\n              level={3}\r\n              editable={{ onChange: setTitle }}\r\n              ellipsis\r\n            >\r\n              {title}\r\n            </Typography.Title>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Menu defaultActiveFirst onSelect={onMenuItemClick}>\r\n          {questions.list.map((slide, index) => (\r\n            <Menu.Item\r\n              style={{\r\n                padding: 5,\r\n                height: \"17vh\",\r\n                flex: 1,\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\",\r\n                alignItems: \"stretch\",\r\n              }}\r\n              key={slide.id}\r\n            >\r\n              <div\r\n                style={{\r\n                  width: \"20%\",\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  justifyContent: \"space-between\",\r\n                  padding: \"0 5px\",\r\n                }}\r\n              >\r\n                <span>{index + 1}</span>\r\n              </div>\r\n              <div\r\n                style={{\r\n                  width: \"77%\",\r\n                }}\r\n              >\r\n                <SingleSlide\r\n                  text={slide.title}\r\n                  isActive={slide.id === questions.activeId}\r\n                />\r\n              </div>\r\n            </Menu.Item>\r\n          ))}\r\n        </Menu>\r\n\r\n        <Row type=\"flex\" justify=\"space-around\" align=\"middle\">\r\n          <Col>\r\n            <StyledButton primary=\"true\" onClick={showModal}>\r\n              Add question\r\n            </StyledButton>\r\n          </Col>\r\n        </Row>\r\n      </StyledSider>\r\n\r\n      <Modal\r\n        title=\"New question\"\r\n        visible={visible}\r\n        onOk={form.submit}\r\n        confirmLoading={confirmLoading}\r\n        onCancel={handleCancel}\r\n        okText=\"Create\"\r\n      >\r\n        <Form form={form} onFinish={handleSubmit}>\r\n          <Form.Item\r\n            name=\"questionType\"\r\n            label=\"Question Type\"\r\n            rules={[{ required: true }]}\r\n          >\r\n            <Select\r\n              defaultActiveFirstOption\r\n              style={{ width: 120 }}\r\n              onChange={handleChange}\r\n            >\r\n              <Option value=\"QUESTION_CHOICE_ANSWER\">Quiz</Option>\r\n              <Option value=\"QUESTION_TRUE_FALSE\">True or False</Option>\r\n              <Option value=\"QUESTION_INPUT_ANSWER\">Input answer</Option>\r\n            </Select>\r\n          </Form.Item>\r\n        </Form>\r\n        <p>{description}</p>\r\n      </Modal>\r\n      <Content\r\n        className=\"site-layout-background\"\r\n        style={{\r\n          padding: 24,\r\n          margin: 0,\r\n          background: \"whitesmoke\",\r\n        }}\r\n      >\r\n        {questions.list.length > 0 ? (\r\n          <SlideDetail\r\n            content={questions.list.find((e) => e.id === questions.activeId)}\r\n            deleteSlide={deleteSlide}\r\n          />\r\n        ) : null}\r\n      </Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default EditPresentation;\r\n",["177","178"],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SlideDetail.js",["179"],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\SingleSlide.js",[],["180","181"],"C:\\ReactJS\\uet-project\\src\\util\\APIUtils.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\slideSlice.js",[],"C:\\ReactJS\\uet-project\\src\\index.js",[],"C:\\ReactJS\\uet-project\\src\\app\\App.js",["182"],"C:\\ReactJS\\uet-project\\src\\common\\LoadingIndicator.js",[],"C:\\ReactJS\\uet-project\\src\\common\\NotFound.js",[],"C:\\ReactJS\\uet-project\\src\\common\\PublicRoute.js",[],"C:\\ReactJS\\uet-project\\src\\common\\PrivateRoute.js",[],"C:\\ReactJS\\uet-project\\src\\common\\AppHeader.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\landing\\Home.js",["183"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nHome.propTypes = {};\r\n\r\nfunction Home(props) {\r\n  return (\r\n    <div>\r\n      <h2>VIEDU APP HOME</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\ReactJS\\uet-project\\src\\user\\profile\\Profile.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\Presentations.js",[],"C:\\ReactJS\\uet-project\\src\\store\\store.js",[],"C:\\ReactJS\\uet-project\\src\\constants\\index.js",[],"C:\\ReactJS\\uet-project\\src\\common\\AppSider.js",[],["184","185"],"C:\\ReactJS\\uet-project\\src\\pages\\question\\QuestionList.js",[],["186","187"],"C:\\ReactJS\\uet-project\\src\\util\\Helpers.js",[],["188","189"],"C:\\ReactJS\\uet-project\\src\\pages\\question\\Questions.js",["190","191"],"C:\\ReactJS\\uet-project\\src\\pages\\presentation\\PresentationList.js",[],"C:\\ReactJS\\uet-project\\src\\util\\score.js",[],"C:\\ReactJS\\uet-project\\src\\user\\login\\Login.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\question\\EditQuestion.js",[],"C:\\ReactJS\\uet-project\\src\\user\\signup\\Signup.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Lobby\\index.jsx",["192"],"import { Button, message, Tooltip } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport SockJS from \"sockjs-client\";\r\nimport Stomp from \"stompjs\";\r\nimport { WS_BASE_URL } from \"constants/index\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { currentGame } from \"./../../hostSlice\";\r\nimport { updateGame } from \"util/APIUtils\";\r\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\r\nimport { FullscreenExitOutlined, FullscreenOutlined } from \"@ant-design/icons\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ToolBar = styled.div`\r\n  display: flex;\r\n  flex-direction: row-reverse;\r\n  padding: 10px;\r\n`;\r\n\r\nLobby.propTypes = {};\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction Lobby(props) {\r\n  //get query params\r\n  let query = useQuery();\r\n  const quizId = query.get(\"quizId\");\r\n\r\n  const dispatch = useDispatch();\r\n  const games = useSelector((state) => state.games);\r\n  const game = games.current;\r\n\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  const handle = useFullScreenHandle();\r\n\r\n  const [playersJoined, setPlayersJoined] = useState([]);\r\n\r\n  var stompClient = null;\r\n\r\n  function connect() {\r\n    let serverUrl = WS_BASE_URL;\r\n    let ws = new SockJS(serverUrl);\r\n    stompClient = Stomp.over(ws);\r\n\r\n    stompClient.connect({}, onConnected, onError);\r\n  }\r\n\r\n  function onConnected() {\r\n    // update game to server\r\n    updateGame({ ...game, gameStatus: \"GOING_ON\" })\r\n      .then((res) => dispatch(currentGame(res)))\r\n      .catch((error) => console.log(error.message));\r\n\r\n    // Subscribe to the Game\r\n    stompClient.subscribe(`/quiz/${game.pin}`, onMessageReceived);\r\n\r\n    // Tell name of host person to the server\r\n    stompClient.send(\r\n      `/app/game.hostGame/${game.pin}`,\r\n      {},\r\n      JSON.stringify({\r\n        sender: game.hostedBy,\r\n        type: \"HOST\",\r\n        content: game.title,\r\n      })\r\n    );\r\n  }\r\n\r\n  function onError(error) {\r\n    message.error(\r\n      \"Could not connect to server. Please refresh this page to try again!\"\r\n    );\r\n  }\r\n\r\n  function onMessageReceived(payload) {\r\n    var receivedMessage = JSON.parse(payload.body);\r\n\r\n    if (receivedMessage.type === \"JOIN\") {\r\n      setPlayersJoined((playersJoined) => [\r\n        ...playersJoined,\r\n        {\r\n          nickname: receivedMessage.sender,\r\n          point: 0,\r\n        },\r\n      ]);\r\n    }\r\n\r\n    if (receivedMessage.type === \"LEAVE\") {\r\n      setPlayersJoined(\r\n        playersJoined.filter(\r\n          (player) => player.nickname !== receivedMessage.sender\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  function handleStart() {\r\n    history.push(`${location.state.rootPath}/ingame?quizId=${quizId}`);\r\n  }\r\n\r\n  useEffect(() => {\r\n    connect();\r\n\r\n    return () => {\r\n      if (stompClient !== null) {\r\n        stompClient.disconnect();\r\n      }\r\n      // updateGame({ ...game, players: playersJoined })\r\n      //   .then((res) => {})\r\n      //   .catch((error) => console.log(error.message));\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ minHeight: \"100vh\" }}>\r\n      <FullScreen handle={handle}>\r\n        <div\r\n          style={{\r\n            backgroundColor: \"white\",\r\n            display: \"flex\",\r\n            flex: 1,\r\n            height: \"100%\",\r\n            flexDirection: \"column\",\r\n          }}\r\n        >\r\n          <ToolBar>\r\n            {handle.active ? (\r\n              <Tooltip placement=\"bottomRight\" title=\"Exit\">\r\n                <Button\r\n                  onClick={handle.exit}\r\n                  icon={<FullscreenExitOutlined />}\r\n                />\r\n              </Tooltip>\r\n            ) : (\r\n              <Tooltip placement=\"bottomRight\" title=\"Fullscreen\">\r\n                <Button onClick={handle.enter} icon={<FullscreenOutlined />} />\r\n              </Tooltip>\r\n            )}\r\n          </ToolBar>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              padding: 20,\r\n            }}\r\n          >\r\n            <Button type=\"primary\" onClick={handleStart}>\r\n              Start\r\n            </Button>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"space-around\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <span>\r\n              Join at <b>viedu.live/audience</b> with PIN: <h1>{game.pin}</h1>\r\n            </span>\r\n            <div>\r\n              Number of players: <h1>{playersJoined.length}</h1>\r\n            </div>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              padding: 10,\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <BoardName list={playersJoined} />\r\n          </div>\r\n        </div>\r\n      </FullScreen>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction BoardName(props) {\r\n  const { list } = props;\r\n  return (\r\n    <div>\r\n      {list\r\n        ? list.map((player, index) => (\r\n            <span key={index}>\r\n              <h3>{player.nickname} </h3>\r\n            </span>\r\n          ))\r\n        : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Lobby;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\Main\\index.jsx",["193"],"import { Button, Form, Input } from \"antd\";\r\nimport React, { useEffect } from \"react\";\r\nimport { createGame } from \"util/APIUtils\";\r\nimport { useHistory, useLocation, useRouteMatch } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { currentGame } from \"./../../hostSlice\";\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction Main(props) {\r\n  const match = useRouteMatch();\r\n  const [form] = Form.useForm();\r\n  const history = useHistory();\r\n\r\n  let query = useQuery();\r\n  const quizId = query.get(\"quizId\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  async function handleSubmit(values) {\r\n    const gameData = Object.assign({}, values);\r\n    // console.log(log);\r\n\r\n    await createGame(gameData)\r\n      .then((response) => {\r\n        dispatch(currentGame(response));\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    history.push(`${match.url}/lobby?quizId=${quizId}`, {\r\n      rootPath: match.url,\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({\r\n      presentationId: quizId,\r\n      gameType: \"LIVE\",\r\n    });\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <Form style={{ width: 350 }} form={form} onFinish={handleSubmit}>\r\n          <Form.Item name=\"gameType\">\r\n            <Input hidden />\r\n          </Form.Item>\r\n          <Form.Item name=\"presentationId\">\r\n            <Input hidden />\r\n          </Form.Item>\r\n          <Form.Item name=\"title\">\r\n            <Input placeholder=\"Title\" />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Button htmlType=\"submit\">Create Room</Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\index.jsx",[],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\screens\\InGame\\index.jsx",["194","195","196","197","198","199","200","201"],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\index.jsx",[],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Instruction\\index.jsx",["202","203","204"],"import React, { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Input, message, Result, Space } from \"antd\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { WS_BASE_URL } from \"constants/index\";\r\nimport SockJS from \"sockjs-client\";\r\nimport Stomp from \"stompjs\";\r\nimport moment from \"moment\";\r\n\r\nInstruction.propTypes = {};\r\n\r\nvar stompClient = null;\r\nfunction Instruction(props) {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const { state } = location;\r\n\r\n  const [question, setQuestion] = useState(null);\r\n  const [screen, setScreen] = useState({ name: \"SC_ANSWER\", info: {} }); // Screen state: SC_ANSWER, SC_WAIT, SC_RESULT\r\n\r\n  let startTime = useRef(null);\r\n\r\n  const onMessageReceived = useCallback((payload) => {\r\n    let receivedMessage = JSON.parse(payload.body);\r\n\r\n    if (receivedMessage.type === \"SEND_QUESTION\") {\r\n      setScreen({ name: \"SC_ANSWER\", info: {} });\r\n\r\n      let messages = receivedMessage.content.split(\"|\");\r\n      setQuestion({\r\n        id: messages[0],\r\n        title: messages[2],\r\n        questionType: messages[1],\r\n      });\r\n\r\n      startTime.current = moment();\r\n    }\r\n\r\n    if (receivedMessage.type === \"INTERACT\") {\r\n      let status = receivedMessage.content.substring(0, 1); // status: 1 => correct, 0 => incorrect\r\n      let point = receivedMessage.content.substring(1);\r\n      setScreen({\r\n        name: \"SC_RESULT\",\r\n        info: { status: status, title: point },\r\n        hidden: true,\r\n      });\r\n    }\r\n\r\n    if (receivedMessage.type === \"SKIP\") {\r\n      setScreen((screen) =>\r\n        screen.name === \"SC_RESULT\"\r\n          ? { ...screen, hidden: false }\r\n          : {\r\n              name: \"SC_HALFTIME\",\r\n              info: { status: 0, title: \"HALF TIME\" },\r\n              hidden: false,\r\n            }\r\n      );\r\n      // setScreen({\r\n      //   name: \"SC_HALFTIME\",\r\n      //   info: { status: 0, title: \"HALF TIME\" },\r\n      //   hidden: false,\r\n      // });\r\n    }\r\n  }, []);\r\n\r\n  const onConnected = useCallback(() => {\r\n    stompClient.subscribe(`/quiz/${state.pin}`, onMessageReceived);\r\n    stompClient.subscribe(`/user/quiz/${state.pin}`, onMessageReceived);\r\n  }, [state.pin, onMessageReceived]);\r\n\r\n  const onError = useCallback(() => {\r\n    message.error(\r\n      \"Could not connect to server. Please refresh this page to try again!\"\r\n    );\r\n  }, []);\r\n\r\n  const connect = useCallback(() => {\r\n    let serverUrl = WS_BASE_URL;\r\n    let ws = new SockJS(serverUrl);\r\n    stompClient = Stomp.over(ws);\r\n\r\n    stompClient.connect({}, onConnected, onError);\r\n  }, [onConnected, onError]);\r\n\r\n  function disconnect() {\r\n    if (stompClient !== null) stompClient.disconnect();\r\n  }\r\n\r\n  function handleInteract(e) {\r\n    // console.log(e.target.value);\r\n\r\n    const answerNum = e.currentTarget.value;\r\n\r\n    if (answerNum !== null) {\r\n      stompClient.send(\r\n        `/app/game.sendResponse/${state.pin}`,\r\n        {\r\n          questionId: question.id,\r\n          responseTime: moment().diff(startTime.current, \"seconds\", true),\r\n        },\r\n        JSON.stringify({\r\n          sender: state.nickname,\r\n          type: \"INTERACT\",\r\n          content: answerNum,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    connect();\r\n\r\n    return () => {\r\n      disconnect();\r\n    };\r\n  }, []);\r\n\r\n  // console.log(stompClient);\r\n\r\n  const fourOptions = [\"A\", \"B\", \"C\", \"D\"];\r\n  const fourButtonOptions = fourOptions.map((option, index) => (\r\n    <Button\r\n      key={index}\r\n      value={index}\r\n      onClick={(e) => handleInteract(e, \"value\")}\r\n    >\r\n      {option}\r\n    </Button>\r\n  ));\r\n\r\n  const twoOptions = [\"True\", \"False\"];\r\n  const twoButtonOptions = twoOptions.map((option, index) => (\r\n    <Button\r\n      key={index}\r\n      value={index}\r\n      onClick={(e) => handleInteract(e, \"value\")}\r\n    >\r\n      {option}\r\n    </Button>\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      {screen.name === \"SC_ANSWER\" ? (\r\n        question !== null ? (\r\n          <div>\r\n            <div>{question.title}</div>\r\n            {question.questionType === \"QUESTION_CHOICE_ANSWER\" ? (\r\n              <span>\r\n                <Space>{fourButtonOptions}</Space>\r\n              </span>\r\n            ) : question.questionType === \"QUESTION_TRUE_FALSE\" ? (\r\n              <span>\r\n                <Space>{twoButtonOptions}</Space>\r\n              </span>\r\n            ) : (\r\n              <span>\r\n                <Input />\r\n              </span>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <Result\r\n            status=\"info\"\r\n            title=\"You can see your name at the podium\"\r\n            subTitle=\"Waiting for host to start game\"\r\n            extra={[]}\r\n          />\r\n        )\r\n      ) : null}\r\n      {!screen.hidden && screen.name === \"SC_RESULT\" ? (\r\n        <ResultView status={screen.info.status} title={screen.info.title} />\r\n      ) : null}\r\n      {screen.name === \"SC_HALFTIME\" ? (\r\n        <ResultView status={screen.info.status} title={screen.info.title} />\r\n      ) : null}\r\n      {screen.hidden && screen.name === \"SC_RESULT\" ? (\r\n        <Result status=\"success\" title=\"Waiting for the result\" extra={[]} />\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction ResultView(props) {\r\n  return (\r\n    <>\r\n      <Result\r\n        status={props.status === \"1\" ? \"success\" : \"error\"}\r\n        title={props.title}\r\n      ></Result>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Instruction;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Pin\\index.jsx",[],"C:\\ReactJS\\uet-project\\src\\reportWebVitals.js",[],["205","206"],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\screens\\Name\\index.jsx",[],["207","208"],"C:\\ReactJS\\uet-project\\src\\pages\\Audience\\components\\InputPIN.jsx",["209","210"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Input, Tooltip } from \"antd\";\r\n\r\nInputPIN.propTypes = {};\r\n\r\nfunction InputPIN(props) {\r\n  const onChange = (e) => {\r\n    const { value } = e.target;\r\n    const reg = /^\\d*(\\d*)?$/;\r\n    if ((!isNaN(value) && reg.test(value)) || value === \"\") {\r\n      props.onChange(value);\r\n    }\r\n  };\r\n\r\n  const onBlur = () => {\r\n    const { onBlur } = props;\r\n    if (onBlur) {\r\n      onBlur();\r\n    }\r\n  };\r\n\r\n  return <Input {...props} onChange={onChange} onBlur={onBlur} />;\r\n}\r\n\r\nexport default InputPIN;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\hostSlice.js",["211"],"import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { message } from \"antd\";\r\n\r\nconst initGame = { current: {} };\r\n\r\nconst game = createSlice({\r\n  name: \"hostGame\",\r\n  initialState: initGame,\r\n  reducers: {\r\n    currentGame: (state, action) => {\r\n      state.current = action.payload;\r\n    },\r\n  },\r\n  extraReducers: {},\r\n});\r\n\r\nconst { reducer, actions } = game;\r\nexport const { currentGame } = actions;\r\nexport default reducer;\r\n","C:\\ReactJS\\uet-project\\src\\pages\\Host\\ProgressBar.js",[],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\Delayed.js",["212"],"C:\\ReactJS\\uet-project\\src\\pages\\Host\\CountdownTimer.js",[],{"ruleId":"213","severity":1,"message":"214","line":21,"column":39,"nodeType":"215","messageId":"216","endLine":21,"endColumn":51},{"ruleId":"217","replacedBy":"218"},{"ruleId":"219","replacedBy":"220"},{"ruleId":"213","severity":1,"message":"221","line":58,"column":7,"nodeType":"215","messageId":"216","endLine":58,"endColumn":18},{"ruleId":"217","replacedBy":"222"},{"ruleId":"219","replacedBy":"223"},{"ruleId":"213","severity":1,"message":"224","line":15,"column":8,"nodeType":"215","messageId":"216","endLine":15,"endColumn":20},{"ruleId":"213","severity":1,"message":"225","line":2,"column":8,"nodeType":"215","messageId":"216","endLine":2,"endColumn":17},{"ruleId":"217","replacedBy":"226"},{"ruleId":"219","replacedBy":"227"},{"ruleId":"217","replacedBy":"228"},{"ruleId":"219","replacedBy":"229"},{"ruleId":"217","replacedBy":"230"},{"ruleId":"219","replacedBy":"231"},{"ruleId":"213","severity":1,"message":"232","line":18,"column":3,"nodeType":"215","messageId":"216","endLine":18,"endColumn":13},{"ruleId":"213","severity":1,"message":"224","line":25,"column":8,"nodeType":"215","messageId":"216","endLine":25,"endColumn":20},{"ruleId":"233","severity":1,"message":"234","line":116,"column":6,"nodeType":"235","endLine":116,"endColumn":8,"suggestions":"236"},{"ruleId":"213","severity":1,"message":"237","line":12,"column":7,"nodeType":"215","messageId":"216","endLine":12,"endColumn":13},{"ruleId":"213","severity":1,"message":"238","line":3,"column":3,"nodeType":"215","messageId":"216","endLine":3,"endColumn":22},{"ruleId":"213","severity":1,"message":"239","line":10,"column":3,"nodeType":"215","messageId":"216","endLine":10,"endColumn":7},{"ruleId":"213","severity":1,"message":"240","line":13,"column":3,"nodeType":"215","messageId":"216","endLine":13,"endColumn":11},{"ruleId":"213","severity":1,"message":"241","line":19,"column":28,"nodeType":"215","messageId":"216","endLine":19,"endColumn":34},{"ruleId":"213","severity":1,"message":"242","line":26,"column":8,"nodeType":"215","messageId":"216","endLine":26,"endColumn":15},{"ruleId":"213","severity":1,"message":"243","line":65,"column":9,"nodeType":"215","messageId":"216","endLine":65,"endColumn":18},{"ruleId":"233","severity":1,"message":"244","line":163,"column":6,"nodeType":"235","endLine":163,"endColumn":8,"suggestions":"245"},{"ruleId":"233","severity":1,"message":"246","line":199,"column":6,"nodeType":"235","endLine":199,"endColumn":16,"suggestions":"247"},{"ruleId":"213","severity":1,"message":"225","line":2,"column":8,"nodeType":"215","messageId":"216","endLine":2,"endColumn":17},{"ruleId":"213","severity":1,"message":"248","line":14,"column":9,"nodeType":"215","messageId":"216","endLine":14,"endColumn":16},{"ruleId":"233","severity":1,"message":"249","line":117,"column":6,"nodeType":"235","endLine":117,"endColumn":8,"suggestions":"250"},{"ruleId":"217","replacedBy":"251"},{"ruleId":"219","replacedBy":"252"},{"ruleId":"217","replacedBy":"253"},{"ruleId":"219","replacedBy":"254"},{"ruleId":"213","severity":1,"message":"225","line":2,"column":8,"nodeType":"215","messageId":"216","endLine":2,"endColumn":17},{"ruleId":"213","severity":1,"message":"255","line":3,"column":17,"nodeType":"215","messageId":"216","endLine":3,"endColumn":24},{"ruleId":"213","severity":1,"message":"256","line":2,"column":10,"nodeType":"215","messageId":"216","endLine":2,"endColumn":17},{"ruleId":"233","severity":1,"message":"257","line":20,"column":6,"nodeType":"235","endLine":20,"endColumn":17,"suggestions":"258"},"no-unused-vars","'currentSlide' is defined but never used.","Identifier","unusedVar","no-native-reassign",["259"],"no-negated-in-lhs",["260"],"'OptionInput' is assigned a value but never used.",["259"],["260"],"'PrivateRoute' is defined but never used.","'PropTypes' is defined but never used.",["259"],["260"],["259"],["260"],["259"],["260"],"'withRouter' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'connect' and 'stompClient'. Either include them or remove the dependency array.","ArrayExpression",["261"],"'layout' is assigned a value but never used.","'ClockCircleOutlined' is defined but never used.","'Card' is defined but never used.","'Progress' is defined but never used.","'useRef' is defined but never used.","'Animate' is defined but never used.","'Countdown' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'connect' and 'presentationId'. Either include them or remove the dependency array.",["262"],"React Hook useEffect has missing dependencies: 'sendQuestion' and 'sendSkip'. Either include them or remove the dependency array.",["263"],"'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'connect'. Either include it or remove the dependency array.",["264"],["259"],["260"],["259"],["260"],"'Tooltip' is defined but never used.","'message' is defined but never used.","React Hook useEffect has a missing dependency: 'props.waitBeforeShow'. Either include it or remove the dependency array.",["265"],"no-global-assign","no-unsafe-negation",{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},"Update the dependencies array to be: [connect, stompClient]",{"range":"276","text":"277"},"Update the dependencies array to be: [connect, presentationId]",{"range":"278","text":"279"},"Update the dependencies array to be: [question, sendQuestion, sendSkip]",{"range":"280","text":"281"},"Update the dependencies array to be: [connect]",{"range":"282","text":"283"},"Update the dependencies array to be: [props.key, props.waitBeforeShow]",{"range":"284","text":"285"},[3109,3111],"[connect, stompClient]",[3756,3758],"[connect, presentationId]",[4678,4688],"[question, sendQuestion, sendSkip]",[3368,3370],"[connect]",[442,453],"[props.key, props.waitBeforeShow]"]